<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework 
 * @subpackage 	Utilities\Markup\Template
 * @copyright   Copyright (c) 2019, WeCodeArt Framework
 * @since		3.7.3
 * @version     3.9.5
 */

namespace WeCodeArt\Utilities\Markup;

defined( 'ABSPATH' ) || exit(); 

use WeCodeArt\Config\Interfaces\ConfigInterface;
use WeCodeArt\Config\Exceptions\FileNotFoundException;

class Template {
    /**
     * Theme config instance.
     *
     * @var array
     */
    protected $config;

    /**
     * File path to the template.
     *
     * @var string
     */
    protected $file;

    /**
     * Construct template.
     *
     * @param $config
     */
    public function __construct( ConfigInterface $config ) {
        $this->config = $config;
    }

    /**
     * Compile template.
     *
     * @param  array $context
     * @throws Exception
     *
     * @return void
     */
    public function compile( array $context = [] ) {
        ob_start();
        $this->render( $context );
        return ob_get_clean();
    }

    /**
     * Render template.
     *
     * @param  array $context
     * @throws Exception
     *
     * @return void
     */
    public function render( array $context = [] ) {
        if ( $template = locate_template( $path = $this->get_relative_path(), false, false ) ) {
            $this->do_actions();

            extract( apply_filters( "wecodeart/filter/template/context", $context, $this->get_file_name() ) );

            require $template;

            return;
        }

        throw new FileNotFoundException("Template file [{$this->get_relative_path()}] cannot be located.");
    }

    /**
     * Calls before including template actions.
     *
     * @return void
     */
    public function do_actions() {
        if ( $this->is_named() ) {
            list( $slug, $name ) = $this->file;

            do_action( "get_template_part_{$slug}", $slug, $name );

            return;
		}
		
        if ( is_array( $this->file ) && isset( $this->file[0] ) ) {
            return do_action( "get_template_part_{$this->file[0]}", $this->file[0], null );
        }

        do_action( "get_template_part_{$this->file}", $this->file, null );
    }

    /**
     * Gets absolute path to the template.
     *
     * @return string
     */
    public function get_path() {
        $directory = $this->config['paths']['directory'];
        return $directory . '/' . $this->get_relative_path();
    }

    /**
     * Gets template path within `views` directory.
     *
     * @return string
     */
    public function get_relative_path() {
        $views = $this->config['directories']['views'];

        $extension = $this->config['views']['extension'];

        return $views . '/' . $this->get_file_name( $extension );
    }

    /**
     * Gets template name.
     *
     * @return string
     */
    public function get_file_name( $extension = '.php' ) {
        if ( $this->is_named() ) {
            $file_name = join( '-', $this->file ) . $extension;
		} elseif ( is_array( $this->file ) && isset( $this->file[0] ) ) {
            $file_name = "{$this->file[0]}{$extension}";
        } else {
            $file_name = $this->file . $extension;
        }

        return apply_filters( 'wecodeart/filter/template/filename', $file_name, $this->file );
    }

    /**
     * Checks if temlate has variant name.
     *
     * @return boolean
     */
    public function is_named() {
        if ( ! is_array( $this->file ) ) {
            return false;
		}
		
        if ( isset( $this->file[1] ) && is_bool( $this->file[1] ) || null === $this->file[1] || empty( $this->file[1] ) ) {
            return false;
        }

        return true;
    }

    /**
     * Sets the file path to the template.
     *
     * @param string $file
     *
     * @return self
     */
    public function set_file( $file ) {
        $this->file = $file;

        return $this;
    }

    /**
     * Gets the File path to the template.
     *
     * @return string
     */
    public function get_file() {
        return $this->file;
    }
}