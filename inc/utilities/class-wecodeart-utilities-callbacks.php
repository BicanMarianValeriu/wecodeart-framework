<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Utilities\Callbacks
 * @copyright   Copyright (c) 2019, WeCodeArt Framework
 * @since 		3.5
 * @version		3.8.1
 */

namespace WeCodeArt\Utilities;

if ( ! defined( 'ABSPATH' ) ) exit(); 

/**
 * Callback functions wich returns boolean
 */
class Callbacks {

	use \WeCodeArt\Singleton; 

	/**
	 * Checks if the current page is a product archive
	 *
	 * @since	1.8.8
	 * @version	3.8.1
	 *
	 * @return 	boolean
	 */
	public static function is_front_page() {
		return ( is_front_page() && ! is_home() );
	}

	/**
	 * Check if on default post archive
	 *
	 * @since	3.6.1
	 * @version	3.8.1
	 *
	 * @return 	boolean
	 */
	public static function is_post_archive() {
		return ( 'post' === get_post_type() && ( is_home() || is_archive() || is_search() ) );
		return false;
	}

	/**
	 * Check if current post has full/wide blocks aligns
	 *
	 * @since	3.6.1
	 * @version	3.8.1
	 *
	 * @param  	object|integer
	 *
	 * @return 	boolean
	 */
	public static function has_wide_or_full_block( $post = 0 ) {
		if( ! $post ) global $post;  
		
		// Retrieve an array of blocks used for this post.
		$blocks = parse_blocks( $post->post_content ); 

		foreach( $blocks as $block ) {  
			// If we have full/wide allign return true early and bail.
			if( in_array( Helpers::get_prop( $block['attrs'], 'align' ), [ 'full', 'wide' ] ) ) {
				return true;
				break;
			}
		}

		return false;
	}

	/**
	 * Remove sidebar on gutenberg posts with wide/full layout
	 *
	 * @since	3.6.1
	 * @version	3.8.1
	 *
	 * @uses 	filter: `wecodeart/filter/gutenberg/auto_layout`
	 *
	 * @return 	boolean|null
	 */
	public static function is_full_content() {
		$enabled = apply_filters( 'wecodeart/filter/gutenberg/auto_layout', true );

		if( ! is_singular() || $enabled === false ) return false;
		if( self::has_wide_or_full_block() ) return true;

		return null;
	}
}