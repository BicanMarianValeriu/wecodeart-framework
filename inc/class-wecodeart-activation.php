<?php namespace WeCodeArt;
// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) exit(); 
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework 
 * @subpackage 	Compatability/Activation
 * @since		v3.5
 * @version 	v3.5
 */
 
class Activation {
	/**
	 * Vars
	 * @access 	protected 
	 */
	protected $requirements = [];
	protected $messages = [];
	protected $status = true; 

	/**
	 * Instance
	 *
	 * @access 	private
	 * @var 	object
	 */
	private static $instance;

	/**
	 * Initiator
	 */
	public static function get_instance() {
		if( ! isset( self::$instance ) ) self::$instance = new self;
		return self::$instance;
	}
	
	/**
	 * Construtor
	 */
	public function __construct() {

		$this->messages = apply_filters( 'wecodeart/filter/activation/messages', [
			'customizer' => __( 'Your WordPress installation does not meet the minimum requirements to run WeCodeArt Framework. Please upgrade and try again.', 'wecodeart' ),
			'checkpoint' => __( 'WeCodeArt Framework requires at least %s version %s. You are running version %s. Please upgrade and try again.', 'wecodeart' )
		] );

		$this->set_requirements();
		$this->compare_requirements();

		if( $this->is_ok() === false ) {
			// Add default error notices into admin, prevent customizer load and redirect nottice
			add_action( 'after_switch_theme', 	array( $this, 'after_switch_theme' 	) );
			add_action( 'load-customize.php', 	array( $this, 'customizer_notice' 	) );
			add_action( 'template_redirect', 	array( $this, 'redirect_notice' 	) );

			// Add Our Theme Hook
			do_action( 'wecodeart/hook/activation/failed' );
		}
	}

	/**
	 * Get Activation Validation Status
	 * @since 	3.5
	 * @version	3.5
	 */
	public function is_ok() {
		if( ! $this->requirements ) return;
		foreach( $this->requirements as $val ) {
			if( $val['failed'] === true ) {
				$this->status = false;
				break;
			} 
		}	
		return $this->status;
	}

	/**
	 * Set Requirements
	 * @since 	3.5
	 * @version	3.5
	 */
	public function set_requirements( $args = [] ) {
		// Setup an array with data to check compatability
		$defaults = [
			[
				'label'		=> 'WordPress',
				'required' 	=> '4.7.0',
				'installed' => $GLOBALS['wp_version']
			],
			[
				'label' 	=> 'PHP',
				'required' 	=> '5.3.0',
				'installed' => phpversion()
			]
		];

		$args = wp_parse_args( $args, apply_filters( 'wecodeart/filter/activation/requirements', $defaults ) );

		$this->requirements = $args;	
	}

	/**
	 * Compare Requirements
	 * @since 	3.5
	 * @version	3.5
	 */
	public function compare_requirements() {
		if( ! $this->requirements ) return;
		foreach( $this->requirements as $key => $val ) {
			$this->requirements[$key]['failed'] = version_compare( $val['installed'], $val['required'], '<=' );
		}	
	}

	/**
	 * Show an error notice box
	 * @since 	1.8
	 * @version	3.5
	 */
	public function after_switch_theme() {	 
		switch_theme( WP_DEFAULT_THEME );
		unset( $_GET['activated'] );
		add_action( 'admin_notices', array( $this, 'admin_notice' ) ); 
	}

	/**
	 * Show an error notice box
	 * @since 	1.8
	 * @version	3.5 
	 */
	public function admin_notice() {
		if( ! $this->requirements ) return;
		foreach( $this->requirements as $key => $val ) {
			if( $val['failed'] === true ) {
				$message = sprintf( $this->messages['checkpoint'], $val['label'], $val['required'], $val['installed'] );
				printf( '<div class="error"><p>%s</p></div>', $message );
			}
		}	
	}

	/**
	 * Show an error notice box on WP Customizer
	 * @since 	1.8
	 * @version	3.5 
	 */
	public function customizer_notice() {
		if( ! $this->requirements ) return;
		foreach( $this->requirements as $key => $val ) {
			if( $val['failed'] === true ) {
				wp_die( $this->messages['customizer'], '', array( 'back_link' => true ) );
				break;
			}
		} 
	}

	/**
	 * Prevents the Theme Preview from being loaded.
	 * @since 	1.8
	 * @version	3.5 
	 */
	public function redirect_notice() {
		if( isset( $_GET['preview'] ) ) wp_die( $this->messages['customizer'] );
	}
}