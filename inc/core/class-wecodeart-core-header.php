<?php namespace WeCodeArt\Core;
// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) exit();
// Use
use WeCodeArt\Utilities\Markup as Markup;
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Header Class
 * @copyright   Copyright (c) 2018, WeCodeArt Framework
 * @since 		v3.5
 * @version		v3.5
 */

class Header {
	/**
	 * Instance
	 *
	 * @var $_instance
	 */
	private static $_instance = NULL;

	/**
	 * Initiator
	 *
	 * @since 	v3.5
	 * @return 	object
	 */
	public static function get_instance() {
		if( self::$_instance == NULL ) self::$_instance = new self;
		return self::$_instance;
	}

	/**
	 * Class Constructor.
	 */
	public function __construct() {
		add_action( 'wp_head',	array( $this, 'meta_pingback' ) );
		add_action( 'wp_head',	array( $this, 'meta_viewport' ) );
		add_filter( 'wecodeart/filter/attributes/body', array( $this, 'body_attrs' ) );
		add_action( 'wecodeart_header_markup', array( $this, 'header_markup' ) );
	}
	
	/**
	 * Output HEADER markup function
	 * @since 	unknown
	 * @version	3.5
	 * @return 	HTML 
	 */
	public function header_markup() {
		$header_attr = Markup::generate_attr( 'header', [
			'id' 		=> 'header', 
			'itemscope' => 'itemscope',
			'itemtype' 	=> 'http://schema.org/WPHeader'
		] ); // Attrs are escaped by the functiona above
		?>
		<header <?php echo $header_attr; ?>>
			<?php 
			
				// Top Hook Inside #Header 	
				do_action( 'wecodeart/hook/header/top' );
			
				// Header Bar
				Header::render_header_bar();	
			
				// Bottom Hook Inside #Header 
				do_action( 'wecodeart/hook/header/bottom' );
			
			?>
		</header>
		<!-- /header.header -->
		<?php
	}

	/**
	 * Header Branding View
	 * @return 	HTML
	 */
	public static function display_branding() {
		get_template_part( 'views/header/bar', 'branding' );
	}

	/**
	 * Header Menu View
	 * @return 	HTML 
	 */
	public static function display_menu() {
		get_template_part( 'views/header/bar', 'menu' );
	}

	/**
	 * Header Search View
	 * @return 	HTML 
	 */
	public static function display_search() {
		get_template_part( 'views/header/bar', 'search' );
	}

	/**
	 * Generate Body Attrs
	 * @since	v3.5
	 * @version v3.5
	 * @return 	array 
	 */
	public function body_attrs( $args = [] ) {
		// Set up blog variable
		$blog = ( is_home() || is_archive() || is_attachment() || is_tax() || is_single() ) ? true : false;
		// Set up default itemtype
		$itemtype = 'WebPage';
		// Get itemtype for the blog
		$itemtype = ( $blog ) ? 'Blog' : $itemtype;
		// Get itemtype for search results
		$itemtype = ( is_search() ) ? 'SearchResultsPage' : $itemtype;

		$defaults = [
			'class'		=> implode( ' ', get_body_class() ),
			'itemscope' => 'itemscope',
			'itemtype' 	=> 'https://schema.org/' . $itemtype
		];

		$args = wp_parse_args( $args, $defaults );

		return $args;
	}

	/**
	 * Variable that holds the Header Modules and Options
	 * @since	v1.5
	 * @version v3.5
	 * @return 	array
	 */
	public static function nav_bar_modules() {
		// Set the default modules
		$defaults = array();
		$defaults['branding'] = array(
			'label'    => __( 'Site Branding', 'wecodeart' ),
			'callback' => array( __CLASS__, 'display_branding' )
		);
		// Foundation Menu
		$defaults['menu'] = array(
			'label'    => __( 'Primary Menu', 'wecodeart' ),
			'callback' => array( __CLASS__, 'display_menu' )
		);
		// Search Box
		$defaults['search'] = array(
			'label'    => __( 'Search Form', 'wecodeart' ),
			'callback' => array( __CLASS__, 'display_search' )
		);
		
		// New Modules
		$modules = apply_filters( 'wecodeart/filter/header-bar/modules', $defaults );

		return $modules;
	}

	/**
	 * Returns the inner markp with wrapper based on user options
	 * @since 	unknown
	 * @version v3.5
	 * @uses	wecodeart_sortable_html()
	 * @return 	HTML
	 */
	public static function render_header_bar() {
		$wrappers = array(
			[
				'tag' => 'div',
				'attrs' => [
					'id' => 'header-bar',
					'class' => 'header__bar header-bar'
				]
			],
			[
				'tag' => 'div',
				'attrs' => [
					'class' => get_theme_mod( 'header-bar-container', 'grid-container' )
				]
			],
			[
				'tag' => 'div',
				'attrs' => [
					'class' => 'grid-x grid-padding-x align-middle'
				]
			]
		);

		Markup::wrap( 'header-bar-wrappers', $wrappers, [ __CLASS__, 'sort_header_bar' ] ); 
	}

	/**
	 * Return the Header final HTML with modules selected by user
	 * @since	v1.5
	 * @version v3.5
	 * @uses	Markup::sortable()
	 * @return 	string HTML
	 */
	public static function sort_header_bar() {
		// Sort the modules
		Markup::sortable( 
			self::nav_bar_modules(), 
			get_theme_mod( 'header-bar-modules', array( 'branding', 'menu', 'search' ) )
		); 
	}

	/**
	 * Add a pingback url auto-discovery wp_head for singularly identifiable articles.
	 * @since	v2.2
	 * @version v2.2
	 */
	public function meta_pingback() {
		if ( is_singular() && pings_open() ) printf( '<link rel="pingback" href="%s" />' . "\n", get_bloginfo( 'pingback_url' ) );
	}

	/**
	 * Add a meta viewport printed in wp_head.
	 * @since	v2.2
	 * @version v2.2
	 */
	public function meta_viewport() {
		$viewport = apply_filters( 'wecodeart_filter_viewport_value', 'width=device-width, initial-scale=1' );
		printf( '<meta name="viewport" content="%s" />' . "\n", esc_attr( $viewport ) );
	}
}