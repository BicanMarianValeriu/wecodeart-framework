<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Header Class
 * @copyright   Copyright (c) 2019, WeCodeArt Framework
 * @since		3.5
 * @version		3.7.0
 */

namespace WeCodeArt\Core;

if ( ! defined( 'ABSPATH' ) ) exit();

use WeCodeArt\Utilities\Markup;

/**
 * Framework Header
 */
class Header {

	use \WeCodeArt\Singleton;

	/**
	 * Send to Constructor
	 * @since 3.6.2
	 */
	public function init() {
		add_action( 'wp_head',	[ $this, 'meta_pingback' ] );
		add_action( 'wp_head',	[ $this, 'meta_viewport' ] );
		add_filter( 'wecodeart/filter/attributes/body', [ $this, 'body_attrs' ]		);
		add_action( 'wecodeart_header_markup', 			[ $this, 'header_markup' ] 	);
	}
	
	/**
	 * Output HEADER markup function
	 *
	 * @uses	WeCodeArt\Utilities\Markup::wrap()
	 * @since 	unknown
	 * @version	3.7.0
	 *
	 * @return 	void 
	 */
	public function header_markup() {
		Markup::wrap( 'header', [ [
			'tag' 	=> 'header',
			'attrs' => [
				'id' 		=> 'header', 
				'class'		=> 'header', 
				'itemscope' => 'itemscope',
				'itemtype' 	=> 'http://schema.org/WPHeader'
			]
		] ], function() {
			/** 
			 * @hook	'wecodeart/hook/header/top'
			 */
			do_action( 'wecodeart/hook/header/top' );

			Header::render_header_bar();

			/** 
			 * @hook	'wecodeart/hook/header/bottom'
			 */	 
			do_action( 'wecodeart/hook/header/bottom' ); 
		} );
	}

	/**
	 * Header Branding View
	 *
	 * @return 	void
	 */
	public static function display_branding() {
		get_template_part( 'views/header/bar', 'branding' );
	}

	/**
	 * Header Menu View
	 *
	 * @uses	WeCodeArt\Utilities\Markup::wrap()
	 * @since 	unknown
	 * @version	3.7.0
	 *
	 * @return 	void 
	 */
	public static function display_menu() { 
		Markup::wrap( 'header-menu', [ [
			'tag' 	=> 'div',
			'attrs' => [
				'id' 	=> 'bar-menu',
				'class' => 'header-bar__menu col-12 col-lg'
			]
		] ], 'wp_nav_menu', [ apply_filters( 'wecodeart/filter/menu/main', [
			'theme_location' => 'primary',
			'container' 	 => 'nav', 
			'menu_class' 	 => 'menu nav justify-content-end', 
			'depth' 		 => 10,  
			'walker' 		 => new \WeCodeArt\Walkers\Menu,
			'fallback_cb'	 => 'WeCodeArt\Walkers\Menu::fallback' 
		] ) ] );
	}

	/**
	 * Header Search View
	 *
	 * @uses	WeCodeArt\Utilities\Markup::wrap()
	 * @since 	unknown
	 * @version	3.7.0
	 * 
	 * @return 	void
	 */
	public static function display_search() { 
		Markup::wrap( 'header-search', [ [
			'tag' 	=> 'div',
			'attrs' => [
				'id' 	=> 'bar-search',
				'class' => 'header-bar__search col-12 col-lg-4'
			]
		] ], 'get_search_form' ); 
	}

	/**
	 * Generate Body Attrs
	 *
	 * @since 	3.5
	 * @version 3.5
	 *
	 * @return 	array 
	 */
	public function body_attrs( $args = [] ) {
		// Set up blog variable.
		$blog = ( is_home() || is_archive() || is_attachment() || is_tax() || is_single() ) ? true : false;
		// Set up default itemtype.
		$itemtype = 'WebPage';
		// Get itemtype for the blog.
		$itemtype = ( $blog ) ? 'Blog' : $itemtype;
		// Get itemtype for search results.
		$itemtype = ( is_search() ) ? 'SearchResultsPage' : $itemtype;

		$defaults = [
			'class'		=> implode( ' ', get_body_class() ),
			'itemscope' => 'itemscope',
			'itemtype' 	=> 'https://schema.org/' . $itemtype
		];

		$args = wp_parse_args( $args, $defaults );

		return $args;
	}

	/**
	 * Variable that holds the Header Modules and Options
	 *
	 * @since	1.5
	 * @version	3.6
	 *
	 * @return 	array
	 */
	public static function nav_bar_modules() {
		// Set the default modules
		$defaults = array();
		$defaults['branding'] = array(
			'label'    => __( 'Site Branding', 'wecodeart' ),
			'callback' => array( __CLASS__, 'display_branding' )
		);
		// Foundation Menu
		$defaults['menu'] = array(
			'label'    => __( 'Primary Menu', 'wecodeart' ),
			'callback' => array( __CLASS__, 'display_menu' )
		);
		// Search Box
		$defaults['search'] = array(
			'label'    => __( 'Search Form', 'wecodeart' ),
			'callback' => array( __CLASS__, 'display_search' )
		); 

		return apply_filters( 'wecodeart/filter/header_bar/modules', $defaults ); 
	}

	/**
	 * Returns the inner markp with wrapper based on user options
	 *
	 * @uses	WeCodeArt\Utilities\Markup::wrap()
	 * @since 	unknown
	 * @version	3.6
	 *
	 * @return 	void
	 */
	public static function render_header_bar() {
		$wrappers = array(
			[
				'tag' 	=> 'div',
				'attrs' => [
					'id' 	=> 'header-bar',
					'class' => 'header__bar header-bar'
				]
			],
			[
				'tag' 	=> 'div',
				'attrs' => [
					'class' => get_theme_mod( 'header-bar-container' )
				]
			],
			[
				'tag' 	=> 'div',
				'attrs' => [
					'class' => 'row align-items-center'
				]
			]
		);

		Markup::wrap( 'header-bar-wrappers', $wrappers, [ __CLASS__, 'sort_header_bar' ] ); 
	}

	/**
	 * Return the Header final HTML with modules selected by user
	 *
	 * @uses	WeCodeArt\Utilities\Markup::sortable()
	 * @since	1.5
	 * @version	3.6
	 *
	 * @return 	void
	 */
	public static function sort_header_bar() {
		// Sort the modules
		Markup::sortable( self::nav_bar_modules(), get_theme_mod( 'header-bar-modules' ) ); 
	}

	/**
	 * Add a pingback url auto-discovery wp_head for singularly identifiable articles
	 *
	 * @since	v2.2
	 * @version v2.2
	 */
	public function meta_pingback() {
		if ( is_singular() && pings_open() ) printf( '<link rel="pingback" href="%s" />' . "\n", get_bloginfo( 'pingback_url' ) );
	}

	/**
	 * Add a meta viewport printed in wp_head
	 *
	 * @since	v2.2
	 * @version v2.2
	 */
	public function meta_viewport() {
		$viewport = apply_filters( 'wecodeart_filter_viewport_value', 'width=device-width, initial-scale=1' );
		printf( '<meta name="viewport" content="%s" />' . "\n", esc_attr( $viewport ) );
	}
}