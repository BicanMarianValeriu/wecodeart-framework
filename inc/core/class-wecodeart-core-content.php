<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Core\Content
 * @copyright   Copyright (c) 2019, WeCodeArt Framework
 * @since 		3.5
 * @version		3.7.1
 */

namespace WeCodeArt\Core;

if ( ! defined( 'ABSPATH' ) ) exit();

use WeCodeArt\Core\Loops;
use WeCodeArt\Core\Pagination;
use WeCodeArt\Utilities\Markup;

/**
 * Handles Content Containers
 */
class Content {

	use \WeCodeArt\Singleton;

	/**
	 * Send to Constructor
	 * @since 3.6.2
	 */
	public function init() {
		Loops::get_instance();

		add_action( 'widgets_init', 				[ $this, 'register_sidebars' 	] );

		add_action( 'wecodeart_inner_markup', 		[ $this, 'render_modules' 		] );
		add_action( 'wecodeart/hook/loop/before',	[ $this, 'content_markup_open' 	] );
		add_action( 'wecodeart/hook/loop/after',	[ $this, 'content_markup_close' ] );
		add_action( 'wecodeart/hook/main/after',    [ Pagination::get_instance(), 'archive' ], 10 );
	}
	
	/**
	 * Echo the opening tag markup for content
	 *
	 * @since 	unknown
	 * @version	3.6.4
	 *
	 * @return 	string 
	 */
	public function content_markup_open() { 
		// Adds ability to filter the attributes of main content.
		$attributes = Markup::generate_attr(
			'content',
			[
				'id' 	=> 'primary',
				'class' => 'content__main col-12 col-lg'
			]
		);
		?>
		<div <?php echo $attributes; ?>>
			<?php 
			
				/**
				 * @hooked
				 * ---
				 */
				do_action( 'wecodeart/hook/main/before' ); 
				
				$attributes = Markup::generate_attr(
					'main',
					[
						'id' 	=> 'main',
						'class' => 'site-main'
					]
				);
			?>
			<main <?php echo $attributes; ?>>
		<?php
	}

	/**
	 * Echo the ending tag markup for content
	 *
	 * @since 	unknown
	 * @version	3.5
	 *
	 * @return 	string
	 */
	public function content_markup_close() {	
		?>
			</main>
			<?php 
				
				/**
				 * @hooked WeCodeArt\Core\Pagination\numeric_posts_nav() - 10 
				 */
				do_action( 'wecodeart/hook/main/after' ); 
				
			?>
		</div>
		<?php
	}

	/**
	 * Return the required loop based on conditionals
	 *
	 * @since	1.0
	 * @version	3.5
	 * 
	 * @return	void
	 */
	public static function get_loop() {
		if( is_404() ) Loops::fourofour();
		else Loops::default();
	}

	/**
	 * Get Primary Sidebar View
	 *
	 * @since	1.0
	 * @version	3.7.0
	 *
	 * @return	void
	 */
	public static function display_primary_sidebar() {
	 	Markup::wrap( 'sidebar-primary', [ [ 
			'tag' 	=> 'div',
			'attrs' => [
				'id' 	=> 'secondary', 
				'class' => 'content__sidebar col-12 col-lg-4' 
			]
		] ], 'get_template_part', [ 'views/sidebars/sidebar', 'primary' ] ); 
	}

	/**
	 * Get Secondary Sidebar View
	 *
	 * @since	1.0
	 * @version	3.7.0
	 *
	 * @return	void
	 */
	public static function display_secondary_sidebar() {
		Markup::wrap( 'sidebar-primary', [ [ 
			'tag' 	=> 'div',
			'attrs' => [
				'id' 	=> 'secondary-2', 
				'class' => 'content__sidebar content__sidebar--secondary col-sm-12 col-lg-2' 
			]
		] ], 'get_template_part', [ 'views/sidebars/sidebar', 'secondary' ] );  
	}

	/**
	 * Variable that holds the Header Modules and Options
	 *
	 * @since	1.5
	 * @version	3.5
	 *
	 * @return 	array
	 */
	public static function content_modules() {
		// Default Modules (Content+Sidebar)
		$modules = array();
		$modules['content'] = array(
			'label'    => __( 'Entry Content', 'wecodeart' ),
			'callback' => [ __CLASS__, 'get_loop' ]
		);
		$modules['primary'] = array(
			'label'    => __( 'Primary Sidebar', 'wecodeart' ),
			'callback' => [ __CLASS__, 'display_primary_sidebar' ]
		);
		// Optional Sidebar
		if ( apply_filters( 'wecodeart/filter/sidebar/secondary/enable', false ) ) {
			$modules['secondary'] = array(
				'label'    => __( 'Secondary Sidebar', 'wecodeart' ),
				'callback' => [ __CLASS__, 'display_secondary_sidebar' ]
			);
		}

		// Merge default modules with user modules
		return apply_filters( 'wecodeart/filter/content/modules', $modules ); 
	}

	/**
	 * Returns the inner markp with wrapper based on user options
	 *
	 * @since 	unknown
	 * @version	3.7.1
	 * @uses	WeCodeArt\Utilities\Markup::wrap();
	 *
	 * @return 	HTML
	 */
	public static function render_modules() {
		$options = self::get_contextual_options();

		$class= [ 'content-area' ];
		if( in_array( 'primary', $options['modules'], true ) ) $class[] = 'content-area--has-primary-sidebar';
		if( in_array( 'secondary', $options['modules'], true ) ) $class[] = 'content-area--has-secondary-sidebar';

		$wrappers = [
			[ 'tag' => 'div', 'attrs' => [ 'class' => implode( ' ', $class ) ] ],
			[ 'tag' => 'div', 'attrs' => [ 'class' => $options['container'] ] ],
			[ 'tag' => 'div', 'attrs' => [ 'class' => 'row' ] ]
		];

		Markup::wrap( 'content-wrappers', $wrappers, [ __CLASS__, 'sort_modules' ] ); 
	}

	/**
	 * Return the Inner final HTML with modules selected by user for each page.
	 *
	 * @uses	WeCodeArt\Utilities\Markup::sortable();
	 * @since 	unknown
	 * @version	3.5
	 *
	 * @return 	void
	 */
	public static function sort_modules() {
		// Everywhere/Defaults
		$options = self::get_contextual_options();

		// Sort the modules
		Markup::sortable( self::content_modules(), $options['modules'] );
	}

	/**
	 * Get Contextual Modules Options
	 *
	 * @since 	3.5.0
	 * @version	3.6.1
	 *
	 * @return 	array 
	 */
	public static function get_contextual_options() {
		// Blog Page
		if( is_home() ) {
			return [
				'container' => get_theme_mod( 'content-layout-container-blog' ),
				'modules' 	=> get_theme_mod( 'content-layout-modules-blog' )
			];
		}

		// Page Specific Mods
		$pages = get_pages();
		foreach( $pages as $page ) {		
			$ID = $page->ID;
			if( is_page( $ID ) ) { // default must be provided since we do not set in customizer
				return [
					'container' => get_theme_mod( 'content-layout-container-page-' . $ID, 'container' ),
					'modules' 	=> get_theme_mod( 'content-layout-modules-page-' . $ID, [ 'content', 'primary' ] )
				]; 
			}
		}

		// 404 Page Mods
		$fof = get_theme_mod( 'page_for_404', '0' );
		if( is_404() && $fof !== '' ) { // default must be provided since we do not set in customizer
			return [
				'container' => get_theme_mod( 'content-layout-container-page-' . $fof, 'container' ),
				'modules' 	=> get_theme_mod( 'content-layout-modules-page-' . $fof, [ 'content', 'primary' ] )
			]; 
		}

		// Post Types Archives And Singular Context Mods 
		$public_posts = get_post_types( [ 'public' => true, 'publicly_queryable' => true ] ); 

		foreach( $public_posts as $type ) { 
			if( is_post_type_archive( $type ) ) {
				return [
					'container' => get_theme_mod( 'content-layout-container-' . $type . '-archive' ),
					'modules' 	=> get_theme_mod( 'content-layout-modules-' . $type . '-archive' )
				]; 
			}

			if( is_singular( $type ) ) {  
				$modules 	= get_theme_mod( 'content-layout-modules-' . $type . '-singular' ); 
				if( wecodeart_gutenberg_wide_or_full_content() ) $modules = [ 'content' ]; // Return content only 
				
				return [
					'container' => get_theme_mod( 'content-layout-container-' . $type . '-singular' ),
					'modules' 	=> $modules
				];
			}
		} 

		// Everywhere/Defaults
		return [
			'container' => get_theme_mod( 'content-layout-container' ),
			'modules' 	=> get_theme_mod( 'content-layout-modules' )
		];
	}

	/**
	 * Return the Inner final HTML with modules selected by user for each page.
	 *
	 * @since	1.0
	 * @version	3.6.0.4
	 *
	 * @return 	void
	 */
	public function register_sidebars() {
		$primary = array(
			'class'         => 'primary',
			'id'            => 'primary',
			'name'          => __( 'Primary Sidebar', 'wecodeart' ),
			'description'   => __( 'This is the default Primary Sidebar.', 'wecodeart' ),
			'before_widget' => '<div id="%1$s" class="widget %2$s">',
			'after_widget'  => '</div>',
			'before_title'  => '<h4 class="widget__title">',
			'after_title'   => '</h4>'
		);
		register_sidebar( $primary );
		if ( apply_filters( 'wecodeart/filter/sidebars/secondary/enable', false ) ) {
			$secondary = array(
				'class'         => 'secondary',
				'id'            => 'secondary',
				'name'          => __( 'Secondary Sidebar', 'wecodeart' ),
				'description'   => __( 'Secondary Sidebar - only enabled via filter.', 'wecodeart' ),
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget'  => '</div>',
				'before_title'  => '<h4 class="widget__title">',
				'after_title'   => '</h4>'
			);
			register_sidebar( $secondary );
		}
	}
}