<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Core\Scripts
 * @copyright   Copyright (c) 2019, WeCodeArt Framework
 * @since 		1.9
 * @version		3.9.5
 */

namespace WeCodeArt\Core;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Utilities\Markup;
use WeCodeArt\Utilities\Helpers;
use function WeCodeArt\Core\Scripts\get_asset;

/**
 * Framework Assets
 */
class Scripts {

	use \WeCodeArt\Singleton;
	use \WeCodeArt\Core\Scripts\Base;

	/**
	 * Send to Constructor
	 *
	 * @since 3.6.2
	 */
	public function init() {
		// All starts here
		add_action( 'wp_enqueue_scripts', 	[ $this, 'front_scripts'		] );
		add_action( 'wp_enqueue_scripts', 	[ $this, 'localize_js' 			], 90 );
		add_action( 'wp_default_scripts', 	[ $this, 'jquery_to_footer' 	] );
		add_filter( 'wp_get_custom_css', 	[ $this, 'trim_customizer_css' 	] );
		//add_filter( 'script_loader_tag', 	[ $this, 'maybe_enable_attrs' 	], 10, 3 );
	}

	/**
	 * WeCodeArt JS Object
	 *
	 * @since	3.2
	 * @version	3.9.5
	 *
	 * @return 	void
	 */
	public function localize_js() {
		global $wp_scripts;

		$wecodeart = [
			'assetsEnqueue' 	=> $wp_scripts->queue, 
			'templateDirectory' => get_template_directory_uri()
		];

		if( is_child_theme() ) {
			$wecodeart['styleDirectory'] = get_stylesheet_directory_uri();
		}
		
		wp_localize_script( 
			$this->make_handle(), 
			explode( '-', wecodeart_config( 'textdomain' ) )[0], // Domain as JS object.
			apply_filters( 'wecodeart/filter/scripts/core/localize', $wecodeart ) 
		);
	}

	/**
	 * jQuery to Footer
	 *
	 * @since	3.1.2
	 * @version	3.5
	 */
	public function jquery_to_footer( $wp_scripts ) {
		if ( ! is_admin() && apply_filters( 'wecodeart/filter/scripts/jquery-in-footer', false ) ) {
			$wp_scripts->add_data( 'jquery', 			'group', 1 );
			$wp_scripts->add_data( 'jquery-core', 		'group', 1 );
			$wp_scripts->add_data( 'jquery-migrate', 	'group', 1 );
		}
	}

	/**
	 * Enqueue Front-End Styles
	 *
	 * @since	1.0
	 * @version	3.9.5
	 */
	public function front_scripts() {
		// Enqueue Styles
		wp_enqueue_style( $this->make_handle(), get_asset( 'css', 'style' ), [], wecodeart( 'version' ) );

		// Enqueue scripts
		wp_enqueue_script( $this->make_handle(), get_asset( 'js', 'frontend' ), [ 'jquery' ], wecodeart( 'version' ), true );
		
		if ( ( is_page() || is_single() ) && comments_open() && get_option( 'thread_comments' ) ) {
			wp_enqueue_script( 'comment-reply' );
		}
	}

	/**
	 * Filter Customizer Custom CSS
	 *
	 * @since	3.9.5
	 *
	 * @param 	string $css CSS from Customizer.
	 * @return 	string
	 */
	public function trim_customizer_css( $css ) {
		$css = Helpers::trim_css( $css );
		return $css;
	}

	/**
	 * Async / Defer.
	 *
	 * @since 3.9.3
	 *
	 * @param 	string $tag    The script tag, generated by WordPress.
	 * @param 	string $handle The handle for the registered script.
	 * @param 	string $src    The source URL for the script.
	 *
	 * @return 	string $tag The (maybe) reformatted script tag.
	 */
	public function maybe_enable_attrs( $tag, $handle, $src ) {

		$supported_attributes = [ 'async', 'defer' ];

		$decoded_src = wp_specialchars_decode( $src );

		$query = wp_parse_url( $decoded_src, PHP_URL_QUERY );

		if ( ! $query ) {
			return $tag;
		}

		wp_parse_str( $query, $query_args );

		foreach ( $supported_attributes as $attr ) {

			if ( isset( $query_args[ $attr ] ) && 'true' === $query_args[ $attr ] ) {

				$new_src = esc_url( remove_query_arg( $attr, $decoded_src ) );

				$tag = Markup::strip_attr( $tag, 'script', $attr );
				$tag = str_replace( ' src=', ' ' . esc_attr( $attr ) . ' src=', $tag );
				$tag = str_replace( $src, $new_src, $tag );
			}
		}

		return $tag;

	}
}

// Define Child NS
namespace WeCodeArt\Core\Scripts;

/**
 * Base Trait Class for implementing make_handle()
 */
trait Base {
	/**
	 * Make a script handle from the classname
	 *
	 * @since	3.9.5
	 * @version	3.9.5
	 *
	 * @param	string 	$name
	 *
	 * @return 	string
	 */
	protected function make_handle( $name = '' ) {
		$handle = strtolower( str_replace( '\\', '-', __CLASS__ ) );
		$handle = $name ? $handle . '-' . $name : $handle;
		return sanitize_html_class( $handle );
	}

	/**
	 * Retrieve an asset if path structure is the same as class
	 *
	 * @since	3.9.5
	 * @version	3.9.5
	 *
	 * @param	string 	$type
	 * @param	string 	$name
	 * @param	string 	$location
	 *
	 * @return 	string
	 */
	protected function get_asset( string $type, string $name, $location = __CLASS__ ) {
		$directories 	= array_reverse( explode( '-', strtolower( str_replace( '\\', '-', __CLASS__ ) ) ) );
		array_pop( $directories );
		$directories	= implode( '/', array_reverse( $directories ) );

	 	return get_asset( $type, $name, $directories );
	}
}

/**
 * Gets asset instance.
 *
 * @param  string $file Relative file path to the asset file.
 *
 * @return \WeCodeArt\Core\Scripts\Asset
 */
function asset( $file ) {
    $asset = new Asset( wecodeart_config() );
    return $asset->set_file( $file );
}

/**
 * Gets asset file from public directory.
 *
 * @param  string $type 	Type of the asset file.
 * @param  string $name 	Name of the asset file.
 * @param  string $location Location subfolder of the asset file.
 *
 * @return string
 */
function get_asset( string $type, string $name, $location = '' ) {
	if( ! in_array( $type, [ 'css', 'js' ] ) ) {
		return _doing_it_wrong( __FUNCTION__, esc_html__( 'Asset must of type CSS/JS.', 'wecodeart' ), wecodeart( 'version' ) );
	}

	$file_path = wecodeart( 'is_dev_mode' ) ? 'unminified' : 'minified';
	$file_path .= '/' . $type;
	$file_path .= $location ? '/' . $location . '/' : '/';
	$file_path .= $name . '.' . $type;

    return asset( $file_path )->get_uri();
}