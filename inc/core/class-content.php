<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Core\Content
 * @copyright   Copyright (c) 2021, WeCodeArt Framework
 * @since 		3.5
 * @version		4.2.0
 */

namespace WeCodeArt\Core;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Markup;
use WeCodeArt\Singleton;
use WeCodeArt\Core\Loops;
use WeCodeArt\Core\Pagination;
use function WeCodeArt\Functions\get_prop;

/**
 * Handles Content Containers
 */
class Content {

	use Singleton;

	/**
	 * Send to Constructor
	 * @since 3.6.2
	 */
	public function init() {
		// WP.
		add_action( 'widgets_init', 				[ $this, 'register_sidebars' 	] );
		add_action( 'wp_body_open',					[ $this, 'skip_link' ], 0 );

		// WeCodeArt.
		add_action( 'wecodeart/hook/loop/before',	[ $this, 'content_markup_open' 	] );
		add_action( 'wecodeart/content/markup',		[ $this, 'render_modules' 		] );
		add_action( 'wecodeart/hook/loop/after',	[ $this, 'content_markup_close' ] );
		add_action( 'wecodeart/hook/main/after',    [ Pagination::get_instance(), 'archive' ], 10 );
	}
	
	/**
	 * Echo the opening tag markup for content
	 *
	 * @since 	unknown
	 * @version	4.2.0
	 *
	 * @return 	string 
	 */
	public function content_markup_open() {
		?>
		<div <?php echo Markup::generate_attr( 'content', [
			'id' 	=> 'primary',
			'class' => 'content__main col-12 col-lg'
		] ); ?>>
			<?php 
			
				/**
				 * @hooked - none
				 */
				do_action( 'wecodeart/hook/main/before' ); 

			?>
			<main <?php echo Markup::generate_attr( 'main', [
				'id' 	=> 'main',
				'class' => 'site-main'
			] ); ?>>
		<?php
	}

	/**
	 * Echo the ending tag markup for content
	 *
	 * @since 	unknown
	 * @version	3.5
	 *
	 * @return 	string
	 */
	public function content_markup_close() {	
		?>
			</main>
			<?php 
				
				/**
				 * @hooked WeCodeArt\Core\Pagination\numeric_posts_nav() - 10 
				 */
				do_action( 'wecodeart/hook/main/after' ); 
				
			?>
		</div>
		<?php
	}

	/**
	 * Generate Sidebar
	 *
	 * @since	3.7.7
	 * @version	4.2.0
	 *
	 * @return	void
	 */
	public static function render_sidebar( string $index ) {
		$index = strtolower( $index );

		if( ! is_active_sidebar( $index ) ) {
			return;
		}

		/**
		 * @see WP function `dynamic_sidebar`
		 * @see WeCodeArt\Markup::wrap()
		 */
		Markup::wrap( $index . '-sidebar-container', [ [
			'tag' 	=> 'div',
			'attrs' => [ 
				'class'	=> 'content__sidebar col-12 col-lg-4',
			]
		] ], function() use ( $index ) {
			do_action( "wecodeart/hook/sidebar/{$index}/before" );

			Markup::wrap( $index . '-sidebar', [ [
				'tag' 	=> 'aside',
				'attrs' => [ 
					'class'	=> 'sidebar sidebar--' . $index . ' h-100',
				]
			] ], 'dynamic_sidebar', [ $index ] );
			
			do_action( "wecodeart/hook/sidebar/{$index}/after" );
		} );  
	}

	/**
	 * Variable that holds the Header Modules and Options
	 *
	 * @since	1.5
	 * @version	3.9.5
	 *
	 * @return 	array
	 */
	public static function content_modules() {
		$sides = (array) apply_filters( 'wecodeart/filter/content/sidebars', [
			'primary'
		] );

		$modules = [
			'content' => [
				'label'    	=> esc_html__( 'Entry Content', 'wecodeart' ),
				'callback' 	=> [ Loops::get_instance(), 'default' ],
				'sidebar'	=> false
			]
		];

		if( ! empty( $sides ) ) {
			foreach( $sides as $side ) {
				$side = strtolower( $side );
				$modules[$side] = [
					'label'    	=> sprintf( esc_html__( '%s Sidebar', 'wecodeart' ), ucfirst( $side ) ),
					'callback' 	=> function() use ( $side ) {
						self::render_sidebar( $side );
					}
				];
			}  
		}

		// Filter the generated array.
		return apply_filters( 'wecodeart/filter/content/modules', (array) $modules );
	}

	/**
	 * Returns the inner markp with wrapper based on user options
	 *
	 * @uses	WeCodeArt\Markup::wrap();
	 * @uses	WeCodeArt\Markup::sortable();
	 * @since 	unknown
	 * @version	4.2.0
	 *
	 * @return 	HTML
	 */
	public static function render_modules() {
		$options = self::get_contextual_options();

		Markup::wrap( 'content-wrappers',  [
				[ 'tag' => 'div', 'attrs' => [ 'class' => 'content-area' ] ],
				[ 'tag' => 'div', 'attrs' => [ 'class' => get_prop( $options, 'container' ) ] ],
				[ 'tag' => 'div', 'attrs' => [ 'class' => 'row' ] ]
			],
			[ Markup::get_instance(), 'sortable' ],
			[ self::content_modules(), get_prop( $options, 'modules' ) ]
		); 
	} 

	/**
	 * Registers Content Sidebars
	 *
	 * @uses	self::content_modules();
	 * @since	1.0
	 * @version	3.9.5
	 *
	 * @return 	void
	 */
	public function register_sidebars() {
		// Register Sidebar for each active footer columns.
		$sidebars 	= wp_list_filter( self::content_modules(), [ 
			'sidebar' => false 
		], 'NOT' );

		// Register Sidebar for each active footer columns.
		wecodeart( 'register_sidebars', $sidebars );
	}

	/**
	 * Skip to Content Link
	 *
	 * @since	3.8.3
	 * @version	3.9.5
	 *
	 * @return 	void
	 */
	public function skip_link() {
		?><a class="skip-link screen-reader-text" href="#content"><?php 
			esc_html_e( 'Skip to content', 'wecodeart' ); 
		?></a> <?php
	}

	/**
	 * Get Contextual Modules Options
	 *
	 * @since 	3.5.0
	 * @version	4.2.0
	 *
	 * @return 	array 
	 */
	public static function get_contextual_options() {
		$default_container 	= get_theme_mod( 'content-layout-container' );
		$default_modules 	= get_theme_mod( 'content-layout-modules' );
		
		// Pages
		if( is_page() ) {
			return [
				'container' => $default_container,
				'modules' 	=> wecodeart_if( 'is_full_layout' ) ? [ 'content' ] : get_post_meta( get_the_ID(), '_wca_content_modules', true ),
			];
		}

		// Post Types Archives And Singular Context Mods.
		foreach( wecodeart( 'public_post_types' ) as $type ) { 
			if( is_singular( $type ) ) {				
				return [
					'container' => get_theme_mod( 'content-layout-container-' . $type . '-singular' ),
					'modules' 	=> get_post_meta( get_the_ID(), '_wca_content_modules', true ) ?: get_theme_mod( 'content-layout-modules-' . $type . '-singular' )
				];
			}

			if( is_post_type_archive( $type ) ) {
				return [
					'container' => get_theme_mod( 'content-layout-container-' . $type . '-archive' ),
					'modules' 	=> get_theme_mod( 'content-layout-modules-' . $type . '-archive' ),
				]; 
			}

			if( wecodeart_if( 'is_post_archive' ) ) {
				return [
					'container' => get_theme_mod( 'content-layout-container-post-archive' ),
					'modules' 	=> get_post_meta( get_option( 'page_for_posts' ), '_wca_content_modules', true ) ?: get_theme_mod( 'content-layout-modules-post-archive' ),
				]; 
			}
		} 

		// Everywhere/Defaults
		return [
			'container' => $default_container,
			'modules' 	=> $default_modules
		];
	}
}