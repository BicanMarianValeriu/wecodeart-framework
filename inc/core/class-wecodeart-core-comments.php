<?php namespace WeCodeArt\Core;

// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) exit();

// Use 
use WeCodeArt\Utilities\Form\Input;
use WeCodeArt\Utilities\Markup\SVG;
use WeCodeArt\Walkers\Comment as CommentWalker;
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Comments Class
 * @copyright   Copyright (c) 2019, WeCodeArt Framework
 * @since 		v3.5
 * @version		v3.6.3
 */
class Comments {
	use \WeCodeArt\Singleton;

	/**
	 * Send to Constructor
	 * @since 3.6.2
	 */
	public function init() {
		// WP Core
		add_filter( 'comment_form_fields',	[ $this, 'comment_form_fields' 		] );
		add_filter( 'comment_reply_link',	[ $this, 'replace_reply_link_class' ] );
		add_filter( 'comment_form_defaults',[ $this, 'comment_form_defaults' 	] );

		// WeCodeArt Core
		add_action( 'wecodeart_comments_list', 	[ $this, 'render_comments_list' ] );
		add_action( 'wecodeart_pings_list', 	[ $this, 'render_pings_list' 	] );
		add_action( 'wecodeart_comment_form', 	[ $this, 'render_comment_form' 	] );
		add_action( 'wecodeart_entry_footer', 	[ $this, 'get_comments_template' ], 50 );
	}
	
	/**
	 * Get the comments template
	 * @since 	unknown
	 * @version	3.5
	 * @return 	HTML 
	 */
	public function get_comments_template() {
		// Bail if post does not support Comments
		if ( ! post_type_supports( get_post_type(), 'comments' ) ) return;
		// Run on singular pages
		if ( is_singular() && ! in_array( get_post_type(), array( 'post', 'page' ) ) ) {
			comments_template( '', true );
		} elseif ( is_singular( 'post' ) ) {
			comments_template( '', true );
		} elseif ( is_singular( 'page' ) ) {
			comments_template( '', true );
		}
	}

	/**
	 * Render Comments List
	 * @since	unknows
	 * @version v3.6
	 * @return 	string HTML
	 */
	public function render_comments_list() {
		$comments_number = get_comments_number();
		if ( have_comments() ) {
			$icon = SVG::compile( 'icon--comments' ); 
			echo '<h3 id="comments-title" class="comments__headline">' . $icon . ' ';
			if ( 1 === $comments_number ) {
				printf( _x( 'One comment', 'comments title', 'wecodeart' ) );
			} else {
				printf(
					_nx(
						'%1$s comment',
						'%1$s comments',
						$comments_number,
						'comments title',
						'wecodeart'
					),
					number_format_i18n( $comments_number )
				);
			}
			
			if ( comments_open() ) echo '<a class="float-right" href="#respond" rel="nofollow">' . __( 'add one', 'wecodeart' ) . '</a>';
			
			echo '</h3>';
			
			$args = apply_filters( 'wecodeart/filter/comments/list/args', array(
				'type' 			=> 'comment',
				'avatar_size' 	=> 60,
				'walker'		=> new CommentWalker,
			) );
			echo '<ol id="comments-list" class="comments-list unstyled pl-0">';
			wp_list_comments( $args );
			echo '</ol>';
			// Comments Navigation
			$prev_link = get_previous_comments_link();
			$next_link = get_next_comments_link();
			if ( $prev_link || $next_link ) {
				echo '<nav class="comments-navigation"><div class="row">';
				echo '<h3 class="show-for-sr">' . __( 'Comments Navigation', 'wecodeart' ) . '</h3>';
				if ( $prev_link ) printf( '<div class="col col-sm-12 col-md">%s</div>', $prev_link );
				if ( $next_link ) printf( '<div class="col col-sm-12 col-md text-right">%s</div>', $next_link );			
				echo '</div></nav>';
			}
		// If Comments are open but there are no comments, print this message!
		} elseif ( comments_open() && 
			$comments_empty_text = sprintf( 
				__( 'No comments, so go and ... %s', 'wecodeart' ), 
				'<a class="float-right" href="#respond" rel="nofollow">add one</a>' 
				) ) {
			echo '<h3 id="comments-title" class="headline">' . SVG::compile( 'icon--comments' ) . ' ' . $comments_empty_text . '</h3>';
		}
	}

	/**
	 * Render Comment Form.
 	 * @since	unknown
	 * @version v3.6
	 */
	public function render_comment_form() {
		// Bail if comments are closed for this post type.
		if ( ( is_singular() && ! comments_open() ) ) return;
	
		$args = apply_filters( 'wecodeart/filter/comments/form/args', array(
			'format'			 	=> 'html5',
			'title_reply_before' 	=> '<h3 id="reply-title" class="headline"> ' . SVG::compile( 'icon--comment-dots' ) . ' ',
			'title_reply_after'  	=> '</h3>',
			'class_form' 			=> 'comment-form row no-gutters',
			'class_submit' 			=> 'btn btn-primary',
			'cancel_reply_before' 	=> '<span class="float-right"><small>',
			'cancel_reply_after' 	=> '</small></span>'
		) );

		comment_form( $args );
	}

	/**
	 * Render Pings List.
	 * @since	unknown
	 * @version v3.5
	 */
	public function render_pings_list() {
		global $wp_query;
		
		// If have pings.
		if ( ! empty( $wp_query->comments_by_type['pings'] ) ) {
			$args = apply_filters( 'wecodeart/filter/pings/args', array(
				'type' 		 => 'pings',
				'short_ping' => true,
				'walker'	 => new CommentWalker,
			) );
			echo '<ol id="pings-list" class="pings-list no-bullet">';
			wp_list_comments( $args );
			echo '</ol>';
		}
	}

	/**
	 * Move Comment Field Bellow Name/Email/Website.
	 * @since	unknown
	 * @version v3.5
	 * @param 	array $fields
	 * @return 	array $fields
	 */
	public function comment_form_fields( $fields ) {
		$comment_field = $fields['comment'];
		unset( $fields['comment'] );
		
		$fields['comment'] = $comment_field;
		return $fields;
	}

	/**
	 * Filter Comment Respond Args.
	 *
	 * @since	unknown
	 * @version	3.6.0
	 * @return 	array
	 */
	public function comment_form_defaults( array $defaults ) {
		// Fields escapes all the data for us. 	
		$commenter = wp_get_current_commenter();
		$req       = get_option( 'require_name_email' );
		
		$author_name	= '<div class="comment-form-author col-12 col-md-7">' .
			Input::compile( 'text', __( 'Name *', 'wecodeart' ), array( 
				'id' 	=> 'author',
				'class'	=> 'form-control',
				'name' 	=> 'author', 
				'required' 	=> ( $req ) ? 'required' : NULL, 
				'size' 		=> absint( 30 ), 
				'maxlength' => absint( 245 ),
				'value' 	=> $commenter['comment_author'] 
				) 
			)
		. '</div>';
		
		$author_email	= '<div class="comment-form-email col-12 col-md-7">' .
			Input::compile( 'email', __( 'Email *', 'wecodeart' ), array( 			
				'id' 	=> 'email',
				'class'	=> 'form-control',
				'name' 	=> 'email',
				'required' 	=> ( $req ) ? 'required' : NULL, 
				'size' 		=> absint( 30 ), 
				'maxlength' => absint( 100 ),
				'value' 	=> $commenter['comment_author_email'] 
				)
			) 
		. '</div>';
		
		$author_url		= '<div class="comment-form-url col-12 col-md-7">' .
			Input::compile( 'url', __( 'Website', 'wecodeart' ), array( 
				'id' 	=> 'url',
				'class'	=> 'form-control',
				'name' 	=> 'url',
				'size' 		 => absint( 30 ), 
				'maxlength'  => absint( 200 ),
				'value' 	 => $commenter['comment_author_url'] 
				)
			) 
		. '</div>';

		$author_comment		= '<div class="comment-form-comment col-12">' .
			Input::compile( 'textarea', __( 'Comment*', 'wecodeart' ), array( 
				'id' 	=> 'comment',
				'class'	=> 'form-control',
				'name' 	=> 'comment',
				'rows'	=> absint( 8 ), 
				'cols'  => absint( 45 ),
				'required' 		 => 'true', 
				'aria-required'  => 'true' 
				)
			) 
		. '</div>';
		
		$required_text = sprintf( ' ' . __( 'Required fiels are marked %s', 'wecodeart' ), '<span class="required">*</span>' );
		$notes_before 	= '<div class="comment-notes col-12 mb-3">' . __( 'Your email address will not be published.', 'wecodeart' ) . ( $req ? $required_text : '' ) . '</div>';
		$notes_after 	= '<div class="form-allowed-tags col-12 mb-3">' . sprintf( __( 'You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes: %s', 'wecodeart' ), ' <code>' . allowed_tags() . '</code>' ) . '</div>';

		$args = array(
			'title_reply' 	=> __( 'Speak Your Mind', 'wecodeart' ),
			'comment_field' => $author_comment,
			'comment_notes_before' 	=> $notes_before,
			'comment_notes_after' 	=> $notes_after,
			'submit_field'         	=> '<div class="form-submit col-12 mb-3">%1$s %2$s</div>',
			'class_submit'         	=> 'btn btn-primary',
			'fields' 		=> array(
				'author' => $author_name,
				'email'  => $author_email,
				'url'    => $author_url,
			)
		);

		// Merge $args with $defaults
		$args = wp_parse_args( $args, $defaults );

		// Return filterable array of $args, along with other optional variables
		return apply_filters( 'wecodeart/filter/comment_form_args', $args, $commenter, $req ); 
	}

	/**
	 * Replace Comment Reply Button class.
	 * @since	unknown
	 * @version v3.6
	 * @param 	string $class
	 * @return 	string $class
	 */
	public function replace_reply_link_class( $class ) {
		$class = str_replace( "class='comment-reply-link", "class='comment-reply-link btn btn-primary btn-sm", $class );
		return $class;
	}
}