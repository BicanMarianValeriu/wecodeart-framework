<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Core\Entry
 * @copyright   Copyright (c) 2019, WeCodeArt Framework
 * @since 		3.5
 * @version		3.7.1
 */

namespace WeCodeArt\Core;

if ( ! defined( 'ABSPATH' ) ) exit();

use WeCodeArt\Core\Loops;
use WeCodeArt\Core\Pagination;
use WeCodeArt\Utilities\Markup;
use WeCodeArt\Utilities\Markup\SVG;

/**
 * Handles WP CPT outputs
 */
class Entry {

	use \WeCodeArt\Singleton;

	/**
	 * Send to Constructor
	 * @since 3.6.2
	 */
	public function init() {
		add_action( 'wecodeart_entry_open',		[ $this, 'markup_open' 		], 5 ); 
		add_action( 'wecodeart_entry_header', 	[ $this, 'render_header' 	] ); 
		add_action( 'wecodeart_entry_content', 	[ $this, 'render_content' 	] );
		add_action( 'wecodeart_entry_footer',	[ $this, 'render_footer' 	] ); 
		add_action( 'wecodeart_entry_close', 	[ $this, 'markup_close' 	], 95 );
		
		add_action( 'wecodeart/hook/entry/header',	[ $this, 'render_title' 		], 10 );
		add_action( 'wecodeart/hook/entry/footer', 	[ $this, 'render_read_more' 	], 10 );
		add_action( 'wecodeart/hook/entry/footer', 	[ $this, 'render_author_box' 	], 20 );
        add_action( 'wecodeart/hook/entry/footer',  [ Pagination::get_instance(), 'entry_content' 	], 10 );
        add_action( 'wecodeart/hook/entry/footer',  [ Pagination::get_instance(), 'entry_prev_next' ], 40 );

		add_action( 'wecodeart/hook/loop/else', [ $this, 'render_noposts' ], 10 );

		add_filter( 'wecodeart/filter/entry/title/disabled', [ $this, 'filter_home_title' ], 10, 2 );

		add_action( 'the_password_form', [ $this, 'render_paswordprotected' ] );

		/**
		 * Child classes
		 */
		Entry\Meta::get_instance();
		Entry\Media::get_instance(); 
	}
	
	/**
	 * Entry Markup Open
	 *
	 * @since	1.0
	 * @version	3.6.3
	 *
	 * @return 	string
	 */
	public function markup_open() { 
		$attributes = Markup::generate_attr( 'entry', [ 
			'id' 	=> 'entry-' . get_the_ID(), 
			'class'	=> implode( ' ', get_post_class() ) 
		] );
		?>
		<article <?php echo $attributes; ?>>
		<?php
	}

	/**
	 * Entry Markup Close
	 *
	 * @since	1.0
	 * @version 3.5
	 *
	 * @return 	string
	 */
	public function markup_close() {
		?></article><?php
	} 

	/**
	 * Render Header
	 *
	 * @since	3.6.4
	 * @uses	Markup::wrap()
	 *
	 * @return 	string
	 */
	public function render_header() { 
		Markup::wrap( 'entry-header', [ [
			'tag' 	=> 'header',
			'attrs' => [ 
				'class' => 'entry-header'
			]
		] ], 'do_action', [ 'wecodeart/hook/entry/header' ] );  
	} 

	/**
	 * Render Footer
	 *
	 * @since	3.6.4
	 * @uses	WeCodeArt\Utilities\Markup::wrap()
	 *
	 * @return 	void
	 */
	public function render_footer() {
		/**
		 * @see 	WeCodeArt\Utilities\Markup::wrap()
		 * @hook	'wecodeart/hook/entry/footer' 	
		 * @hooked 	{
		 * - WeCodeArt\Core\Entry->render_read_more()			- 10 Entry Read More ( Archive only )
		 * - WeCodeArt\Core\Entry->render_author_box()			- 20 Author Info
		 * - WeCodeArt\Core\Comments->get_comments_template()	- 30 Entry Comments
		 * - WeCodeArt\Core\Pagination->post_content_nav()		- 10 Entry Nav ( Single only ) 
		 * - WeCodeArt\Core\Pagination->prev_next_post_nav()	- 40 Entry Prev/Next Nav
		 * }
		 */
		Markup::wrap( 'entry-footer', [ [
			'tag' 	=> 'footer',
			'attrs' => [ 
				'class' => 'entry-footer' 
			]
		] ], 'do_action', [ 'wecodeart/hook/entry/footer' ] );
	} 

	/**
	 * Retrieve entry title with link
	 *
	 * @since 	3.6.4
	 * @version	3.7.1
	 *
	 * @param	bool	$link
	 * @param 	bool 	$echo 
	 *
	 * @return 	string
	 */
	public function the_title( $link = true, $echo = true ) {
		$disabled = apply_filters( 'wecodeart/filter/entry/title/disabled', false, get_the_ID() );
		$title = get_the_title();

		if ( 0 === mb_strlen( $title ) || $disabled === true ) return;
		
		if ( $link && ! is_singular() ) {
			$title = sprintf( '<a href="%s" rel="bookmark">%s</a>', esc_url( get_permalink() ), esc_html( $title ) );
		}
		
		if( $echo !== true ) return $title;
		else echo $title;
	}

	/**
	 * Echo the Entry Title Markup
	 *
	 * @since 	1.0
	 * @uses	Markup::wrap()
	 * @version 3.6.4
	 *
	 * @return 	void
	 */
	public function render_title() {
		Markup::wrap( 'entry-title', [ [
			'tag' 	=> is_singular() ? 'h1' : 'h2',
			'attrs' => [ 
				'class' => 'entry-title' 
			]
		] ], [ $this, 'the_title' ] );  
	}  

	/**
	 * Echo the Entry Content/Excerpt Markup
	 *
	 * @since	1.0
	 * @uses	Markup::wrap()
	 * @version	3.6.4
	 *
	 * @return	void
	 */
	public function render_content() {  
		Markup::wrap( 'entry-content', [ [
			'tag' 	=> 'div',
			'attrs' => [ 
				'class' => is_singular() ? 'entry-content' : 'entry-excerpt' 
			]
		] ], is_singular() ? 'the_content' : 'the_excerpt' ); 
	} 

	/**
	 * Echo the post read more button.
	 *
	 * @since 	unknown
	 * @version 3.6.4
	 *
	 * @return 	void
	 */
	public function render_read_more() {
		// Do dont return on Singular
		if ( ! is_singular() ) echo Entry\Meta::read_more();
	}

	/**
	 * Return the content for No Posts
	 *
	 * @since	2.2
	 * @version	3.7.1
	 *
	 * @return	string
	 */
	public function render_noposts() { 
		?>
		<p><?php 
			echo esc_html( apply_filters( 
				'wecodeart/filter/entry/noposts_message', 
				__( 'There are no posts matching your criteria.', 'wecodeart' ) 
			) );
		 ?></p>
		<?php
	}

	/**
	 * Return the content for No Posts
	 *
	 * @since	3.5
	 * @version	3.5
	 *
	 * @return 	void
	 */
	public function render_paswordprotected() {
		get_template_part( 'views/entry/content', 'protected' );
	}

	/**
	 * Add Author Box on single Post
	 *
	 * @since	3.5
	 * @version	3.5
	 *
	 * @return	void
	 */
	public function render_author_box() {
		// Filter to give posibility for disable
		if( apply_filters( 'wecodeart/filter/author-box/single', '__return_true' ) ) { 
			if( is_single() ) get_template_part( 'views/author/author' );
		}
	}

	/**
	 * Remove title on homepage
	 *
	 * @since	3.7.1
	 * @version	3.7.1
	 *
	 * @param 	boolean	$disabled
	 * @param	integer	$post_id
	 *
	 * @return	boolean
	 */
	public function filter_home_title( $disabled, $post_id ) {
		$custom_page = get_option( 'page_on_front' );
		if( intval( $custom_page ) === 0 ) return $disabled;
		if( intval( $custom_page ) === intval( $post_id ) ) $disabled = true;
		return $disabled;
	}
}