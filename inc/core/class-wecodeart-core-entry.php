<?php namespace WeCodeArt\Core;
// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) exit();
// Use
use WeCodeArt\Core\Loops as Loops;
use WeCodeArt\Utilities\Markup as Markup;
use WeCodeArt\Utilities\Markup\SVG;

/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Entry Class
 * @copyright   Copyright (c) 2019, WeCodeArt Framework
 * @since 		v3.5
 * @version		v3.6
 */

class Entry {
	/**
	 * Instance
	 *
	 * @var $_instance
	 */
	private static $_instance = NULL;

	/**
	 * Initiator
	 *
	 * @since 	v3.5
	 * @return 	object
	 */
	public static function get_instance() {
		if( self::$_instance == NULL ) self::$_instance = new self;
		return self::$_instance;
	}

	/**
	 * Class Constructor.
	 */
	public function __construct() {
		add_action( 'wecodeart_entry_open',		[ $this, 'markup_open' ], 			5	);
		add_action( 'wecodeart_entry_header', 	[ $this, 'header_markup_open' ],	10 	);
		add_action( 'wecodeart_entry_header', 	[ $this, 'render_title_markup' ],	15 	);
		add_action( 'wecodeart_entry_header', 	[ $this, 'header_markup_close' ],	90 	);
		add_action( 'wecodeart_entry_footer', 	[ $this, 'footer_markup_open' ],	5 	);
		add_action( 'wecodeart_entry_footer', 	[ $this, 'render_post_footer' ] 		);
		add_action( 'wecodeart_entry_footer',	[ $this, 'render_author_box' ], 	20 	);
		add_action( 'wecodeart_entry_footer', 	[ $this, 'footer_markup_close' ], 	95 	);
		add_action( 'wecodeart_entry_content', 	[ $this, 'render_content_markup' ]		);
		add_action( 'wecodeart_entry_close', 	[ $this, 'markup_close' ],			95 	);

		add_action( 'wecodeart/hook/loop/else', [ $this, 'render_noposts' ], 		10 	);

		add_action( 'the_password_form', 		[ $this, 'render_paswordprotected' ] 	);

		// Init Meta Class
		Entry\Meta::get_instance();
	}
	
	/**
	 * Entry Markup Open
	 * @since 	v1
	 * @version v3.6
	 * @return 	string HTML
	 */
	public function markup_open() {
		$classes = [ 'd-flex', 'flex-column', 'mb-3' ];
		$attributes = Markup::generate_attr(
			'entry',
			[
				'id' 	=> 'post-' . get_the_ID(),
				'class'	=> implode( ' ', get_post_class( $classes ) )
			]
		);
		?>
		<article <?php echo $attributes; ?>>
		<?php
	}

	/**
	 * Entry Markup Close
	 * @since 	v1
	 * @version v3.5
	 * @return 	string HTML
	 */
	public function markup_close() {
		?></article><?php
	}

	/**
	 * Entry Header Markup Open
	 * @since 	v1
	 * @version v3.5
	 * @return 	string HTML
	 */
	public function header_markup_open() {
		$attributes = Markup::generate_attr( 'entry-header', [ 'class'	=> 'entry-header' ] );
		?>
		<header <?php echo $attributes; ?>>
		<?php
	}

	/**
	 * Entry Header Markup Close
	 * @since 	v1
	 * @version v3.5
	 * @return 	string HTML
	 */
	public function header_markup_close() {
		?></header><?php
	}

	/**
	 * Entry Footer Markup Open
	 * @since 	v1
	 * @version v3.5
	 * @return 	string HTML
	 */
	public function footer_markup_open() {
		$attributes = Markup::generate_attr( 'entry-header', [ 'class'	=> 'entry-footer' ] );
		?>
		<footer <?php echo $attributes; ?>>
		<?php
	}

	/**
	 * Entry Footer Markup Close
	 * @since 	v1
	 * @version v3.5
	 * @return 	string HTML
	 */
	public function footer_markup_close() {
		?></footer><?php
	}

	/**
	 * Echo the Entry Title Markup
	 * @since 	v1
	 * @version v3.5
	 */
	public function render_title_markup() {
		$title = get_the_title();
		if ( 0 === mb_strlen( $title ) ) return;
		// Link it in other places than Single Posts
		if ( ! is_singular() ) {
			$title = sprintf( '<a href="%s" rel="bookmark">%s</a>', esc_url( get_permalink() ), esc_html( $title ) );
		}
		// Wrap in H1 on singular pages, else H2
		$wrap = is_singular() ? 'h1' : 'h2';
		// Build the output
		$output = sprintf( '<%s class="entry-title">%s</%s>', $wrap, $title, $wrap );
		
		echo $output;
	} 

	/**
	 * Echo the Entry IMG Markup
	 */
	public function post_image() {
		global $post_ID;
		if ( post_password_required() || is_attachment() || ! has_post_thumbnail() ) {
			return;
		}
		if ( is_singular() ) :	
			the_post_thumbnail( 'medium', array( 'class' => 'alignleft' ) ); 
		else :
			$img = get_the_post_thumbnail( $post_ID, 'thumbnail', array( 'class' => 'thumbnail alignleft' ));
			printf( '<a href="%s" aria-hidden="true">%s</a>', esc_url( get_permalink() ), $img );
		endif;
	}

	/**
	 * Echo the Entry Content/Excerpt Markup
	 * @since	v1.0
	 * @version v3.5
	 */
	public function render_content_markup() {
		$thecontent = get_the_content();
		// Display Full Content on Single Page/Post
		if ( is_singular() && ! empty( $thecontent ) ) {
			echo '<div class="entry-content">';
			$this->post_image();
			the_content();
			echo '</div>';
		} else {
			echo '<div class="entry-content excerpt">';
			$this->post_image();
			the_excerpt();
			echo '</div>';
		}
	} 

	/**
	 * Echo the post read more button.
	 * By default, only does it on archives.
	 */
	public function render_post_footer() {
		// Do dont return on Singular
		if ( ! is_singular() ) echo Entry\Meta::read_more();
	}

	/**
	 * Return the content for No Posts
	 * @since	v2.2
	 * @version v3.1.2
	 */
	public function render_noposts() {
		get_template_part( 'views/entry/content', 'none' );
	}

	/**
	 * Return the content for No Posts
	 * @since	v3.5
	 * @version v3.5
	 */
	public function render_paswordprotected() {
		get_template_part( 'views/entry/content', 'protected' );
	}

	/**
	 * Add Author Box on single Post
	 * @since	v3.5
	 * @version v3.5
	 */
	public function render_author_box() {
		// Filter to give posibility for disable
		if( apply_filters( 'wecodeart/filter/author-box/single', '__return_true' ) ) { 
			if( is_single() ) get_template_part( 'views/author/author' );
		}
	}
}