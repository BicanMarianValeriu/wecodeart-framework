<?php namespace WeCodeArt\Core;
// Exit if accessed directly
if ( ! defined( 'ABSPATH' ) ) exit();
// Use
use WeCodeArt\Core\Loops as Loops;
use WeCodeArt\Utilities\Markup as Markup;
use WeCodeArt\Utilities\Markup\SVG;

/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Entry Class
 * @copyright   Copyright (c) 2019, WeCodeArt Framework
 * @since 		v3.5
 * @version		v3.5
 */

class Entry {
	/**
	 * Instance
	 *
	 * @var $_instance
	 */
	private static $_instance = NULL;

	/**
	 * Initiator
	 *
	 * @since 	v3.5
	 * @return 	object
	 */
	public static function get_instance() {
		if( self::$_instance == NULL ) self::$_instance = new self;
		return self::$_instance;
	}

	/**
	 * Class Constructor.
	 */
	public function __construct() {
		add_action( 'wecodeart_entry_open',		[ $this, 'markup_open' ], 			5	);
		add_action( 'wecodeart_entry_header', 	[ $this, 'header_markup_open' ],	10 	);
		add_action( 'wecodeart_entry_header', 	[ $this, 'render_title_markup' ],	15 	);
		add_action( 'wecodeart_entry_header', 	[ $this, 'render_post_meta' ],		20 	);
		add_action( 'wecodeart_entry_header', 	[ $this, 'header_markup_close' ],	90 	);
		add_action( 'wecodeart_entry_footer', 	[ $this, 'footer_markup_open' ],	5 	);
		add_action( 'wecodeart_entry_footer', 	[ $this, 'render_post_footer' ] 		);
		add_action( 'wecodeart_entry_footer',	[ $this, 'render_author_box' ], 	20 	);
		add_action( 'wecodeart_entry_footer', 	[ $this, 'footer_markup_close' ], 	95 	);
		add_action( 'wecodeart_entry_content', 	[ $this, 'render_content_markup' ]		);
		add_action( 'wecodeart_entry_close', 	[ $this, 'markup_close' ],			95 	);

		add_action( 'wecodeart/hook/loop/else', [ $this, 'render_noposts' ], 		10 	);

		add_action( 'the_password_form', 		[ $this, 'render_paswordprotected' ] 	);
	}
	
	/**
	 * Entry Markup Open
	 * @since 	v1
	 * @version v3.5
	 * @return 	string HTML
	 */
	public function markup_open() {
		$classes = [ 'flex-container', 'flex-dir-column' ];
		$attributes = Markup::generate_attr(
			'entry',
			[
				'id' 	=> 'post-' . get_the_ID(),
				'class'	=> implode( ' ', get_post_class( $classes ) )
			]
		);
		?>
		<article <?php echo $attributes; ?>>
		<?php
	}

	/**
	 * Entry Markup Close
	 * @since 	v1
	 * @version v3.5
	 * @return 	string HTML
	 */
	public function markup_close() {
		?></article><?php
	}

	/**
	 * Entry Header Markup Open
	 * @since 	v1
	 * @version v3.5
	 * @return 	string HTML
	 */
	public function header_markup_open() {
		$attributes = Markup::generate_attr(
			'entry-header',
			[
				'class'	=> 'entry-header'
			]
		);
		?>
		<header <?php echo $attributes; ?>>
		<?php
	}

	/**
	 * Entry Header Markup Close
	 * @since 	v1
	 * @version v3.5
	 * @return 	string HTML
	 */
	public function header_markup_close() {
		?></header><?php
	}

	/**
	 * Entry Footer Markup Open
	 * @since 	v1
	 * @version v3.5
	 * @return 	string HTML
	 */
	public function footer_markup_open() {
		$attributes = Markup::generate_attr(
			'entry-header',
			[
				'class'	=> 'entry-footer'
			]
		);
		?>
		<footer <?php echo $attributes; ?>>
		<?php
	}

	/**
	 * Entry Footer Markup Close
	 * @since 	v1
	 * @version v3.5
	 * @return 	string HTML
	 */
	public function footer_markup_close() {
		?></footer><?php
	}

	/**
	 * Echo the Entry Title Markup
	 * @since 	v1
	 * @version v3.5
	 */
	public function render_title_markup() {
		$title = get_the_title();
		if ( 0 === mb_strlen( $title ) ) return;
		// Link it in other places than Single Posts
		if ( ! is_singular() ) {
			$title = sprintf( '<a href="%s" rel="bookmark">%s</a>', esc_url( get_permalink() ), esc_html( $title ) );
		}
		// Wrap in H1 on singular pages, else H2
		$wrap = is_singular() ? 'h1' : 'h2';
		// Build the output
		$output = sprintf( '<%s class="entry-title">%s</%s>', $wrap, $title, $wrap );
		
		echo $output;
	} 

	/**
	 * Echo the Entry IMG Markup
	 */
	public function post_image() {
		global $post_ID;
		if ( post_password_required() || is_attachment() || ! has_post_thumbnail() ) {
			return;
		}
		if ( is_singular() ) :	
			the_post_thumbnail( 'medium', array( 'class' => 'alignleft' ) ); 
		else :
			$img = get_the_post_thumbnail( $post_ID, 'thumbnail', array( 'class' => 'thumbnail alignleft' ));
			printf( '<a href="%s" aria-hidden="true">%s</a>', esc_url( get_permalink() ), $img );
		endif;
	}

	/**
	 * Echo the Entry Content/Excerpt Markup
	 * @since	v1.0
	 * @version v3.5
	 */
	public function render_content_markup() {
		$thecontent = get_the_content();
		// Display Full Content on Single Page/Post
		if ( is_singular() && ! empty( $thecontent ) ) {
			echo '<div class="entry-content">';
			$this->post_image();
			the_content();
			echo '</div>';
		} else {
			echo '<div class="entry-content excerpt">';
			$this->post_image();
			the_excerpt();
			echo '</div>';
		}
	} 

	/**
	 * Entry Meta Author Template
	 * @since	v1.0
	 * @version v3.3
	 */
	public function wecodeart_post_meta_author( $args = array() ) {
		// Set the defaults
		$defaults = array(
			'before'	=> SVG::compile( 'icon--user', [ 'title' => 'Some Title' ] ),
			'after'  	=> '&nbsp;',
			'sr_text'  	=>  __( 'Posted by ', 'wecodeart' ),
		);

		$args = wp_parse_args( $args, apply_filters( 'wecodeart/filter/entry/meta/author/defaults', $defaults ) );

		// Get what we need
		$author	= get_the_author();
		$url    = get_author_posts_url( get_the_author_meta( 'ID' ) );

		// The HTML
		return apply_filters( 'wecodeart/filter/entry/meta/author/html', sprintf(
			/* translators: %s: post author */
			__( '<span class="entry-author">%1$s %2$s %3$s %4$s %5$s</span>', 'wecodeart' ),
			$args[ 'before' ],
			'<span class="show-for-sr">' . esc_html( $args['sr_text'] ) . '</span>',
			sprintf( '<a href="%s" class="entry-author-link" rel="author">', esc_url( $url ) ),
			sprintf( '<span class="entry-author-name">%s</span></a>', esc_html( $author ) ),
			$args[ 'after' ] ) 
		);
	}

	/**
	 * Entry Meta Date Template
	 * @since	v1.0
	 * @version v3.3
	 */
	public function wecodeart_post_meta_date( $args = array() ) {
		// Set the Defaults
		$defaults = array(
			'before'	=> SVG::compile( 'icon--clock' ),
			'after'  	=> '&nbsp;',
			'sr_text'  	=> __( 'Posted on ', 'wecodeart' ),
		);

		$args = wp_parse_args( $args, apply_filters( 'wecodeart/filter/entry/meta/date/defaults', $defaults ) );

		$output = '<time class="published" datetime="%1$s">%2$s</time>';
		if ( get_the_time( 'U' ) !== get_the_modified_time( 'U' ) ) {
			$output .= '<time class="updated hide" datetime="%3$s">%4$s</time>';
		}

		$output = sprintf( $output,
			get_the_date( DATE_W3C ),
			get_the_date(),
			get_the_modified_date( DATE_W3C ),
			get_the_modified_date()
		);

		// Wrap the time string in a link, add scren-reader-text and FontIcon.
		return apply_filters( 'wecodeart/filter/entry/meta/date/html', sprintf(
			/* translators: %s: post date */
			__( '<span class="entry-date">%1$s %2$s %3$s %4$s</span>', 'wecodeart' ),
			$args[ 'before' ],
			'<span class="show-for-sr">' . esc_html( $args['sr_text'] ) . '</span>',
			'<a href="' . esc_url( get_permalink() ) . '" rel="bookmark">' . $output . '</a>',
			$args[ 'after' ] ) 
		);
	} 

	/**
	 * Entry Meta Categories Template
	 * @since	v1.0
	 * @version v3.5
	 */
	public function wecodeart_post_meta_cats( $args = array() ) {
		// Set the defaults
		$defaults = array(
			'before' 	=> SVG::compile( 'icon--folder' ),
			'after'  	=> '&nbsp;',
			'sr_text'	=> __( 'Posted in ', 'wecodeart' ),
			'sep'    	=> ', ',
		);

		$args = wp_parse_args( $args, apply_filters( 'wecodeart/filter/entry/meta/cats/defaults', $defaults ) );

		// Get what we need
		$cats = get_the_category_list( $args['sep'] );

		// Do nothing if no cats
		if ( ! $cats ) return;

		// The HTML
		return apply_filters( 'wecodeart/filter/entry/meta/cats/html', sprintf( 
			/* translators: %s: post cats */
			__( '<span class="entry-cats">%1$s %2$s %3$s %4$s</span>', 'wecodeart' ), 
			$args[ 'before' ], 
			'<span class="show-for-sr">' . esc_html( $args['sr_text'] ) . '</span>',
			$cats, 
			$args[ 'after' ] 
			) 
		);
	}

	/**
	 * Entry Meta Tags Template
	 * @since	v1.0
	 * @version v3.3
	 */
	public function wecodeart_post_meta_tags( $args = array() ) {
		// Set the Defaults
		$defaults = array(
			'before'  	=> SVG::compile( 'icon--tag' ),
			'after'  	=> '&nbsp;',
			'sr_text'	=> __( 'Tagged with ', 'wecodeart' ),
			'sep'  		=> ',',
		);

		$args = wp_parse_args( $args, apply_filters( 'wecodeart/filter/entry/meta/tags/defaults', $defaults ) );

		// Get what we need
		$tags = get_the_tag_list( '', trim( $args['sep'] ) . ' ', '' );

		// Do nothing if no tags
		if ( ! $tags ) return;

		// The HTML
		return apply_filters( 'wecodeart/filter/entry/meta/tags/html', sprintf( 
			/* translators: %s: post tags */
			__( '<span class="entry-tags">%1$s %2$s %3$s %4$s</span>', 'wecodeart' ),
			$args['before'],
			'<span class="show-for-sr">' . esc_html( $args['sr_text'] ) . '</span>',
			$tags,
			$args['after']
			) 
		);
	} 

	/**
	 * Entry Meta Comments Template
	 * @since	v1.0
	 * @version v3.3
	 */
	public function wecodeart_post_meta_comments( $args = array() ) {
		// Only if post type supports
		if ( ! post_type_supports( get_post_type(), 'comments' ) ) return;

		// Set the Defaults
		$defaults = array(
			'before'       	=> SVG::compile( 'icon--comments' ),
			'after'      	=> '&nbsp;',
			'hide_if_off' 	=> true,
			'more'        	=> __( '% Comments', 'wecodeart' ),
			'one'         	=> __( '1 Comment', 'wecodeart' ),
			'zero'        	=> __( 'Leave a Comment', 'wecodeart' ),
		);

		$args = wp_parse_args( $args, apply_filters( 'wecodeart/filter/entry/meta/comments/defaults', $defaults ) );

		// Show only where comments are enabled or have comments (even if disabled)
		if ( ( ! comments_open() && 0 === get_comments_number() ) && true === $args['hide_if_off'] ) { 
			return;
		} elseif ( comments_open() && ! have_comments() || ! comments_open() && 0 < get_comments_number() ) {
			// Get what we need
			ob_start();
			comments_number( $args['zero'], $args['one'], $args['more'] );
			$comments = ob_get_clean();	
			$comments = '<a href="' . esc_url( get_comments_link() ) . '" rel="nofollow">' . esc_html( $comments ) . '</a>';

			// The HTML
			return apply_filters( 'wecodeart/filter/entry/meta/comments/html', sprintf( 
				/* translators: %s: post comments */
				__( '<span class="entry-comments">%1$s %2$s %3$s</span>', 'wecodeart' ),
				$args['before'],
				$comments,
				$args['after']
				) 
			);
		}
	}

	/**
	 * Entry Meta Edit Template
	 * @since	v1.0
	 * @version	v3.5
	 * @return 	HTML
	 */
	public function wecodeart_post_meta_edit( $args = array() ) {
		if( ! is_user_logged_in() ) return;
		// Set the defaults
		$defaults = array(
			'before' 	=> '&nbsp;',
			'after'  	=> '',
			'text'   	=> '&#9998;',
			'class'  	=> 'entry-edit-link badge primary',
		);
		$args = wp_parse_args( $args, apply_filters( 'wecodeart/filter/entry/meta/edit/defaults', $defaults ) );

		// Get what we need
		ob_start();
		edit_post_link( esc_html( $args['text'] ), esc_html( $args['before'] ), esc_html( $args['after'] ), '', esc_attr( $args['class'] )  );
		$output = ob_get_clean();

		// The HTML	
		return apply_filters( 
			'wecodeart/filter/entry/meta/edit/html', 
			sprintf( __( '<span class="entry-edit float-right">%1s</span>', 'wecodeart' ), $output )
		);
	}

	/**
	 * Entry Meta Read More Template
	 * @since	v1.0
	 * @version	v3.5
	 * @return 	HTML
	 */
	public function wecodeart_post_meta_more( $args = array() ) {
		// Set the Defaults
		$defaults = array(
			'before'	=> '',
			'after' 	=> '&#xbb;',
			'text' 		=> __( 'Read More', 'wecodeart' ),
			'class' 	=> 'entry-more button float-right',
		);

		$args = wp_parse_args( $args, apply_filters( 'wecodeart/filter/entry/more/defaults', $defaults ) );

		// The HTML
		return apply_filters( 'wecodeart/filter/entry/more/html', sprintf( 
			'<a href="%1$s" class="%2$s">%3$s %4$s %5$s</a>', 
			get_permalink(), 
			esc_attr( $args['class'] ), 
			$args['before'], 
			esc_html( $args['text'] ), 
			$args['after'] ) 
		);
	}

	/**
	 * Echo the post info (byline) under the post title.
	 * By default, only does post info on posts.
	 */
	public function render_post_meta() {
		// Do dont return on Pages
		if( ! post_type_supports( get_post_type(), 'wecodeart-post-info' ) ) {
			return;
		}
		// The HTML
		$output  = '<p class="entry-meta subheader">';
		$output .= $this->wecodeart_post_meta_author();
		$output .= $this->wecodeart_post_meta_date();
		$output .= $this->wecodeart_post_meta_cats();
		if( apply_filters( 'wecodeart_filter_show_meta_tags', false ) ) 
			$output .= $this->wecodeart_post_meta_tags();
		$output .= $this->wecodeart_post_meta_comments();
		$output .= $this->wecodeart_post_meta_edit();
		$output .= '</p>';
		echo $output;
	}

	/**
	 * Echo the post read more button.
	 * By default, only does it on archives.
	 */
	public function render_post_footer() {
		// Do dont return on Singular
		if ( ! is_singular() ) echo $this->wecodeart_post_meta_more();
	}

	/**
	 * Return the content for No Posts
	 * @since	v2.2
	 * @version v3.1.2
	 */
	public function render_noposts() {
		get_template_part( 'views/entry/content', 'none' );
	}

	/**
	 * Return the content for No Posts
	 * @since	v3.5
	 * @version v3.5
	 */
	public function render_paswordprotected() {
		get_template_part( 'views/entry/content', 'protected' );
	}

	/**
	 * Add Author Box on single Post
	 * @since	v3.5
	 * @version v3.5
	 */
	public function render_author_box() {
		// Filter to give posibility for disable
		if( apply_filters( 'wecodeart/filter/author-box/single', '__return_true' ) ) { 
			if( is_single() ) get_template_part( 'views/author/author' );
		}
	}
}