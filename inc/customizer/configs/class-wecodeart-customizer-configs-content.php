<?php namespace WeCodeArt\Customizer\Configs;
// No direct access, please.
if ( ! defined( 'ABSPATH' ) ) exit;
// Use
use WeCodeArt\Customizer\Config as Config;
use WeCodeArt\Customizer\Formatting as Formatting;
use WeCodeArt\Support\WooCommerce\Callbacks as WooCB;

/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	WP-Customizer Config
 * @copyright   Copyright (c) 2019, WeCodeArt Framework
 * @since 		v3.5
 * @version		v3.6
 */

/**
 * Customizer Config initial setup
 */
class Content extends Config {
	/**
	 * Register Site Layout Customizer Configurations.
	 * @param 	Array                $configurations 
	 * @param 	WP_Customize_Manager $wp_customize instance of WP_Customize_Manager.
	 * @since 	3.6
	 * @return 	Array 
	 */
	public function register( $configurations, $wp_customize ) {
		// A handy class for formatting theme mods.
		$formatting = Formatting::get_instance();
		$callbacks	= WooCB::get_instance();
		/**
		 * Get post types for Config Options
		 * @uses apply_filters for changing this query args
		 */
		$get_post_types = get_post_types( 
			apply_filters( 'wecodeart/customizer/config/get_post_types_args', [ 
				'public' => true, 
				'publicly_queryable' => true 
			] )
		);

		// Content Modules Choices
		$c_modules = array();
		$inner_modules = \WeCodeArt\Core\Content::content_modules();
		foreach( $inner_modules as $key => $val ) $c_modules[$key] = $val['label']; 

		$_configs = array( 
			array(
				'name'			=> 'content-layout-container',
				'type' 			=> 'control',
				'control'  		=> 'select',
				'section'		=> 'content-layout',
				'title' 		=> __( 'Container Type', 'wecodeart' ),
				'description' 	=> __( 'Choose the type of the container class.', 'wecodeart' ),
				'choices'  		=> array(
					'container'			=> __( 'Container', 'wecodeart' ),
					'container-fluid' 	=> __( 'Container Fluid', 'wecodeart' ),
				), 
				'priority' 		=> 5, 
				'sanitize_callback'    => [ $formatting, 'sanitize_choices' ],
				'transport' 		   => 'postMessage'
			),
			array(
				'name'			=> 'content-layout-modules',
				'type'        	=> 'control',
				'control'  		=> 'wecodeart-sortable',
				'section'		=> 'content-layout',
				'title'			=> __( 'Content Modules: Default', 'wecodeart' ),
				'description'	=> __( 'Enable and reorder Site Inner modules.', 'wecodeart' ),
				'priority'		=> 10,
				'default'		=> [ 'content', 'primary' ],
				'choices'		=> $c_modules, 
				'transport'		=> 'postMessage',
				'partial'		=> [
					'selector'        		=> '.content-area',
					'render_callback' 		=> [ 'WeCodeArt\Core\Content', 'render_modules' ],
					'container_inclusive' 	=> true
				]
			),
			array(
				'name'			=> 'content-layout-container-blog',
				'type' 			=> 'control',
				'control'  		=> 'select',
				'section'		=> 'content-layout',
				'title'			=> __( 'Container Type: Blog Page', 'wecodeart' ) ,
				'description' 	=> __( 'Choose the type of the container class. Affects only current page.', 'wecodeart' ),
				'choices'  		=> array(
					'container'			=> __( 'Container', 'wecodeart' ),
					'container-fluid' 	=> __( 'Container Fluid', 'wecodeart' ),
				),  
				'priority' 		=> 10, 
				'default'		=> 'container',
				'sanitize_callback'    => [ $formatting, 'sanitize_choices' ],
				'active_callback'	   => 'is_home',
				'transport' 		   => 'postMessage'
			),
			array(
				'name'			=> 'content-layout-modules-blog',
				'type'        	=> 'control',
				'control'  		=> 'wecodeart-sortable',
				'section'		=> 'content-layout',
				'title'			=> __( 'Content Modules: Blog Page', 'wecodeart' ),
				'description'	=> __( 'Enable and reorder Site Inner modules. This will affect only the page you are currently viewing.', 'wecodeart' ),
				'priority'		=> 15,
				'default'		=> [ 'content', 'primary' ],
				'choices'		=> $c_modules, 
				'transport'		=> 'postMessage',
				'active_callback' => 'is_home',
				'partial'		=> [
					'selector'        		=> '.content-area',
					'render_callback' 		=> [ 'WeCodeArt\Core\Content', 'render_modules' ],
					'container_inclusive' 	=> true
				]
			)
		);

		$configurations = array_merge( $configurations, $_configs );

		// Page specific Mods
		$pages = get_pages();
		foreach( $pages as $page ) {
			$title = $page->post_title;
			$ID = $page->ID;
			$config = array(
				array(
					'name'			=> 'content-layout-container-page-' . $ID,
					'type'        	=> 'control',
					'control'  		=> 'select',
					'section'		=> 'content-layout',
					'title' 		=> sprintf( __( 'Container Type: %s', 'wecodeart' ), $title ),
					'description' 	=> __( 'Choose the type of the container class.', 'wecodeart' ),
					'choices'  		=> array(
						'container'			=> __( 'Container', 'wecodeart' ),
						'container-fluid' 	=> __( 'Container Fluid', 'wecodeart' ),
					), 
					'priority'             => 20,
					'default'              => 'container',
					'active_callback'	   => function() use ( $ID ) { return is_page( $ID ); },
					'transport' 		   => 'postMessage'
				),
				array(
					'name'			=> 'content-layout-modules-page-' . $ID,
					'type'        	=> 'control',
					'control'  		=> 'wecodeart-sortable',
					'section'		=> 'content-layout',
					'title'			=> sprintf( __( 'Content Modules: %s', 'wecodeart' ), $title ),
					'description'	=> __( 'Enable and reorder Site Inner modules. This will affect only the page you are currently viewing.', 'wecodeart' ),
					'priority'		=> 30,
					'default'		=> [ 'content', 'primary' ],
					'choices'		=> $c_modules,
					'active_callback'	=> function() use ( $ID ) { return is_page( $ID ); },
					'transport'		=> 'postMessage',
					'partial'		=> [
						'selector'        		=> '.content-area',
						'render_callback' 		=> [ 'WeCodeArt\Core\Content', 'render_modules' ],
						'container_inclusive'	=> true
					]
				) 	 	
			);
			$configurations = array_merge( $configurations, $config );
		}

		// Post Types Archives And Singular Context Mods 
		$public_posts = $get_post_types; 
		if( isset( $public_posts['product'] ) ) unset( $public_posts['product'] );
		foreach( $public_posts as $type ) { 
			$post_type = get_post_type_object( $type );
			$config = array(
				array(
					'name'			=> 'content-layout-container-' . $type . '-archive',
					'type'        	=> 'control',
					'control'  		=> 'select',
					'section'		=> 'content-layout',
					'title' 		=> sprintf( __( 'Container Type: %s Archive', 'wecodeart' ), $post_type->labels->singular_name ),
					'description' 	=> __( 'Choose the type of the container class.', 'wecodeart' ),
					'choices'  		=> array(
						'container'			=> __( 'Container', 'wecodeart' ),
						'container-fluid' 	=> __( 'Container Fluid', 'wecodeart' ),
					), 
					'priority'             => 20,
					'default'              => 'container',
					'active_callback'	   => function() use ( $type ) { return is_post_type_archive( $type ); },
					'transport' 		   => 'postMessage'
				),
				array(
					'name'			=> 'content-layout-modules-' . $type . '-archive',
					'type'        	=> 'control',
					'control'  		=> 'wecodeart-sortable',
					'section'		=> 'content-layout',
					'title'			=> sprintf( __( 'Content Modules: %s Archive', 'wecodeart' ), $post_type->labels->singular_name ),
					'description'	=> __( 'Enable and reorder Site Inner modules. This will affect only the page you are currently viewing.', 'wecodeart' ),
					'priority'		=> 30,
					'default'		=> [ 'content', 'primary' ],
					'choices'		=> $c_modules,
					'active_callback'	=> function() use( $type ) { return is_post_type_archive( $type ); }, 
					'transport'		=> 'postMessage',
					'partial'		=> [
						'selector'        => '.content-area',
						'render_callback' => [ 'WeCodeArt\Core\Content', 'render_modules' ],
						'container_inclusive' => true
					]
				),
				array(
					'name'			=> 'content-layout-container-' . $type . '-singular',
					'type'        	=> 'control',
					'control'  		=> 'select',
					'section'		=> 'content-layout',
					'title' 		=> sprintf( __( 'Container Type: %s Single', 'wecodeart' ), $post_type->labels->singular_name ),
					'description' 	=> __( 'Choose the type of the container class.', 'wecodeart' ),
					'choices'  		=> array(
						'container'			=> __( 'Container', 'wecodeart' ),
						'container-fluid' 	=> __( 'Container Fluid', 'wecodeart' ),
					), 
					'priority'             => 25,
					'default'              => 'container',
					'active_callback'	   => function() use ( $type ) { return is_singular( $type ); },
					'transport' 		   => 'postMessage'
				),
				array(
					'name'			=> 'content-layout-modules-' . $type . '-singular',
					'type'        	=> 'control',
					'control'  		=> 'wecodeart-sortable',
					'section'		=> 'content-layout',
					'title'			=> sprintf( __( 'Content Modules: %s Single', 'wecodeart' ), $post_type->labels->singular_name ),
					'description'	=> __( 'Enable and reorder Site Inner modules. This will affect only the page you are currently viewing.', 'wecodeart' ),
					'priority'		=> 35,
					'default'		=> [ 'content', 'primary' ],
					'choices'		=> $c_modules,
					'active_callback'	=> function() use( $type ) { return is_singular( $type ); }, 
					'transport'		=> 'postMessage',
					'partial'		=> [
						'selector'        		=> '.content-area',
						'render_callback' 		=> [ 'WeCodeArt\Core\Content', 'render_modules' ],
						'container_inclusive' 	=> true
					]
				)	 	
			);
			$configurations = array_merge( $configurations, $config );
		}
		
		/**
		 * Entry Configurable Meta Info
		 * @since 3.6 
		 */
		$m_modules = array();
		$meta_modules = \WeCodeArt\Core\Entry\Meta::modules();
		foreach( $meta_modules as $key => $val ) $m_modules[$key] = $val['label']; 

		foreach( $get_post_types as $type ) { 
			if( ! post_type_supports( $type, 'wecodeart-post-info' ) ) continue;
			$type_obj = get_post_type_object( $type );
			$meta_config = array(  
				array(
					'name'			=> 'content-entry-meta-' . $type . '-archive',
					'type'        	=> 'control',
					'control'  		=> 'wecodeart-sortable',
					'section'		=> 'content-entry',
					'title'			=> sprintf( __( 'Meta Modules: %s Archive', 'wecodeart' ), $type_obj->labels->singular_name ),
					'description'	=> __( 'Enable/Disable/Reorder Entry Meta information modules for current post type - archive.', 'wecodeart' ),
					'priority'		=> 5, 
					'choices'		=> $m_modules, 
					'default'		=> [ 'author', 'date', 'comments' ],
					'transport'		=> 'postMessage',
					'active_callback' => function() use ( $type ) { 
						if( $type === 'post' && is_home() ) return true;
						return is_post_type_archive( $type ); 
					},
					'partial'		=> [
						'selector'        		=> '.entry-meta',
						'render_callback' 		=> [ 'WeCodeArt\Core\Entry\Meta', 'render' ],
						'container_inclusive' 	=> true
					]
				),
				array(
					'name'			=> 'content-entry-meta-' . $type . '-singular',
					'type'        	=> 'control',
					'control'  		=> 'wecodeart-sortable',
					'section'		=> 'content-entry',
					'title'			=> sprintf( __( 'Meta Modules: %s Single', 'wecodeart' ), $type_obj->labels->singular_name ),
					'description'	=> __( 'Enable/Disable/Reorder Entry Meta information modules for current post type - single.', 'wecodeart' ),
					'priority'		=> 10, 
					'choices'		=> $m_modules, 
					'default'		=> [ 'author', 'date', 'comments' ],
					'transport'		=> 'postMessage',
					'active_callback' => function() use( $type ) { return is_singular( $type ); },
					'partial'		=> [
						'selector'        		=> '.entry-meta',
						'render_callback' 		=> [ 'WeCodeArt\Core\Entry\Meta', 'render' ],
						'container_inclusive' 	=> true
					]
				)
			); 
			// Merge to main config
			$configurations = array_merge( $configurations, $meta_config );
		}

		return $configurations;
	}
}
