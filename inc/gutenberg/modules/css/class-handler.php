<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg CSS Handler
 * @copyright   Copyright (c) 2020, WeCodeArt Framework
 * @since		4.2.0
 * @version		4.2.0
 */

namespace WeCodeArt\Gutenberg\Modules\CSS;

defined( 'ABSPATH' ) || exit();

use WP_REST_Request;
use WeCodeArt\Gutenberg;
use WeCodeArt\Gutenberg\Modules\CSS;
use function WeCodeArt\Functions\compress_css;

/**
 * Class Handler
 *
 * Process/create/save/delete CSS code for gutenberg blocks
 */
class Handler {

	use \WeCodeArt\Singleton;

	/**
	 * Initialize the class
	 */
	public function init() {
		add_action( 'rest_api_init', 		[ $this, 'register_routes' ] );
		add_action( 'before_delete_post', 	[ __CLASS__, 'delete_css_file' ] );
	}

	/**
	 * Register REST API route
	 *
	 * @since   4.2.0
	 * @access  public
	 */
	public function register_routes() {
		$namespace = 'wecodeart/v1';

		register_rest_route( $namespace, '/save_post_meta/(?P<id>\d+)', array(
			array(
				'methods'             => \WP_REST_Server::EDITABLE,
				'callback'            => array( $this, 'save_post_meta' ),
				'args'                => array(
					'id' => array(
						'type'              => 'intval',
						'required'          => true,
						'description'       => __( 'ID of the Post.', 'wecodeart' ),
						'validate_callback' => function ( $param, $request, $key ) {
							return is_numeric( $param );
						},
					),
				),
				'permission_callback' => function () {
					return current_user_can( 'publish_posts' );
				},
			),
		) );

		register_rest_route( $namespace, '/save_block_meta/(?P<id>\d+)', array(
			array(
				'methods'             => \WP_REST_Server::EDITABLE,
				'callback'            => array( $this, 'save_block_meta' ),
				'args'                => array(
					'id' => array(
						'type'              => 'intval',
						'required'          => true,
						'description'       => __( 'ID of the Reusable Block.', 'wecodeart' ),
						'validate_callback' => function ( $param, $request, $key ) {
							return is_numeric( $param );
						},
					),
				),
				'permission_callback' => function () {
					return current_user_can( 'publish_posts' );
				},
			),
		) );
	}

	/**
	 * Function to save post CSS.
	 *
	 * @param 	\WP_REST_Request $request Rest request.
	 *
	 * @return 	mixed
	 * @since   4.2.0
	 * @access  public
	 */
	public function save_post_meta( \WP_REST_Request $request ) {
		if ( ! current_user_can( 'edit_posts' ) ) {
			return false;
		}

		$post_id = $request->get_param( 'id' );
		self::generate_css_file( $post_id );

		return rest_ensure_response( [
			'message' => __( 'CSS updated.', 'wecodeart' )
		] );
	}

	/**
	 * Function to save reusable block CSS.
	 *
	 * @param   \WP_REST_Request $request Rest request.
	 *
	 * @return  mixed
	 * @since   4.2.0
	 * @access  public
	 */
	public function save_block_meta( \WP_REST_Request $request ) {
		if ( ! current_user_can( 'edit_posts' ) ) {
			return false;
		}

		$post_id = $request->get_param( 'id' );
		$css     = CSS::get_instance()->get_reusable_block_css( $post_id );

		self::save_css_file( $post_id, $css );

		return rest_ensure_response( [
			'message' => __( 'CSS updated.', 'wecodeart' )
		] );
	}

	/**
	 * Generate CSS file.
	 *
	 * @param int $post_id Post id.
	 */
	public static function generate_css_file( $post_id ) {
		$css = CSS::get_instance()->get_blocks_css( $post_id );
		if( trim( $css ) ) {
			return Handler::get_instance()->save_css_file( $post_id, $css );
		}
		
		return;
	}

	/**
	 * Get CSS url for post.
	 *
	 * @param   int $post_id Post id.
	 *
	 * @return  string File url.
	 */
	public static function get_css_url( $post_id ) {
		$file_name = get_post_meta( $post_id, '_wca_gutenberg_block_stylesheet', true );
		if ( empty( $file_name ) ) {
			return false;
		}

		$wp_upload_dir = wp_upload_dir( null, false );
		$baseurl       = $wp_upload_dir['baseurl'] . '/wecodeart/';

		return $baseurl . $file_name . '.css';
	}

	/**
	 * Check if we have a CSS file for this post.
	 *
	 * @param   int $post_id Post ID.
	 *
	 * @return  bool
	 */
	public static function has_css_file( $post_id ) {
		$file_name = get_post_meta( $post_id, '_wca_gutenberg_block_stylesheet', true );

		if ( empty( $file_name ) ) {
			return false;
		}

		$wp_upload_dir = wp_upload_dir( null, false );
		$basedir       = $wp_upload_dir['basedir'] . '/wecodeart/';
		$file_path     = $basedir . $file_name . '.css';

		return is_file( $file_path );
	}

	/**
	 * Function to save CSS into WordPress Filesystem.
	 *
	 * @param   int    $post_id Post id.
	 * @param   string $css CSS string.
	 *
	 * @return  bool
	 * @since   4.2.0
	 * @access  public
	 */
	public static function save_css_file( $post_id, $css ) {
		global $wp_filesystem;
		require_once ABSPATH . '/wp-admin/includes/file.php';
		WP_Filesystem();

		$file_name     = 'post-' . $post_id;
		$wp_upload_dir = wp_upload_dir( null, false );
		$upload_dir    = $wp_upload_dir['basedir'] . '/wecodeart/';
		$file_path     = $upload_dir . $file_name . '.css';

		$css = self::compress( wp_filter_nohtml_kses( $css ) );

		update_post_meta( $post_id, '_wca_gutenberg_block_styles', $css );

		do_action( 'wecodeart/gutenberg/css/handler/save', $post_id );

		// Delete previous file
		if ( is_file( $file_path ) ) {
			self::delete_css_file( $post_id );
		}

		$target_dir = $wp_filesystem->is_dir( $upload_dir );

		// If not writtable, return;
		if ( ! $wp_filesystem->is_writable( $wp_upload_dir['basedir'] ) ) {
			return false;
		}

		// If dir does not exists, create it;
		if ( ! $target_dir ) {
			wp_mkdir_p( $upload_dir );
		}

		// Create the file and put CSS in it;
		$wp_filesystem->put_contents( $file_path, $css, FS_CHMOD_FILE );

		// If it went successfully, update meta with the filename;
		if ( file_exists( $file_path ) ) {
			update_post_meta( $post_id, '_wca_gutenberg_block_stylesheet', $file_name );
		}

		return true;
	}

	/**
	 * Function to delete CSS from WordPress Filesystem.
	 *
	 * @param   int $post_id Post id.
	 *
	 * @return  bool
	 * @since   4.2.0
	 * @access  public
	 */
	public static function delete_css_file( $post_id ) {
		global $wp_filesystem;

		if ( ! current_user_can( 'edit_posts' ) ) {
			return false;
		}

		require_once ABSPATH . '/wp-admin/includes/file.php';
		WP_Filesystem();

		$wp_upload_dir = wp_upload_dir( null, false );

		if ( ! $wp_filesystem->is_writable( $wp_upload_dir['basedir'] ) ) {
			return;
		}

		$file_name = get_post_meta( $post_id, '_wca_gutenberg_block_stylesheet', true );

		if ( $file_name ) {
			delete_post_meta( $post_id, '_wca_gutenberg_block_stylesheet' );
		}

		$upload_dir = $wp_upload_dir['basedir'] . '/wecodeart/';
		$file_path  = $upload_dir . $file_name . '.css';

		if ( ! file_exists( $file_path ) ) {
			return;
		}

		$wp_filesystem->delete( $file_path, true );

		return true;
	}

	/**
	 * Compress CSS
	 *
	 * @param   string $css Compress css.
	 *
	 * @return  string Compressed css.
	 * @since   4.2.0
	 * @access  public
	 */
	public static function compress( $css ) {
		return compress_css( htmlspecialchars_decode( $css) );
	}
}