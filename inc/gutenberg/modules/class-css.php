<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg
 * @copyright   Copyright (c) 2020, WeCodeArt Framework
 * @since		4.0.3
 * @version		4.0.3
 */

namespace WeCodeArt\Gutenberg\Modules;

defined( 'ABSPATH' ) || exit();

use function WeCodeArt\Functions\trim_css;

/**
 * Handles Gutenberg Theme CSS Functionality.
 */
class CSS {

	use \WeCodeArt\Singleton;
	use \WeCodeArt\Core\Scripts\Base;

	/**
	 * Class Init.
	 *
	 * @return void
	 */
	public function init() {
		// Editor Assets.
		add_action( 'wp_head', [ $this, 'render_ssr_css' ] );
	}

	/**
	 * Render server-side CSS
	 * 
	 * @since   4.0.3
	 * @version 4.1.5
	 * @access  public
	 */
	public function render_ssr_css() {
		if ( function_exists( 'has_blocks' ) && has_blocks( get_the_ID() ) ) {
			global $post;

			if ( ! is_object( $post ) ) {
				return;
			}

			$blocks = \WeCodeArt\Gutenberg::parse_blocks( $post->post_content );

			if ( ! is_array( $blocks ) || empty( $blocks ) ) {
				return;
			}

			$css_string = $this->collect_styles( $blocks );

			if( empty( $css_string ) ) return;

			$style = "\n" . '<style type="text/css" media="all" id="' . $this->make_handle() . '">' . "\n";
			$style .= $css_string;
			$style .= "\n" . '</style>' . "\n";

			echo $style; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped
		}
	}

	/**
	 * Cycle thorugh Blocks and collect css rules
	 * 
	 * @since   4.0.3
	 * @access  public
	 *
	 * @return 	string
	 */
	public function collect_styles( $innerBlocks ) {
		$style = '';
		foreach ( $innerBlocks as $block ) {
			if ( isset( $block['attrs'] ) ) {
				if ( isset( $block['attrs']['hasCustomCSS'] ) && isset( $block['attrs']['customCSS'] ) ) {
					$style .= $block['attrs']['customCSS'];
				}
			}

			if ( $block['blockName'] === 'core/block' && ! empty( $block['attrs']['ref'] ) ) {
				$reusable_block = get_post( $block['attrs']['ref'] );

				if ( ! $reusable_block || 'wp_block' !== $reusable_block->post_type ) {
					return;
				}

				if ( 'publish' !== $reusable_block->post_status || ! empty( $reusable_block->post_password ) ) {
					return;
				}

				$blocks = \WeCodeArt\Gutenberg::parse_blocks( $reusable_block->post_content );

				$style .= $this->collect_styles( $blocks );
			}

			if ( isset( $block['innerBlocks'] ) && ! empty( $block['innerBlocks'] ) && is_array( $block['innerBlocks'] ) ) {
				$style .= $this->collect_styles( $block['innerBlocks'] );
			}
		}
		
		return trim_css( $style );
	}
}
