<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg Pattern
 * @copyright   Copyright (c) 2022, WeCodeArt Framework
 * @since		5.0.0
 * @version		5.3.3
 */

namespace WeCodeArt\Gutenberg\Modules\Patterns;

defined( 'ABSPATH' ) || exit();

/**
 * Class representing a block pattern.
 */
class Pattern {
    /**
	 * Namespace: wecodeart
	 *
	 * @var string
	 */
    const NAMESPACE = 'wecodeart';

	/**
	 * Container of valid json properties.
	 *
	 * @var array
	 */
	const VALID_PROPERTIES = [ 'slug', 'title', 'content', 'description', 'categories', 'blockTypes', 'theme' ];

	/**
	 * Template slug.
	 *
	 * @var string
	 */
	public $slug;

	/**
	 * Title.
	 *
	 * @var string
	 */
	public $title = '';

	/**
	 * Content.
	 *
	 * @var string
	 */
	public $content = '';

	/**
	 * Description.
	 *
	 * @var string
	 */
	public $description = '';

    /**
	 * Categories.
	 *
	 * @var array
	 */
	public $categories = [];
    
	/**
	 * Block Types.
	 *
	 * @var array
	 */
	public $blockTypes = [];

	/**
	 * Theme.
	 *
	 * @var string
	 */
	public $theme;

	/**
	 * Source of the content.
	 *
	 * @var string
	 */
	public $source = 'theme';

	/**
	 * Construct template.
	 *
	 * @param 	array	$args	Pattern attributes
	 */
	public function __construct( $args = [] ) {
		$valid = wp_array_slice_assoc( $args, self::VALID_PROPERTIES );
		$valid = self::translate( self::sanitize( $valid ) );

		foreach( $valid as $key => $value ) $this->{ $key } = $value;
	}

    /**
     * Register Template
     *
     * @return void
     */
    public function register() {
		if ( \WP_Block_Patterns_Registry::get_instance()->is_registered( $this->get_name() ) ) return;

		$args = [
            'title'       	=> $this->title,
            'content'     	=> serialize_blocks( parse_blocks( $this->content ) ),
            'categories'  	=> ! empty( $this->categories ) ? $this->categories : [ $this->theme ],
            'description' 	=> $this->description,
			'blockTypes' 	=> $this->blockTypes,
        ];

        register_block_pattern( $this->get_name(), $args );
    }

	/**
     * Get Name
     *
     * @return string
     */
	public function get_name() {
		return join( '/', [ self::NAMESPACE, sanitize_text_field( $this->slug ) ] );
	}

	/**
     * Sanitize
	 *
	 * @param	array $json
     *
     * @return 	array
     */
	private static function sanitize( $json = [] ) {
		$sanitized = [];

		foreach( $json as $key => $value ) {
			switch( $key ) :
				// Strings
				case 'slug':
				case 'title':
				case 'theme':
				case 'description':
					$sanitized[$key] = sanitize_text_field( $value );
				break;
				// Arrays
				case 'categories':
				case 'blockTypes':
					$sanitized[$key] = array_map( 'sanitize_text_field', $value );
				break;
				// Content -> return as is.
				default:
					$sanitized[$key] = $value;
				break;
			endswitch;
		}

		return $sanitized;
	}

	/**
     * Translate
	 *
	 * @param	array $json
     *
     * @return 	array
     */
	private static function translate( $json = [] ) {
		return translate_settings_using_i18n_schema( (object) [
			'title' 		=> 'pattern title',
			'description' 	=> 'pattern description',
		], $json, wp_get_theme()->get( 'TextDomain' ) );
	}
}
