<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg Utilities
 * @copyright   Copyright (c) 2021, WeCodeArt Framework
 * @since		5.2.4
 * @version		5.2.4
 */

namespace WeCodeArt\Gutenberg\Modules\Styles;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use function WeCodeArt\Functions\get_prop;

/**
 * Handles Gutenberg Utilities.
 */
class Utilities implements \ArrayAccess {

	use Singleton;

	/**
	 * The registered utilities.
	 *
	 * @var Utilities[]
	 */
	protected $items = [];

	/**
     * Set a given module value.
     *
     * @param  array|string  $key
     * @param  mixed   $value
     *
     * @return void
     */
    public function register( $key, $value = null ) {
        $this->set( $key, $value );
	}
	
    /**
     * Set a given module value.
     *
     * @param  array|string  $key
     * @param  mixed   $value
     *
     * @return void
     */
    public function set( $key, $value = null ) {
        $keys = is_array( $key ) ? $key : [ $key => $value ];

        foreach ( $keys as $key => $value ) {
            $this->items[$key] = apply_filters( "wecodeart/gutenberg/utilities/set/{$key}", $value );
        }
	}

	/**
     * Determine if the given module value exists.
     *
     * @param  string  $key
     *
     * @return bool
     */
    public function has( $key ) {
        return isset( $this->items[$key] );
    }

    /**
     * Get the specified module value.
     *
     * @param  string  $key
     * @param  mixed   $default
     *
     * @return mixed
     */
    public function get( $key, $default = null ) {
        if ( ! isset( $this->items[$key] ) ) {
            return $default;
        }

        return apply_filters( "wecodeart/gutenberg/utilities/get/{$key}", $this->items[$key] );
    }
	
	/**
     * Removes module from the container.
     *
     * @param  string  $key
     *
     * @return bool
     */
    public function forget( $key ) {
		unset( $this->items[$key] );
    }

    /**
     * Get all of the module items for the application.
     *
     * @return array
     */
    public function all() {
        return $this->items;
    }

    /**
     * Determine if the given module option exists.
     *
     * @param  string  $key
     *
     * @return bool
     */
    public function offsetExists( $key ) {
        return $this->has( $key );
    }

    /**
     * Get a module option.
     *
     * @param  string  $key
     *
     * @return mixed
     */
    public function offsetGet( $key ) {
        return $this->get( $key );
    }

    /**
     * Set a module option.
     *
     * @param  string  $key
     * @param  mixed  $value
     *
     * @return void
     */
    public function offsetSet( $key, $value ) {
        $this->set( $key, $value );
    }

    /**
     * Unset a module option.
     *
     * @param  string  $key
     *
     * @return void
     */
    public function offsetUnset( $key ) {
        $this->set( $key, null );
    }
}

/**
 * Generate breakpoint class
 *
 * @param  string   $class
 * @param  string   $key
 * @param  bool     $responsive
 *
 * @return string
 */
function generate_class( string $class = '', $key = '', $responsive = false ) {
    if( $responsive === false ) {
        $_class = $key === null ? '' : $class;
		$return	= rtrim( $_class === '' ? $class : join( '-', [ $_class, $key ] ), '-' );

        return $return;
    }

    $_class_ = explode( '-', $class );

    if( count( $_class_ ) >= 2 ) {
        $_last  = array_pop( $_class_ );
        $return = array_merge( $_class_, [ $key, $_last ] );
    } else {
        $return = [ $_class_[0], $key ];
    }

    $return = rtrim( join( '-', $return ), '-' );

    return $return;
}

/**
 * Register CSS utility to be parsed by CSS module.
 *
 * @param  array  $args
 *
 * @return void
 */
function register_utility( $args = [] ) {
	$defaults = [
		'property' 	=> '',
		'class'		=> '',
		'values'	=> [],
		'responsive'=> false,
	];

	$args 	= wp_parse_args( $args, $defaults );

	$values = (array) get_prop( $args, 'values', [] );
	
    // Bail if no values.
	if( empty( $values ) ) return;
	
	$properties	= (array) get_prop( $args, 'property' );
	$class 		= get_prop( $args, 'class', $properties[0] );

    // Bail if no class.
    if( ! $class ) return;

	$media		= wecodeart_json( [ 'settings', 'custom', 'breakpoints' ], [] );
	$responsive = get_prop( $args, 'responsive' ) && ! empty( $media );
    $container  = Utilities::get_instance();

	foreach( $values as $key => $value ) {
		$_class	= generate_class( $class, $key );
        $value  = (string) $value;

		$output = [];
        foreach( $properties as $property ) {
            $output['.' . $_class][$property] = "$value!important";
        }
	
		$container->register( $_class, [
			'global' => $output
		] );
		
		// Move on if not responsive
		if( ! $responsive ) continue;

		foreach( $media as $key => $breakpoint ) {
			$_class_ = generate_class( $_class, $key, true );
			
			$output = [];
            foreach( $properties as $property ) {
                $output['.' . $_class_][$property] = "$value!important";
            }

			$container->register( $_class_, [
				"@media (min-width:{$breakpoint})" => $output
			] );
		}
	}
}