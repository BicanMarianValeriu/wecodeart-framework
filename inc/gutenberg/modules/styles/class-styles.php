<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg CSS Module
 * @copyright   Copyright (c) 2021, WeCodeArt Framework
 * @since		4.0.3
 * @version		4.2.0
 */

namespace WeCodeArt\Gutenberg\Modules;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Gutenberg;
use WeCodeArt\Core\Scripts;

/**
 * Handles Gutenberg Theme CSS Functionality.
 */
class Styles {

	use Singleton;

	/**
	 * The Styles Processor
	 *
	 * @access 	public
	 * @var 	null|object
	 */
	public $styles = null;

	/**
	 * Class Init.
	 *
	 * @return void
	 */
	public function init() {
		$this->styles = wecodeart( 'integrations' )->get( 'styles' );

		// CSS Handler
		Styles\Handler::get_instance();
		// Enqueue Styles
		Styles\Embed::get_instance();
	}

	/**
	 * Get Blocks CSS
	 *
	 * @param 	int 	$post_id Post id.
	 * @return 	string
	 * @since   4.2.0
	 */
	public function get_blocks_css( $post_id ) {
		$content = get_post_field( 'post_content', $post_id );
		$blocks  = Gutenberg::parse_blocks( $content );

		if ( ! is_array( $blocks ) || empty( $blocks ) ) {
			return;
		}

		return $this->cycle_through_static_blocks( $blocks );
	}

	/**
	 * Get Reusable Blocks CSS
	 *
	 * @param 	int 	$post_id Post id.
	 * @return 	string
	 * @since   4.2.0
	 */
	public function get_reusable_block_css( $block_id ) {
		$reusable_block = get_post( $block_id );

		if ( ! $reusable_block || 'wp_block' !== $reusable_block->post_type ) {
			return;
		}

		if ( 'publish' !== $reusable_block->post_status || ! empty( $reusable_block->post_password ) ) {
			return;
		}

		$blocks = Gutenberg::parse_blocks( $reusable_block->post_content );

		return $this->cycle_through_static_blocks( $blocks );
	}

	/**
	 * Cycle thorugh Static Blocks
	 *
	 * @param 	array 	$blocks List of blocks.
	 *
	 * @return 	string 	Style.
	 * @since   4.2.0
	 */
	public function cycle_through_static_blocks( $blocks ) {
		$style = '';
		foreach ( $blocks as $block ) {
			$style .= $this->get_css_from_attributes( $block );

			if ( isset( $block['innerBlocks'] ) && ! empty( $block['innerBlocks'] ) && is_array( $block['innerBlocks'] ) ) {
				$style .= $this->cycle_through_static_blocks( $block['innerBlocks'] );
			}
		}

		return $style;
	}

	/**
	 * Cycle thorugh Reusable Blocks
	 *
	 * @since   4.2.0
	 * @param 	array 	$blocks List of blocks.
	 *
	 * @return 	string 	Style.
	 */
	public function cycle_through_reusable_blocks( $blocks ) {
		$style = '';
		foreach ( $blocks as $block ) {
			if ( 'core/block' === $block['blockName'] && ! empty( $block['attrs']['ref'] ) ) {
				$style .= $this->get_reusable_block_css( $block['attrs']['ref'] );
			}

			if ( isset( $block['innerBlocks'] ) && ! empty( $block['innerBlocks'] ) && is_array( $block['innerBlocks'] ) ) {
				$style .= $this->cycle_through_reusable_blocks( $block['innerBlocks'] );
			}
		}

		return $style;
	}

	/**
	 * Generate Blocks CSS
	 *
	 * @since   4.2.0
	 * @param 	mixed 	$block Block data.
	 *
	 * @return 	string
	 */
	public function get_css_from_attributes( $block = [] ) {
		$attr  = $block['attrs'] ?: [];
		$style = '';
		
		$css_style		= isset( $attr['style'] ) ? $attr['style'] : [];
		$block_class 	= isset( $attr['className'] ) ? explode( ' ', $attr['className'] ) : [];
		$block_class 	= array_filter( $block_class, function( $key ) {
			return strpos( $key, 'wcacss-' ) === 0;
		} );

		if( count( $block_class ) === 0 ) return $style;

		$block_class 	= '.' . end( $block_class );

		$block_style = [];
		$block_style['global'][$block_class] = [];

		// Background Color
		if( isset( $css_style['color'] ) && isset( $css_style['color']['background'] ) ) {
			$block_style['global'][$block_class]['background-color'] = $this->styles::get_css_value( $css_style['color']['background'], 'color' );
		}

		// Background Image
		if( isset( $attr['backgroundUrl'] ) && ! empty( $attr['backgroundUrl'] ) ) {
			$block_style['global'][$block_class]['background-image'] = $this->styles::get_css_value( $attr['backgroundUrl'], 'url' );
		}

		// Background Position
		$focal_point = isset( $attr['focalPoint'] ) ? $attr['focalPoint'] : false;
		if( $focal_point ) {
			$block_style['global'][$block_class]['background-position'] = $this->styles::get_css_value( $focal_point, 'focal' );
		}
		
		if ( isset( $attr['hasCustomCSS'] ) && $attr['hasCustomCSS'] && ! empty( $attr['customCSS'] ) ) {
			$custom_style = wp_strip_all_tags( $this->styles::get_attr_value( $attr['customCSS'] ) );
			$custom_style = $this->styles::break_queries( $custom_style );
			// Combine with custom CSS
			$block_style = array_replace_recursive( $block_style, $custom_style );
		}

		// Filter attributes that should generate styles
		$block_style = apply_filters( 'wecodeart/gutenberg/css/attributes', $block_style, $attr );

		// Parse Attributes Style
		$style .= $this->styles::parse( $this->styles::add_prefixes( $block_style ) );

		return $style;
	}
}
