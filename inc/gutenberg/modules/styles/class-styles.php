<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg CSS Module
 * @copyright   Copyright (c) 2021, WeCodeArt Framework
 * @since		4.0.3
 * @version		5.1.9
 */

namespace WeCodeArt\Gutenberg\Modules;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Gutenberg;
use WeCodeArt\Integration;
use WeCodeArt\Core\Scripts;
use function WeCodeArt\Functions\get_prop;

/**
 * Handles Gutenberg Theme CSS Functionality.
 */
class Styles implements Integration {

	use Singleton;
	use Scripts\Base;

	/**
	 * The CSS ID for registered style.
	 *
	 * @var string
	 */
    const CSS_ID = 'wecodeart-blocks-custom';

	/**
	 * The Styles Processor
	 *
	 * @access 	public
	 * @var 	null|object
	 */
	public $CSS		= null;

	/**
	 * The blocks styles
	 *
	 * @access 	public
	 * @var 	string
	 */
	public $styles	= '';

	/**
	 * The blocks duotone
	 *
	 * @access 	public
	 * @var 	string
	 */
	public $filters	= [];

	/**
	 * Current processed blocks
	 *
	 * @access 	public
	 * @var 	string
	 */
	public static $processed = [];

	/**
	 * Get Conditionals
	 *
	 * @return void
	 */
	public static function get_conditionals() {
		wecodeart( 'conditionals' )->set( [
			'with_blocks_styles' => Styles\Condition::class,
		] );

		return [ 'with_blocks_styles' ];
	}

	/**
	 * Register Hooks - into styles processor action if enabled
	 *
	 * @since 	5.0.0
	 *
	 * @return 	void
	 */
	public function register_hooks() {
		$this->CSS = wecodeart( 'integrations' )->get( 'styles' );

		// Hooks
		add_filter( 'render_block',					[ $this, 'filter_render' 		], 10, 2 );
		add_action( 'enqueue_block_editor_assets',	[ $this, 'block_editor_assets' 	], 0 );
		add_action( 'wp_loaded', 					[ $this, 'add_attributes' 		] );
		add_action( 'wp_enqueue_scripts',			[ $this, 'register_styles'		], 20, 1 );
		add_action( 'wp_enqueue_scripts',			[ $this, 'add_link_styles'		], 10, 1 );
		add_action( 'wp_footer',					[ $this, 'output_duotone'		], 10, 1 );

		// Remove WP/GB plugins hooks - we dont need this anymore!
		remove_filter( 'render_block', 'wp_render_layout_support_flag', 10, 2 );
		remove_filter( 'render_block', 'wp_render_elements_support', 	10, 2 );
		remove_filter( 'render_block', 'wp_render_duotone_support',		10, 2 );

		// Eventually it will be removed - 1 check since they are all from GB.
		if( function_exists( 'gutenberg_render_layout_support_flag' ) ) {
			remove_filter( 'render_block', 'gutenberg_render_layout_support_flag', 	10, 2 );
			remove_filter( 'render_block', 'gutenberg_render_elements_support', 	10, 2 );
			remove_filter( 'render_block', 'gutenberg_render_duotone_support', 		10, 2 );
		}
	}

	/**
	 * Editor only.
	 *
	 * @return  void
	 */
	public function block_editor_assets() {
		wp_enqueue_script( $this->make_handle(), $this->get_asset( 'js', 'gutenberg/ext-styles' ), [
			'wecodeart-gutenberg-inline'
		], wecodeart( 'version' ) );
	}

	/**
	 * Filter render_block
	 *
	 * @param	string 	$block_content
	 * @param	array 	$block
	 *
	 * @return 	string 	HTML
	 */
	public function filter_render( $content, $block ) {
		$block_id 	= get_prop( $block['attrs'], 'customCSSId', false );
		$block_name	= get_prop( $block, 'blockName' );

		if( in_array( $block_id, self::$processed ) || $block_id === false ) return $content;

		// Remove styles, where needed.
		// I'm not happy with this way but there is no other way to remove style attributes that I know, on PHP.
		// It would be ok with JS but that breaks the blocks.
		// Other way that could work would be rest renderer but you need to unset pretty much all attributes.
		if ( in_array( $block_name, self::core_blocks() ) ) {
			// Target anything for most of the blocks.
			$regex		= '/(<[^>]+) style="([^"]*)"/i';
			$passes 	= 1;
			
			// Target only main wrapper for specific blocks - especialy the ones that can have innerBlocks.
			if( in_array( $block_name, [
				'core/cover',
				'core/column',
				'core/columns',
				'core/group',
				'core/media-text',
				'core/template-part',
				'core/post-comments-form',
			] ) ) {
				$block_ = explode( '/', $block_name );
				$regex 	= '/(<[^>]*wp-block-' . end( $block_ ) . '[^"]*") style="([^"]*)"/i';
			}

			// Remove style attrs for first child elements on some blocks.
			if( in_array( $block_name, [ 'core/cover', 'core/media-text' ] ) ) {
				$passes	= 2;
			}

			$content 	= preg_replace( $regex, '$1', $content, $passes );
		}

		// Add necessary class
		$cssid		= substr( $block_id, 0, 8 );
		$content	= preg_replace( '/' . preg_quote( 'class="', '/' ) . '/', 'class="css-' . $cssid . ' ', $content, 1 );

		// Process a block
		$processed 	= self::process_block( $block );
		$styles 	= $processed->get_styles();
		$filters	= $processed->get_duotone();

		// Process CSS, add prefixes and convert to string!
		if( $styles ) {
			$this->styles .= $this->CSS::parse( $this->CSS::add_prefixes( $styles ) );
		}

		// Process Duotone SVG filters
		if( $filters ) {
			$this->filters[$cssid] = $filters;
		}

		// This is processed so next time we skipp it (avoid issues like multiple calls of this filter, if any)
		self::$processed[] = $block_id;

		return $content;
	}

	/**
	 * Output styles in footer.
	 *
	 * @return 	string
	 */
	public function register_styles() {
		if( empty( $this->styles ) ) return;

		$inline_css = $this->CSS::compress( $this->styles );

		if( empty( $inline_css ) ) return;

		wp_register_style( self::CSS_ID, false, [], true, true );
		wp_add_inline_style( self::CSS_ID, $inline_css );
		wp_enqueue_style( self::CSS_ID );
	}
	
	/**
	 * Output styles in footer.
	 *
	 * @return 	string
	 */
	public function output_duotone() {
		if( empty( $this->filters ) ) return;
		?>
		<svg xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 0 0" focusable="false" role="none" class="visually-hidden">
			<defs>
			<?php foreach( $this->filters as $block_id => $filter ) : ?>
				<filter id="wp-duotone-<?php echo esc_attr( $block_id ); ?>">
					<feColorMatrix
						type="matrix"
						values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 0 0 0 1 0"
					/>
					<feComponentTransfer color-interpolation-filters="sRGB">
						<feFuncR type="table" tableValues="<?php echo esc_attr( implode( ' ', $filter['r'] ) ); ?>" />
						<feFuncG type="table" tableValues="<?php echo esc_attr( implode( ' ', $filter['g'] ) ); ?>" />
						<feFuncB type="table" tableValues="<?php echo esc_attr( implode( ' ', $filter['b'] ) ); ?>" />
					</feComponentTransfer>
				</filter>
			<?php endforeach; ?>
			</defs>
		</svg>
		<?php
	}
	
	/**
	 * Add link styles.
	 *
	 * @return 	string
	 */
	public function add_link_styles() {
		$palette 	= wecodeart_json( [ 'settings', 'color', 'palette', 'theme' ], [] );
		$palette 	= wecodeart_json( [ 'settings', 'color', 'palette', 'user' ], $palette );
		$link_color = wecodeart_json( [ 'styles', 'elements', 'link', 'color', 'text' ], false );

		// Is WP way of saved color
		if( mb_strpos( $link_color, '|' ) !== false ) {
			$slug = explode( '|', $link_color );
			$slug = end( $slug );
		// Or is a CSS variable
		} elseif( mb_strpos( $link_color, '--' ) !== false ) {
			$slug = explode( '--', $link_color );
			$slug = str_replace( ')', '', end( $slug ) );
		}
		
		if ( isset( $slug  ) ) {
			// Otherwhise is a normal Hex color
			$link_color	= get_prop( current( wp_list_filter( $palette, [
				'slug' => $slug,
			] ) ), 'color', '#0088cc' );
		}

		// Darken the color
		$link_color = $this->CSS::hex_brightness( $link_color, -25 );

		wp_add_inline_style( 'global-styles', "a:hover{color:${link_color};}" );
	}

	/**
	 * Core blocks.
	 *
	 * @return 	array
	 */
	public static function core_blocks() {
		return apply_filters( 'wecodeart/filter/gutenberg/styles/core', [
			'core/archive',
			'core/audio',
			'core/buttons',
			'core/button',
			'core/calendar',
			'core/categories',
			'core/code',
			'core/columns',
			'core/column',
			'core/cover',
			'core/embed',
			'core/file',
			// 'core/freeform',
			'core/gallery',
			'core/group',
			'core/heading',
			'core/home-link',
			// 'core/html',
			'core/image',
			'core/latest-comments',
			'core/latest-posts',
			'core/list',
			'core/loginout',
			'core/media-text',
			'core/navigation',
			'core/navigation-link',
			'core/navigation-submenu',
			'core/page-list',
			'core/paragraph',
			'core/preformatted',
			'core/pullquote',
			'core/post-author',
			'core/post-title',
			'core/post-terms',
			'core/post-date',
			'core/post-excerpt',
			'core/post-content',
			'core/post-featured-image',
			'core/post-navigation-link',
			'core/post-template',
			'core/post-comments',
			'core/post-comments-link',
			'core/post-comments-form',
			'core/post-comments-count',
			'core/post-comment',
			'core/post-comment-author',
			'core/post-comment-reply-link',
			'core/post-comment-author-avatar',
			'core/post-comment-date',
			'core/post-comment-content',
			'core/post-comment-edit',
			'core/query',
			'core/query-title',
			'core/query-pagination',
			'core/query-pagination-next',
			'core/query-pagination-prev',
			'core/query-pagination-numbers',
			'core/quote',
			'core/rss',
			'core/search',
			'core/separator',
			// 'core/shortcode',
			'core/site-logo',
			'core/site-title',
			'core/site-tagline',
			'core/social-links',
			'core/social-link',
			'core/spacer',
			'core/table',
			'core/table-of-contents',
			'core/tag-cloud',
			'core/template-part',
			'core/term-description',
			'core/text-columns',
			'core/verse',
			'core/video',
		] );
	}

	/**
	 * Adds the `hasCustomCSS` and `customCSS` attributes to all blocks, to avoid `Invalid parameter(s): attributes`
	 * error in Gutenberg.
	 *
	 * @since   5.1.9
	 */
	public function add_attributes() {
		$registered_blocks = \WP_Block_Type_Registry::get_instance()->get_all_registered();

		foreach ( $registered_blocks as $name => $block ) {
			$block->attributes['customCSSId'] = array(
				'type'    => 'string',
			);

			$block->attributes['customCSS'] = array(
				'type'    => 'string',
				'default' => '',
			);
		}
	}

	/**
	 * Process a block.
	 *
	 * @param 	array 	$block 	The block data.
	 *
	 * @return 	object
	 */
	public static function process_block( $block = [] ) {
		// Find the class that will handle the output for this block.
		$classname	= Styles\Blocks::class;
		$defaults   = [
			'core/button' 		=> Styles\Blocks\Button::class,
			'core/cover' 		=> Styles\Blocks\Cover::class,
			'core/column' 		=> Styles\Blocks\Column::class,
			'core/image' 		=> Styles\Blocks\Image::class,
			'core/media-text' 	=> Styles\Blocks\Media::class,
			'core/navigation' 	=> Styles\Blocks\Navigation::class,
			'core/pullquote' 	=> Styles\Blocks\PullQuote::class,
			'core/social-links'	=> Styles\Blocks\Social::class,
			'core/separator' 	=> Styles\Blocks\Separator::class,
			'core/spacer' 		=> Styles\Blocks\Spacer::class,
			'core/table' 		=> Styles\Blocks\Table::class,
		];

		$output_classes = apply_filters( 'wecodeart/filter/gutenberg/styles/processor', $defaults );

		if ( array_key_exists( $block['blockName'], $output_classes ) ) {
			$classname = $output_classes[ $block['blockName'] ];
		}
		
		if( class_exists( $classname ) ) {
			return ( new $classname( $block ) );
		};
	}
}
