<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg CSS Module
 * @copyright   Copyright (c) 2021, WeCodeArt Framework
 * @since		4.0.3
 * @version		5.0.0
 */

namespace WeCodeArt\Gutenberg\Modules;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Gutenberg;
use WeCodeArt\Integration;
use WeCodeArt\Core\Scripts;
use function WeCodeArt\Functions\get_prop;

/**
 * Handles Gutenberg Theme CSS Functionality.
 */
class Styles implements Integration {

	use Singleton;
	use Scripts\Base;

	/**
	 * The Styles Processor
	 *
	 * @access 	public
	 * @var 	null|object
	 */
	public $styles 			= null;

	/**
	 * The blocks styles
	 *
	 * @access 	public
	 * @var 	string
	 */
	public $blocks_styles	= '';

	/**
	 * The blocks duotone
	 *
	 * @access 	public
	 * @var 	string
	 */
	public $blocks_duotone	= '';

	/**
	 * Current processed blocks
	 *
	 * @access 	public
	 * @var 	string
	 */
	public $processed		= [];

	/**
	 * Get Conditionals
	 *
	 * @return void
	 */
	public static function get_conditionals() {
		wecodeart( 'conditionals' )->set( [
			'with_blocks_styles' => Styles\Condition::class,
		] );

		return [ 'with_blocks_styles' ];
	}

	/**
	 * Register Hooks - into styles processor action if enabled
	 *
	 * @since 	5.0.0
	 *
	 * @return 	void
	 */
	public function register_hooks() {
		$this->styles = wecodeart( 'integrations' )->get( 'styles' );

		// Hooks
		add_action( 'enqueue_block_editor_assets',	[ $this, 'block_editor_assets' 	], 0 );
		add_filter( 'render_block',					[ $this, 'filter_render' 		], 10, 2 );
		add_action( 'wp_enqueue_scripts',			[ $this, 'enqueue_styles'		], 10, 1 );
		add_action( 'wp_footer',					[ $this, 'output_duotone'		], 10, 1 );

		// Remove WP/GB plugins hooks
		remove_filter( 'render_block', 'wp_render_layout_support_flag', 10, 2 );
		remove_filter( 'render_block', 'wp_render_elements_support', 	10, 2 );
		remove_filter( 'render_block', 'wp_render_duotone_support',		10, 2 );
		remove_filter( 'render_block', 'gutenberg_render_layout_support_flag', 	10, 2 );
		remove_filter( 'render_block', 'gutenberg_render_elements_support', 	10, 2 );
		remove_filter( 'render_block', 'gutenberg_render_duotone_support', 		10, 2 );
	}

	/**
	 * Editor only.
	 *
	 * @return  void
	 */
	public function block_editor_assets() {
		wp_enqueue_script( $this->make_handle(), $this->get_asset( 'js', 'gutenberg-styles' ), [
			'wecodeart-gutenberg-inline'
		], wecodeart( 'version' ) );
	}

	/**
	 * Filter Blocks markup to remove styles
	 *
	 * @param	string 	$block_content
	 * @param	array 	$block
	 *
	 * @return 	string 	HTML
	 */
	public function filter_render( $content, $block ) {
		$block_id = get_prop( $block['attrs'], 'customCSSId', false );

		if( in_array( $block_id, $this->processed ) || $block_id === false ) return $content;

		// Remove styles, where needed
		if ( in_array( $block['blockName'], (array) apply_filters( 'wecodeart/filter/gutenberg/styles/remove', [
			'core/list',
			'core/group',
			'core/cover',
			'core/table',
			'core/verse',
			'core/quote',
			'core/spacer',
			'core/image',
			'core/pullquote',
			'core/media-text',
		], true ) ) ) {
			$content 	= preg_replace( '/(<[^>]+) style=".*?"/i', '$1', $content, 1 );
		}

		// Add necessary class
		$cssid		= substr( $block_id, 0, 8 );
		$content	= preg_replace( '/' . preg_quote( 'class="', '/' ) . '/', 'class="css-' . $cssid . ' ', $content, 1 );

		// Process CSS, add prefixes and convert to string!
		$this->blocks_styles .= $this->styles::parse( $this->styles::add_prefixes( self::process_block( $block ) ) );

		// Process Duotone SVG filters
		$this->blocks_duotone .= $this->get_duotone( $block['attrs'], $block_id );

		// This is processed so next time we skipp it (avoid issues like multiple calls of this filter, if any)
		$this->processed[] = $block_id;

		return $content;
	}

	/**
	 * Output styles in header.
	 *
	 * @return 	string
	 */
	public function enqueue_styles() {
		if( empty( $this->blocks_styles ) ) return;
		$style = $this->styles::compress( $this->blocks_styles );
		
		// Escaping is not really necessary since each property value is already escaped by the CSS processor.
		wp_register_style( 'wecodeart-blocks-entry', false, [], true, true );
		wp_add_inline_style( 'wecodeart-blocks-entry', $style );
		wp_enqueue_style( 'wecodeart-blocks-entry' );
	}

	/**
	 * Output duotone in footer.
	 *
	 * @return 	string
	 */
	public function output_duotone() {
		if( empty( $this->blocks_duotone ) ) return;
		?>
		<svg
			xmlns:xlink="http://www.w3.org/1999/xlink"
			viewBox="0 0 0 0"
			focusable="false"
			role="none"
			style="visibility: hidden; position: absolute; left: -9999px; width: 0; height: 0; overflow: hidden;"
		>
			<defs><?php echo $this->blocks_duotone; ?></defs>
		</svg>
		<?php
	}

	/**
	 * Output styles in footer.
	 *
	 * @return 	void
	 */
	public function get_duotone( $attrs, $block_id ) {
		$duotone 		= '';
		$duotone_colors = get_prop( $attrs, [ 'style', 'color', 'duotone' ], false );

		if( $duotone_colors ) {
			$duotone_values = [
				'r' => array(),
				'g' => array(),
				'b' => array(),
			];

			foreach ( $duotone_colors as $color_str ) {
				$color = gutenberg_tinycolor_string_to_rgb( $color_str );
	
				$duotone_values['r'][] = $color['r'] / 255;
				$duotone_values['g'][] = $color['g'] / 255;
				$duotone_values['b'][] = $color['b'] / 255;
			}
	
			ob_start();

			?>
			<filter id="<?php echo esc_attr( substr( $block_id, 0, 8 ) ); ?>">
				<feColorMatrix type="matrix" values=".299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 0 0 0 1 0" />
				<feComponentTransfer color-interpolation-filters="sRGB" >
					<feFuncR type="table" tableValues="<?php echo esc_attr( implode( ' ', $duotone_values['r'] ) ); ?>" />
					<feFuncG type="table" tableValues="<?php echo esc_attr( implode( ' ', $duotone_values['g'] ) ); ?>" />
					<feFuncB type="table" tableValues="<?php echo esc_attr( implode( ' ', $duotone_values['b'] ) ); ?>" />
				</feComponentTransfer>
			</filter>
			<?php

			$duotone = ob_get_clean();
		}

		return $duotone;
	}

	/**
	 * Get the CSS for a block.
	 *
	 * @param 	array 	$args The block.
	 *
	 * @return 	array
	 */
	public static function process_block( $block = [] ) {
		// Find the class that will handle the output for this block.
		$classname	= Styles\Blocks::class;
		$defaults   = [
			'core/cover' 		=> Styles\Blocks\Cover::class,
			'core/media-text' 	=> Styles\Blocks\Media::class,
			'core/button' 		=> Styles\Blocks\Button::class,
			'core/image' 		=> Styles\Blocks\Image::class,
			'core/spacer' 		=> Styles\Blocks\Spacer::class,
			'core/column' 		=> Styles\Blocks\Column::class,
			'core/separator' 	=> Styles\Blocks\Separator::class,
			'core/pullquote' 	=> Styles\Blocks\PullQuote::class
		];

		$output_classes = apply_filters( 'wecodeart/filter/gutenberg/styles/blocks', $defaults );

		if ( array_key_exists( $block['blockName'], $output_classes ) ) {
			$classname = $output_classes[ $block['blockName'] ];
		}
		
		if( class_exists( $classname ) ) {
			$obj = new $classname( $block );
	
			return $obj->get_styles();
		};
	}
}
