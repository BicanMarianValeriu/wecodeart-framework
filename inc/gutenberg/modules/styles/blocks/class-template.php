<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg CSS Frontend
 * @copyright   Copyright (c) 2023, WeCodeArt Framework
 * @since		6.2.3
 * @version		6.3.2
 */

namespace WeCodeArt\Gutenberg\Modules\Styles\Blocks;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Gutenberg\Modules\Styles\Processor;
use function WeCodeArt\Functions\get_prop;

/**
 * Block CSS Processor
 */
class Template extends Processor {
	/**
	 * Parses an output and creates the styles array for it.
	 *
	 * @return 	void
	 */
	protected function process_extra(): void {
		$declarations = [];

		// Gap
		if( $gap = get_prop( $this->attrs, [ 'style', 'spacing', 'blockGap' ] ) ) {	
			if ( is_array( $gap ) ) {
				$gap_y	= get_prop( $gap, [ 'top' ] );
				$gap_x	= get_prop( $gap, [ 'left' ] );

				// Is WP way of saved color
				if( strpos( $gap_x, 'var:preset|spacing' ) !== false ) {
					$gap_x = explode( '|', $gap_x );
					$gap_x = sprintf( 'var(--wp--preset--spacing--%s)', end( $gap_x ) );
				}

				// Is WP way of saved color
				if( strpos( $gap_y, 'var:preset|spacing' ) !== false ) {
					$gap_y = explode( '|', $gap_y );
					$gap_y = sprintf( 'var(--wp--preset--spacing--%s)', end( $gap_y ) );
				}

				$declarations['--wp--style--block-gap'] = $gap_x;

				if( $gap_y !== $gap_x ) {
					$declarations['grid-row-gap'] = $gap_y;
				}
			} else {
				// Is WP way of saved color
				if( strpos( $gap, 'var:preset|spacing' ) !== false ) {
					$gap = explode( '|', $gap );
					$gap = sprintf( 'var(--wp--preset--spacing--%s)', end( $gap ) );
				}
				$declarations['--wp--style--block-gap'] = $gap;
			}
		}

		if( ! empty( $declarations ) ) {
			$this->add_declarations( $declarations );
		}
	}
}