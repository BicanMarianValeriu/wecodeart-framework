<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg CSS Frontend
 * @copyright   Copyright (c) 2022, WeCodeArt Framework
 * @since		5.0.0
 * @version		5.4.8
 */

namespace WeCodeArt\Gutenberg\Modules\Styles\Blocks;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Gutenberg\Modules\Styles\Blocks as Base;
use function WeCodeArt\Functions\get_prop;

/**
 * Block CSS Processor
 */
class Social extends Base {
	/**
	 * Parses an output and creates the styles array for it.
	 *
	 * @return 	null
	 */
	protected function process_extra() {
		$output 			= [];
		$output['element'] 	= join( '>', [ $this->element . ':not(.is-style-logos-only)', '.wp-block-social-link', 'a' ] );

		$classnames = explode( ' ', get_prop( $this->attrs, 'className', '' ) );

		if( in_array( 'is-style-logos-only', $classnames ) ) {
			$output['element'] 	= join( '>', [ $this->element . '.is-style-logos-only', '.wp-block-social-link', 'a' ] );
		}

		// Background Color 
		if ( $value = get_prop( $this->attrs, 'customIconBackgroundColor' ) ) {
			$this->output[] = wp_parse_args( [
				'property' 	=> 'background-color',
				'value'	  	=> $value,
			], $output );
		} else if ( $value = get_prop( $this->attrs, 'iconBackgroundColor' ) ) {
			$this->output[] = wp_parse_args( [
				'property' 	=> 'background-color',
				'value'	  	=> sprintf( 'var(--wp--preset--color--%s)', $value )
			], $output );
		}

		// Icon color
		if ( $value = get_prop( $this->attrs, 'customIconColor' ) ) {
			$this->output[] = wp_parse_args( [
				'property' 	=> 'color',
				'value'	  	=> $value,
			], $output );
		} else if ( $value = get_prop( $this->attrs, 'iconColor' ) ) {
			$this->output[] = wp_parse_args( [
				'property' 	=> 'color',
				'value'	  	=> sprintf( 'var(--wp--preset--color--%s)', $value )
			], $output );
		}

		// Size
		if ( $value = get_prop( $this->attrs, 'size' ) ) {
			$value = explode( '-', $value ); 
			$this->output[] = wp_parse_args( [
				'property' 	=> 'font-size',
				'value'	  	=> sprintf( 'var(--wp--preset--font-size--%s)', $value[1] )
			], $output );
		}
	}
}