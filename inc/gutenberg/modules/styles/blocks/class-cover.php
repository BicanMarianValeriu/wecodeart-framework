<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg CSS Frontend
 * @copyright   Copyright (c) 2023, WeCodeArt Framework
 * @since		5.0.0
 * @version		6.3.3
 */

namespace WeCodeArt\Gutenberg\Modules\Styles\Blocks;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Support\Styles\Property\Focal;
use WeCodeArt\Support\Styles\Property\Background;
use WeCodeArt\Gutenberg\Modules\Styles;
use WeCodeArt\Gutenberg\Modules\Styles\Processor;
use function WeCodeArt\Functions\get_prop;
// use function WeCodeArt\Functions\get_placeholder_source;

/**
 * Block CSS Processor
 */
class Cover extends Processor {
	/**
	 * Parses an output and creates the styles array for it.
	 *
	 * @return 	void
	 */
	protected function process_extra(): void {		
		// Block Attributes
		$declarations	= [];
		$has_parallax	= get_prop( $this->attrs, 'hasParallax' );

		if ( $value = get_prop( $this->attrs, 'minHeight' ) ) {
			$declarations['min-height'] = $value . get_prop( $this->attrs, 'minHeightUnit', 'px' );
		}
			
		// Background image 
		// if ( $value = get_prop( $this->attrs, 'url' ) ) {
		// 	$declarations['background-image'] = ( new Background( $value ) )->get_value();
		// }

		// if( get_prop( $this->attrs, 'useFeaturedImage' ) ) {
		// 	$placeholder	= get_prop( wecodeart_config( 'placeholder', [] ), [ 'src' ], '' );
		// 	$background		= ( new Background( get_post_thumbnail_id() ?: $placeholder ) )->get_value();

		// 	// Temporary as safecss_filter_attr does not allow data urls.
		// 	$handle = 'wp-style-engine-' . Styles::CONTEXT;
		// 	$style 	= $this->get_selector() . '{background-image:' . $background . '}';
		// 	add_action( 'wp_enqueue_scripts', static fn() => wp_add_inline_style( $handle, $style ) );
		// }
		
		$this->add_declarations( $declarations );

		// Overlay solid color
		// if ( $value = get_prop( $this->attrs, 'customOverlayColor' ) ) {
		// 	$this->add_declarations( [
		// 		'background-color' => $value
		// 	], $this->get_selector( '>.wp-block-cover__background' ) );
		// }

		// // Overlay gradient
		// if ( $value = get_prop( $this->attrs, 'customGradient' ) ) {
		// 	$this->add_declarations( [
		// 		'background-image' => $value
		// 	], $this->get_selector( '>.wp-block-cover__background' ) );
		// }

		// // Focal Selector
		// if ( $value = get_prop( $this->attrs, 'focalPoint' ) ) {
		// 	$this->add_declarations( [
		// 		'object-position' => ( new Focal( $value ) )->get_value()
		// 	], join( ', ', [
		// 		$this->get_selector( '>.wp-block-cover__image-background' ),
		// 		$this->get_selector( '>.wp-block-cover__video-background' )
		// 	] ) );
		// }
	}

	/**
	 * Additional selectors to remove styles from.
	 *
	 * @return 	array
	 */
	// public function remove_style(): array {
	// 	return [
	// 		[ 'class_name' => 'wp-block-cover__background' ],
	// 		[ 'class_name' => 'wp-block-cover__image-background' ],
	// 		[ 'class_name' => 'wp-block-cover__video-background' ]
	// 	];
	// }
}