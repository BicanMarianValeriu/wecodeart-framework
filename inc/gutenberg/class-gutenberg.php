<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg
 * @copyright   Copyright (c) 2019, WeCodeArt Framework
 * @since		4.0.3
 * @version		4.0.3
 */

namespace WeCodeArt;

defined( 'ABSPATH' ) || exit();

/**
 * Handles Gutenberg Theme Functionality.
 */
class Gutenberg {

	use \WeCodeArt\Singleton;
	use \WeCodeArt\Core\Scripts\Base;

	/**
	 * Class Init.
	 *
	 * @return void
	 */
	public function init() {
		// Editor Assets.
		add_action( 'enqueue_block_editor_assets', 	[ $this, 'editor_assets' ] );

		// Frontend Assets.
		add_action( 'wp_enqueue_scripts', 			[ $this, 'frontend_assets' ], 20 );

		// Block Categories.
		add_filter( 'block_categories', 			[ $this, 'block_category' ], 10, 1 );

		// Editor Settings.
		add_filter( 'block_editor_settings', 		[ $this, 'block_editor_settings' ], 10, 2 );
		
		// Modules
		Gutenberg\Modules\CSS::get_instance();
		Gutenberg\Modules\Page::get_instance();
		Gutenberg\Modules\Title::get_instance();
		Gutenberg\Modules\Classes::get_instance();
	}

	/**
	 * Gurenberg WCA Category
	 *
	 * @param  array $categories - Current guttenberg cats.
	 *
	 * @return array
	 */
	public function block_category( $categories ) {
		return array_merge( $categories, [ [
			'slug' 	=> 'wca',
			'title' => __( 'WeCodeArt', wecodeart_config( 'textdomain' ) ),
		] ] );
	}

	/**
	 * Add new block editor settings for custom classes.
	 *
	 * @param array  $settings 	The editor settings.
	 * @param object $post 		The post being edited.
	 *
	 * @return array Returns updated editors settings.
	 */
	public function block_editor_settings( $settings, $post ) {
		if ( ! isset( $settings[ 'wecodeart' ] ) ) {
			$settings[ 'wecodeart' ] = apply_filters( 'wecodeart/filter/gutenberg/settings', [], $post );
		}

		return $settings;
	}

	/**
	 * Editor only.
	 *
	 * @return  void
	 */
	public function editor_assets() {
		// Gutenberg editor assets.
		wp_enqueue_style( 	$this->make_handle(),	$this->get_asset( 'css', 'editor' ), 	[], wecodeart( 'version' ) );
		wp_enqueue_script( 	$this->make_handle(),	$this->get_asset( 'js', 'editor' ), 	[
			'wp-blocks',
			'wp-i18n',
			'wp-element',
			'wp-plugins',
			'wp-components',
			'wp-compose',
			'wp-edit-post',
			'wp-api',
			'wp-editor',
			'wp-hooks',
			'lodash'
		], wecodeart( 'version' ) );

		// CodeMirror assets.
		wp_enqueue_code_editor( array( 'type' => 'text/html' ) );
		wp_add_inline_script( 'wp-codemirror', 'window.CodeMirror = wp.CodeMirror;' );
		wp_enqueue_script(
			$this->make_handle( 'codemirror-fs' ), 
			get_template_directory_uri() . '/inc/gutenberg/assets/codemirror-fullscreen.js',
			[ 'wp-codemirror' ],
			wecodeart( 'version' )
		);

		// Inline
		$global = array(
			'theme' => array(
				'version' => wecodeart( 'version' ),
			),
			'supports'   => array(
				'colorPalette' => get_theme_support( 'wecodeart-color-palette-classnames' ),
			),
		);
		wp_add_inline_script( $this->make_handle(), 'window.wecodeartInfo = ' . wp_json_encode( $global ) . ';', 'before' );
	}

	/**
	 * Front End Assets
	 * 
	 * @since   4.0.3
	 * @access  public
	 */
	public function frontend_assets() {
		wp_deregister_style( 'wp-block-library' );
		wp_dequeue_style( 'wp-block-library' ); 
		wp_deregister_style( 'wp-block-library-theme' );
		wp_dequeue_style( 'wp-block-library-theme' ); 
	}

	/**
	 * Parse Blocks for Gutenberg and WordPress 5.0
	 * 
	 * @since   4.0.3
	 * @access  public
	 */
	public static function parse_blocks( $content ) {
		if ( ! function_exists( 'parse_blocks' ) ) {
			return gutenberg_parse_blocks( $content );
		}

		return parse_blocks( $content );
	}
}
