<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg
 * @copyright   Copyright (c) 2022, WeCodeArt Framework
 * @since		4.0.3
 * @version		5.5.5
 */

namespace WeCodeArt;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Config\Traits\Asset;
use function WeCodeArt\Functions\get_prop;

/**
 * Handles Gutenberg Theme Functionality.
 */
class Gutenberg {

	use Singleton;
	use Asset;

	/**
	 * The Gutenberg Config.
	 *
	 * @var config[]
	 */
	protected $config = [];

	/**
	 * Class Init.
	 *
	 * @return void
	 */
	public function init() {
		// Setup Config
		$this->config = wecodeart_config( 'gutenberg', [] );

		// Block Categories.
		add_filter( 'block_categories_all',			[ $this, 'block_category' 			], 10, 1 );
		
		// Editor Settings.
		add_filter( 'block_editor_settings_all',	[ $this, 'block_editor_settings' 	], 10, 2 );
		
		// Editor Assets.
		add_action( 'enqueue_block_editor_assets', 	[ $this, 'block_editor_assets' 		], 10, 1 );
		
		// Theme Support.
		add_action( 'after_setup_theme', 			[ $this, 'theme_support' ], 100 );

		// Admin.
		add_action( 'admin_init', 					[ $this, 'admin_init' ] );

		// Skip links.
		remove_action( 'wp_footer', 				'the_block_template_skip_link' );
		add_action( 'wp_footer', 					[ $this, 'the_skip_link' ] );

		// Modules.
		Gutenberg\Modules::get_instance();
		
		// Blocks.
		Gutenberg\Blocks::get_instance();
	}

	/**
	 * Gurenberg WCA Category
	 *
	 * @param  array $categories - Current guttenberg cats.
	 *
	 * @return array
	 */
	public function block_category( $categories ) {
		return array_merge( $categories, [ [
			'slug' 	=> 'wca',
			'title' => __( 'WeCodeArt', 'wecodeart' ),
		] ] );
	}

	/**
	 * Add new block editor settings for custom classes.
	 *
	 * @param array  $settings 	The editor settings.
	 * @param object $post 		The post being edited.
	 *
	 * @return array Returns updated editors settings.
	 */
	public function block_editor_settings( $settings, $post ) {
		if ( ! isset( $settings[ 'wecodeart' ] ) ) {
			$settings[ 'wecodeart' ] = apply_filters( 'wecodeart/filter/gutenberg/settings', [], $post );
		}

		return $settings;
	}

	/**
	 * Editor only.
	 *
	 * @return  void
	 */
	public function block_editor_assets() {
		// Inline
		$data = apply_filters( 'wecodeart/filter/gutenberg/localize', [
			'theme' 	=> [
				'name'		=> wecodeart( 'name' ),
				'version' 	=> wecodeart( 'version' )
			],
			'restrictedBlocks' => apply_filters( 'wecodeart/filter/gutenberg/restricted', [
				'core/archives',
				'core/block',
				'core/freeform',
				'core/missing',
				'core/more',
				'core/nextpage',
				'core/pattern',
				'core/shortcode',
			] ),
		] );
		
		wp_register_script( $this->make_handle( 'inline' ), '' );
		wp_enqueue_script( $this->make_handle( 'inline' ) );
		wp_add_inline_script( $this->make_handle( 'inline' ), 'window.wecodeartGutenberg = ' . wp_json_encode( $data ) . ';', 'before' );

		// Gutenberg editor assets.
		wp_enqueue_script( 	$this->make_handle(),	$this->get_asset( 'js', 'gutenberg/editor' ), 	[
			'wp-blocks',
			'wp-i18n',
			'wp-element',
			'wp-plugins',
			'wp-components',
			'wp-compose',
			'wp-edit-post',
			'wp-api',
			'wp-editor',
			'wp-hooks',
			'lodash',
			$this->make_handle( 'inline' )
		], wecodeart( 'version' ) );
		
		// CodeMirror assets.
		wp_enqueue_code_editor( [ 'type' => 'text/html' ] );
		wp_add_inline_script( 'wp-codemirror', 'window.CodeMirror = wp.CodeMirror;' );
		wp_enqueue_script(
			$this->make_handle( 'codemirror-fs' ), 
			$this->get_asset( 'js', 'admin/codemirror-fs' ),
			[ 'wp-codemirror' ],
			wecodeart( 'version' )
		);
		
		$code_mirror = ''; // Adds a border to CodeMirror to match WP and fixes height.
		$code_mirror .= '.CodeMirror.CodeMirror-wrap{height:auto;margin-bottom:1rem;border:1px solid #949494;z-index:0;}';
		wp_add_inline_style( 'wp-editor', $code_mirror );
	}

	/**
	 * Support
	 *
	 * @access public
	 */
	public function theme_support() {
		$support = get_prop( $this->config, 'support', [] );

		// Theme Support
		foreach( $support as $feature => $value ) {
			if( $value === 'remove' ) {
				remove_theme_support( $feature );
				continue;
			};
			add_theme_support( $feature, $value );
		}
		
		// Editor Style
		add_editor_style( $this->get_asset( 'css', 'frontend' ) );
		add_editor_style( $this->get_asset( 'css', 'gutenberg/editor' ) );
	}

	/**
	 * Removes the Site Editor link from the admin.
	 *
	 * @return void
	 */
	public function admin_init() {
		// Developer mode will allways have access to FSE.
		if( wecodeart_if( 'is_dev_mode' ) ) return;

		// Developers can turn off FSE admin (eg: on production).
		if( ! get_prop( wecodeart_config( 'gutenberg' ), 'editor' ) ) {
			remove_submenu_page( 'themes.php', 'gutenberg-edit-site' );
		}
	}

	/**
	 * Print the skip-link script & styles.
	 *
	 * @todo Remove this when WP 5.8 is the minimum required version.
	 *
	 * @return void
	 */
	public function the_skip_link() {
		// This is a block theme so we skip the other check.
		// Early exit if not a block template.
		global $_wp_current_template_content;
		if ( ! $_wp_current_template_content ) {
			return;
		}
		?>
		<?php
		/**
		 * Print the skip-link script.
		 */
		?>
		<script>
		(function() {
			var skipLinkTarget = document.querySelector( 'main' ),
				sibling,
				skipLinkTargetID,
				skipLink;

			// Early exit if a skip-link target can't be located.
			if ( ! skipLinkTarget ) {
				return;
			}

			// Get the site wrapper.
			// The skip-link will be injected in the beginning of it.
			sibling = document.querySelector( '.wp-site-blocks' );

			// Early exit if the root element was not found.
			if ( ! sibling ) {
				return;
			}

			// Get the skip-link target's ID, and generate one if it doesn't exist.
			skipLinkTargetID = skipLinkTarget.id;
			if ( ! skipLinkTargetID ) {
				skipLinkTargetID = 'wp--skip-link--target';
				skipLinkTarget.id = skipLinkTargetID;
			}

			// Create the skip link.
			skipLink = document.createElement( 'a' );
			skipLink.classList.add( 'skip-link', 'screen-reader-text' );
			skipLink.href = '#' + skipLinkTargetID;
			skipLink.innerHTML = '<?php esc_html_e( 'Skip to content', 'wecodeart' ); ?>';

			// Inject the skip link.
			sibling.parentElement.insertBefore( skipLink, sibling );
		}());
		</script>
		<?php
	}
}