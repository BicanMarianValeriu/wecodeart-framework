<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg
 * @copyright   Copyright (c) 2021, WeCodeArt Framework
 * @since		4.0.3
 * @version		5.0.0
 */

namespace WeCodeArt;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Core\Scripts;
use WeCodeArt\Core\Content;
use function WeCodeArt\Functions\get_prop;

/**
 * Handles Gutenberg Theme Functionality.
 */
class Gutenberg {

	use Singleton;
	use Scripts\Base;

	/**
	 * The Gutenberg Config.
	 *
	 * @var config[]
	 */
	protected $config = [];

	/**
	 * Class Init.
	 *
	 * @return void
	 */
	public function init() {
		// Setup Config
		$this->config = wecodeart_config( 'gutenberg', [] );

		// Block Categories.
		add_filter( 'block_categories_all',			[ $this, 'block_category' 			], 10, 1 );
		
		// Editor Settings.
		add_filter( 'block_editor_settings_all',	[ $this, 'block_editor_settings' 	], 10, 2 );
		
		// Editor Assets.
		add_action( 'enqueue_block_editor_assets', 	[ $this, 'block_editor_assets' 		], 10, 1 );
		
		// Theme Support.
		add_action( 'after_setup_theme', 			[ $this, 'theme_support' ], 100 );

		// Modules.
		Gutenberg\Modules::get_instance();
		
		// Blocks.
		Gutenberg\Blocks::get_instance();
	}

	/**
	 * Gurenberg WCA Category
	 *
	 * @param  array $categories - Current guttenberg cats.
	 *
	 * @return array
	 */
	public function block_category( $categories ) {
		return array_merge( $categories, [ [
			'slug' 	=> 'wca',
			'title' => __( 'WeCodeArt', 'wecodeart' ),
		] ] );
	}

	/**
	 * Add new block editor settings for custom classes.
	 *
	 * @param array  $settings 	The editor settings.
	 * @param object $post 		The post being edited.
	 *
	 * @return array Returns updated editors settings.
	 */
	public function block_editor_settings( $settings, $post ) {
		if ( ! isset( $settings[ 'wecodeart' ] ) ) {
			$settings[ 'wecodeart' ] = apply_filters( 'wecodeart/filter/gutenberg/settings', [], $post );
		}

		return $settings;
	}

	/**
	 * Editor only.
	 *
	 * @return  void
	 */
	public function block_editor_assets() {
		// Inline
		$data = apply_filters( 'wecodeart/filter/gutenberg/localize', [
			'theme' 	=> [
				'version' => wecodeart( 'version' )
			],
			'restrictedBlocks' => apply_filters( 'wecodeart/filter/gutenberg/restricted', [
				'core/freeform',
				'core/shortcode',
				'core/nextpage',
				'core/archives',
				'core/calendar',
				'core/tag-cloud',
				'core/latest-comments',
				'core/block',
			] ),
			'contentModules' => wp_list_pluck( Content::content_modules(), 'label' ),
		] );
		wp_register_script( $this->make_handle( 'inline' ), '' );
		wp_enqueue_script( $this->make_handle( 'inline' ) );
		wp_add_inline_script( $this->make_handle( 'inline' ), 'window.wecodeartGutenberg = ' . wp_json_encode( $data ) . ';', 'before' );

		// Gutenberg editor assets.
		wp_enqueue_style( 	$this->make_handle(),	$this->get_asset( 'css', 'gutenberg' ),	[], wecodeart( 'version' ) );
		wp_enqueue_script( 	$this->make_handle(),	$this->get_asset( 'js', 'gutenberg' ), 	[
			'wp-blocks',
			'wp-i18n',
			'wp-element',
			'wp-plugins',
			'wp-components',
			'wp-compose',
			'wp-edit-post',
			'wp-api',
			'wp-editor',
			'wp-hooks',
			'lodash',
			$this->make_handle( 'inline' )
		], wecodeart( 'version' ) );
		
		// CodeMirror assets.
		wp_enqueue_code_editor( [ 'type' => 'text/html' ] );
		wp_add_inline_script( 'wp-codemirror', 'window.CodeMirror = wp.CodeMirror;' );
		wp_enqueue_script(
			$this->make_handle( 'codemirror-fs' ), 
			$this->get_asset( 'js', 'codemirror-fs' ),
			[ 'wp-codemirror' ],
			wecodeart( 'version' )
		);
	}

	/**
	 * Support
	 *
	 * @access public
	 */
	public function theme_support() {
		$support = get_prop( $this->config, 'support', [] );

		// Theme Support
		foreach( $support as $feature => $value ) {
			if( $value === 'remove' ) {
				remove_theme_support( $feature );
				continue;
			};
			add_theme_support( $feature, $value );
		}

		// Properly dequeue Blocks Styles - since setting support to false doesn't
		if( get_prop( $support, 'wp-block-styles', 'remove' ) === 'remove' ) {
			add_action( 'wp_print_styles', function() {
				wp_dequeue_style( 'wp-block-library' ); 		// WordPress Core
    			wp_dequeue_style( 'wp-block-library-theme' ); 	// WordPress Core
			}, 100 );
		}
	}
}
