<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg\Blocks
 * @copyright   Copyright (c) 2021, WeCodeArt Framework
 * @since		5.0.0
 * @version		5.3.3
 */

namespace WeCodeArt\Gutenberg\Blocks\Widgets;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Gutenberg\Blocks\Dynamic;
use function WeCodeArt\Functions\get_prop;

/**
 * Gutenberg Search block.
 */
class Search extends Dynamic {

	use Singleton;

	/**
	 * Block namespace.
	 *
	 * @var string
	 */
	protected $namespace = 'core';

	/**
	 * Block name.
	 *
	 * @var string
	 */
	protected $block_name = 'search';

	/**
	 * Shortcircuit Register
	 */
	public function register() {
		add_filter( 'render_block_core/search', [ $this, 'render' ], 10, 2 );
	}

	/**
	 * Dynamically renders the `core/search` block.
	 *
	 * @param 	string 	$content 	The block markup.
	 * @param 	array 	$block 		The parsed block.
	 *
	 * @return 	string 	The block markup.
	 */
	public function render( $content = '', $block = [], $data = null ) {
		static $instance_id = 0;
				
		$attributes = get_prop( $block, 'attrs', [] );
		$attributes = wp_parse_args( $attributes, [
			'label'      => __( 'Search', 'wecodeart' ),
			'buttonText' => __( 'Search', 'wecodeart' ),
		] );

		$input_id 	= 'wp-block-search__input-' . ++$instance_id;
		$form_class = [ 'wp-block-search__form', 'needs-validation' ];

		if( get_prop( $attributes, 'widthUnit', 'px' ) === '%' ) {
			if( in_array( get_prop( $attributes, 'width' ), [ 25, 50, 75, 100 ] ) ) {
			   $form_class[] = 'w-' . get_prop( $attributes, 'width' );
			}
		}

		return wecodeart( 'markup' )::wrap( 'search-block', [
			[
				'tag' 	=> 'div',
				'attrs' => [
					'class' => $this->get_classname( $attributes )
				]
			],
			[
				'tag' 	=> 'form',
				'attrs' => [
					'class'		=> join( ' ', $form_class ),
					'role'		=> 'search',
					'method' 	=> 'get',
					'action' 	=> home_url( '/' ),
					'novalidate'=> 'novalidate',
				]
			],
		], function() use( $attributes, $input_id ) {
			$wrapper   = [ 'wp-block-search__fields' ];
			$wrapper[] = get_prop( $attributes, 'buttonPosition' ) === 'button-inside' ? 'input-group' : '';
			// Add Label
			if ( get_prop( $attributes, 'showLabel' ) !== false && ! empty( $label = get_prop( $attributes, 'label' ) ) ) {
			?>
			<label class="form-label" for="<?php echo esc_attr( $input_id ); ?>"><?php echo esc_html( $label ); ?></label>
			<?php
			}
			?>
			<div class="<?php echo esc_attr( implode( ' ', array_filter( $wrapper ) ) ); ?>">
			<?php

			// Add search input
			wecodeart_input( 'search', [
				'attrs' => [
					'id' 			=> $input_id,
					'name'			=> 's',
					'class' 		=> $this->get_classname( $attributes, 'field' ),
					'value'			=> get_search_query(),
					'placeholder' 	=> get_prop( $attributes, 'placeholder', false ),
					'required' 		=> true,
				]
			] );

			// Maybe add submit button
			if ( get_prop( $attributes, 'buttonPosition', 'button-outside' ) !== 'no-button' ) {
				$icon  = get_prop( $attributes, 'buttonUseIcon', false );
				$label = $icon ? wecodeart( 'markup' )->SVG::compile( 'search' ) : get_prop( $attributes, 'buttonText' );

				wecodeart_input( 'button', [
					'label' => $label,
					'attrs' => [
						'type'	=> 'submit',
						'class' => $this->get_classname( $attributes, 'button' ),
					]
				] );
			}
			?>
			</div>
			<?php
		}, [], false );
	}

	/**
	 * Builds the correct top level classnames for the 'core/search' block.
	 *
	 * @param 	array 	$attributes The block attributes.
	 *
	 * @return 	string 	The classnames used in the block.
	 */
	public function get_classname( $attributes, $wrapper = 'wrapper' ) {
		$classnames = [];

		if( $wrapper === 'wrapper' ) {
			$classnames[] = 'wp-block-search';
			$position = get_prop( $attributes, 'buttonPosition', 'button-outside' );
			$classnames[] = 'wp-block-search--' . $position;
	
			if ( get_prop( $attributes, 'buttonUseIcon', false ) ) {
				if ( 'no-button' !== $position ) {
					$classnames[] = 'wp-block-search--with-icon';
				}
			}
		}

		if( $wrapper === 'button' ) {
			$classnames = [ 'wp-block-search__button' ];
			if( $value = get_prop( $attributes, [ 'backgroundColor' ] ) ) {
				$classnames[] = 'has-' . $value . '-background-color';
			} else if( $value = get_prop( $attributes, [ 'borderColor' ] ) ) {
				$classnames[] = 'border';
				$classnames[] = 'border-' . $value;
			}

			if( $value = get_prop( $attributes, [ 'textColor' ] ) ) {
				$classnames[] = 'has-text-color';
				$classnames[] = 'has-' . $value . '-color';
			}
		}
		
		if( $wrapper === 'field' ) {
			$classnames = [ 'wp-block-search__input', 'form-control' ];
			if( $value = get_prop( $attributes, [ 'borderColor' ] ) ) {
				$classnames[] = 'border';
				$classnames[] = 'border-' . $value;
			}
		}

		return implode( ' ', $classnames );
	}

	/**
	 * Block styles
	 *
	 * @return 	string 	The block styles.
	 */
	public function styles() {
		return "
		.wp-block-search {
			margin-bottom: 1rem;
		}
		.wp-block-search--button-outside .wp-block-search__button {
			margin-left: .5rem;
		}
		.wp-block-search__fields {
			display: flex;
		}
		.wp-block-search__button {
			display: inline-block;
			vertical-align: middle;
			padding: 0.5rem 0.75rem;
			color: var(--wp--white);
			font-size: 1rem;
			font-weight: 400;
			text-align: center;
			line-height: 1.5;
			background-color: var(--wp--dark);
			border: 1px solid transparent;
			border-radius: .25rem;
			transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
			user-select: none;
			cursor: pointer;
			margin-left: 1rem;
		}
		.navbar .wp-block-search {
			margin-bottom: 0;
		}
		";
	}
}
