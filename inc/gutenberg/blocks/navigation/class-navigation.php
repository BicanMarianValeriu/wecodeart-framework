<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg\Blocks
 * @copyright   Copyright (c) 2022, WeCodeArt Framework
 * @since		5.0.0
 * @version		5.4.8
 */

namespace WeCodeArt\Gutenberg\Blocks;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Config\Traits\Asset;
use WeCodeArt\Gutenberg\Blocks\Dynamic;
use function WeCodeArt\Functions\get_prop;

/**
 * Gutenberg Navigation block.
 */
class Navigation extends Dynamic {

	use Singleton;
	use Asset;

	/**
	 * Block namespace.
	 *
	 * @var string
	 */
	protected $namespace = 'core';

	/**
	 * Block name.
	 *
	 * @var string
	 */
	protected $block_name = 'navigation';

	/**
	 * Shortcircuit Register
	 */
	public function register() {
		add_filter( 'block_type_metadata_settings', [ $this, 'filter_render' ], 10, 2 );
	}

	/**
	 * Filter navigation markup
	 *
	 * @param	array 	$settings
	 * @param	array 	$data
	 */
	public function filter_render( $settings, $data ) {
		if ( $this->get_block_type() === $data['name'] ) {
			$settings = wp_parse_args( [
				'render_callback' => [ $this, 'render' ]
			], $settings );
		}
		
		return $settings;
	}

	/**
	 * Dynamically renders the `core/navigation` block.
	 *
	 * @param 	array 	$attributes The block attributes.
	 * @param 	string 	$content 	The block content.
	 * @param 	array 	$block 		The block data.
	 *
	 * @return 	string 	The block markup.
	 */
	public function render( $attributes = [], $content = '', $block = null ) {
		if ( $color = get_prop( $attributes, 'rgbTextColor' ) ) {
			$attributes['customTextColor'] = $color;
		}
		
		if ( $color = get_prop( $attributes, 'rgbBackgroundColor' ) ) {
			$attributes['customBackgroundColor'] = $color;
		}

		unset( $attributes['rgbTextColor'], $attributes['rgbBackgroundColor'] );

		$inner_blocks = $block->inner_blocks;
		
		// Ensure that blocks saved with the legacy ref attribute name (navigationMenuId) continue to render.
		if ( array_key_exists( 'navigationMenuId', $attributes ) ) {
			$attributes['ref'] = $attributes['navigationMenuId'];
		}
		
		// If:
		// - the gutenberg plugin is active
		// - `__unstableLocation` is defined
		// - we have menu items at the defined location
		// - we don't have a relationship to a `wp_navigation` Post (via `ref`).
		// ...then create inner blocks from the classic menu assigned to that location.
		// if (
		// 	defined( 'IS_GUTENBERG_PLUGIN' ) && IS_GUTENBERG_PLUGIN &&
		// 	array_key_exists( '__unstableLocation', $attributes ) &&
		// 	! array_key_exists( 'ref', $attributes ) &&
		// 	! empty( block_core_navigation_get_menu_items_at_location( $attributes['__unstableLocation'] ) )
		// ) {
		// 	$menu_items 	= block_core_navigation_get_menu_items_at_location( $attributes['__unstableLocation'] );

		// 	if ( empty( $menu_items ) ) {
		// 		return '';
		// 	}
	
		// 	$sorted_items 	= block_core_navigation_sort_menu_items_by_parent_id( $menu_items );
		// 	$parsed_blocks 	= block_core_navigation_parse_blocks_from_menu_items( $sorted_items[0], $sorted_items );
		// 	$inner_blocks 	= new \WP_Block_List( $parsed_blocks, $attributes );
		// }

		// Load inner blocks from the navigation post.
		if ( array_key_exists( 'ref', $attributes ) ) {
			$navigation_post = get_post( $attributes['ref'] );
			
			if ( isset( $navigation_post ) ) { 
				$parsed_blocks = parse_blocks( $navigation_post->post_content );
				$parsed_blocks = block_core_navigation_filter_out_empty_blocks( $parsed_blocks );
				
				$inner_blocks = new \WP_Block_List( $parsed_blocks, $attributes );
			}
		}
		
		// If there are no inner blocks then fallback to rendering an appropriate fallback.
		if ( empty( $inner_blocks ) ) {
			$parsed_blocks 	= block_core_navigation_get_fallback_blocks();

			// Fallback might have been filtered so do basic test for validity.
			if ( empty( $parsed_blocks ) || ! is_array( $parsed_blocks ) ) {
				return '';
			}

			$inner_blocks = new \WP_Block_List( $parsed_blocks, $attributes );
		}

		$block_id	= uniqid();

		// Styles
		if( ! wp_style_is( $this->make_handle() ) ) {
			wp_enqueue_style( $this->make_handle(), $this->get_asset( 'css', 'blocks/navigation' ), [
				'wecodeart-support-assets'
			], wecodeart( 'version' ) );
		}

		return wecodeart( 'markup' )::wrap( 'navbar', [ [
			'tag' 	=> 'nav',
			'attrs'	=> $this->get_wrapper_attributes( $attributes )
		] ], function( $attributes, $inner_blocks ) use ( $block_id ) {

			// Navbar List HTML
			$html = wecodeart( 'markup' )::wrap( 'navbar-nav', [ [
				'tag' 	=> 'ul',
				'attrs' => [
					'class' => 'wp-block-navigation__container nav navbar-nav',
				]
			] ], function( $inner_blocks ) {
				foreach( $inner_blocks as $inner_block ) echo $this->render_menu_block( $inner_block );
			}, [ $inner_blocks ], false );

			// Is responsive? Render in offcanvas container
			if( get_prop( $attributes, 'overlayMenu' ) !== 'never' ) {

				// Scripts
				if( ! wp_script_is( $this->make_handle() ) ) {
					wp_enqueue_script( $this->make_handle(), $this->get_asset( 'js', 'blocks/navigation' ), [
						'wecodeart-support-assets'
					], wecodeart( 'version' ), true );
				}

				// Toggler
				wecodeart_template( 'general/toggler', [
					'id'		=> 'navbar-' . $block_id,
					'toggle' 	=> 'offcanvas',
				] );

				// OffCanvas
				wecodeart_template( 'general/offcanvas', [
					'id'		=> 'navbar-' . $block_id,
					'classes'	=> [ 'offcanvas-start' ],
					'content' 	=> $html,
				] );

				return;
			}

			// Is ok, we use the WP block rendering
			echo $html;

		}, [ $attributes, $inner_blocks ], false );
	}

	/**
	 * Renders menu item wrapper.
	 *
	 * @param 	object 	$block.
	 *
	 * @return 	string 	Rendered block with wrapper block
	 */
	public function render_menu_block( $block ) {
		$html = $block->render();
		
		// For this specific blocks, please wrap them in a <li> for valid markup
		if( in_array( get_prop( $block->parsed_block, 'blockName', '' ), [
			'core/spacer',
			'core/search',
			'core/social-links',
			'core/site-title',
			'core/site-logo',
		] ) ) {
			$classes	= [ 'wp-block-navigation-link', 'nav-item' ];
			$classes[]  = 'nav-item--' . join( '-', explode( '/', get_prop( $block->parsed_block, 'blockName' ) ) );

			return wecodeart( 'markup' )::wrap( 'nav-item', [ [
				'tag' 	=> 'li',
				'attrs'	=> [
					'class'	=> join( ' ', $classes ),
				]
			] ], $html, [], false );
		}

		return $html;
	}

	/**
	 * Get Class Color.
	 *
	 * @param 	array 	$context	Block Context
	 * @param 	string 	$key		Attribute name
	 * 
	 * @return 	string 	HEX color code for pallete class
	 */
	public static function get_class_color( $context, $key = 'background' ) {
		$palette 	= wecodeart_json( [ 'settings', 'color', 'palette', 'core' ], [] );
		$palette 	= wecodeart_json( [ 'settings', 'color', 'palette', 'theme' ], $palette );
		$palette 	= wecodeart_json( [ 'settings', 'color', 'palette', 'user' ], $palette );
				
		$_keys 		= [
			'overlay-background' 	=> 'overlayBackgroundColor',
			'overlay-text' 			=> 'overlayTextColor',
			'custom-background'		=> 'customBackgroundColor',
			'background' 			=> 'backgroundColor',
			'text'		 			=> 'textColor',
		];

		// Real attribute name
		$attribute 	= isset( $_keys[$key] ) ? $_keys[$key] : $key;

		// Get custom
		$color 		= get_prop( $context, [ 'style', 'color', $attribute ] );
		
		// If not custom, get named
		if( $color === null ) {
			$color = get_prop( $context, $attribute, $color );
			$color = get_prop( current( wp_list_filter( $palette, [ 'slug' => $color ] ) ), 'color', false );
		}

		// If named not found, fallback to body
		if( $color === false ) {
			$styles 	= wecodeart_json( [ 'styles', 'color', $key ], '' );
			if( strpos( $styles, '#' ) === 0 ) {
				$color = $styles;
			} else {
				if( mb_strpos( $styles, '|' ) !== false ) {
					$slug = explode( '|', $styles );
					$slug = end( $slug );
				} elseif( mb_strpos( $styles, '--' ) !== false ) {
					$slug = explode( '--', $styles );
					$slug = str_replace( ')', '', end( $slug ) );
				}
				$color	= get_prop( current( wp_list_filter( $palette, [
					'slug' => $slug,
				] ) ), 'color', '#ffffff' );
			}
		}

		return $color;
	}

	/**
	 * Build an array with CSS classes and inline styles defining the colors
	 * which will be applied to the navigation markup in the front-end.
	 *
	 * @param  array $attributes 	Navigation block context.
	 * @return array  	 			CSS classes and inline styles.
	 */
	public function get_colors( $attributes ) {
		$colors = [
			'classes'   => [],
			'styles' 	=> '',
		];
	
		// Text color.
		$has_named_text_color  = get_prop( $attributes, 'textColor', false );
		$has_custom_text_color = get_prop( $attributes, 'customTextColor', false );

		// Overlays - added via CSS because of extra specificity
		
		// Background color.
		$has_named_background_color  = get_prop( $attributes, 'backgroundColor', false );
		$has_custom_background_color = get_prop( $attributes, 'customBackgroundColor', false );
	
		// If has text color.
		if ( $has_custom_text_color || $has_named_text_color ) {
			// Add has-text-color class.
			$colors['classes'][] = 'has-text-color';
		}
	
		if ( $has_named_text_color ) {
			// Add the color class.
			$colors['classes'][] = sprintf( 'has-%s-color', $has_named_text_color );
		} elseif ( $has_custom_text_color ) {
			// Add the custom color inline style.
			$colors['styles'] .= sprintf( 'color: %s;', $has_custom_text_color );
			$colors['styles'] .= sprintf( '--wp--custom--color: %s;', $has_custom_text_color );
		}
	
		// If has background color.
		if ( $has_custom_background_color || $has_named_background_color ) {
			// Add has-background class.
			$colors['classes'][] = 'has-background';
		}
	
		if ( $has_named_background_color ) {
			// Add the background-color class.
			$colors['classes'][] = sprintf( 'has-%s-background-color', $has_named_background_color );
		} elseif ( $has_custom_background_color ) {
			// Add the custom background-color inline style.
			$colors['styles'] .= sprintf( 'background-color: %s;', $has_custom_background_color );
			$colors['styles'] .= sprintf( '--wp--custom--background-color: %s;', $has_custom_background_color );
		}
	
		return $colors;
	}

	/**
	 * Build an array with CSS classes and inline styles defining the font sizes
	 * which will be applied to the navigation markup in the front-end.
	 *
	 * @param  array $attributes 	Navigation block context.
	 * @return array 				Font size CSS classes and inline styles.
	 */
	public function get_typography( $attributes ) {
		// CSS classes.
		$typography = [
			'classes'   => [],
			'styles' 	=> '',
		];

		if ( $value = get_prop( $attributes, 'fontSize' ) ) {
			// Add the font size class.
			$typography['classes'][] = sprintf( 'has-%s-font-size', $value );
		} elseif ( $value = get_prop( $attributes, 'customFontSize' ) ) {
			// Add the custom font size inline style.
			$typography['styles'] = sprintf( 'font-size: %spx;--wp--custom--font-size: %spx;', $value, $value );
		}

		return $typography;
	}

	/**
	 * Return an array of wrapper attributes.
	 * 
	 * @return 	array
	 */
	public function get_wrapper_attributes( $attributes ) {
		$colors     = $this->get_colors( $attributes );
		$typography = $this->get_typography( $attributes );
		$background = get_prop( $attributes, 'customBackgroundColor', self::get_class_color( $attributes ) );

		$classes 	= [ 'wp-block-navigation', 'navbar' ];
		$classes[] 	= ( wecodeart( 'styles' )::color_lightness( $background ) < 380 ) ? 'navbar-dark' : 'navbar-light';

		if( get_prop( $attributes, 'orientation', false ) === 'horizontal' ) {
			$classes[] = 'navbar-expand';
		}

		if( $value = get_prop( $attributes, 'overlayMenu' ) ) {
			if( $value !== 'never' ) {
				$classes 	= array_diff( $classes, [ 'navbar-expand' ] );
				if( $value === 'mobile' ) {
					$classes[] 	= $this->get_mobile_breakpoint();
				}
			}
		}
		
		if( get_prop( $attributes, 'openSubmenusOnClick', false ) === false ) {
			$classes[] 	= 'with-hover';
		}

		if( get_prop( $attributes, 'showSubmenuIcon', false ) === false ) {
			$classes[] 	= 'hide-toggle';
		}

		// Deprecated - uses flex layout support
		if( $align = get_prop( $attributes, 'itemsJustification' ) ) {
			$justify_options = [
				'left'          => 'start',
				'right'         => 'end',
				'center'        => 'center',
				'space-between' => 'space-between',
			];

			if ( array_key_exists( $align, $justify_options ) ) {
				$classes[] = 'justify-content-' . $justify_options[$align];
			}
		}
		// End deprecated

		$classes    	= array_merge( $classes, $colors['classes'], $typography['classes'] );
		$block_styles 	= get_prop( $attributes, 'styles', '' );

		return [
			'class'	=> join( ' ', array_filter( $classes ) ),
			'style'	=> $block_styles . $colors['styles'] . $typography['styles'],
		];
	}

	/**
	 * Return filter mobile breakpoint class.
	 * 
	 * @return 	array
	 */
	public function get_mobile_breakpoint() {
		return sanitize_html_class( 'navbar-expand-' . wecodeart_json( [ 'settings', 'custom', 'mobileBreakpoint' ], 'lg' ) );
	}

	/**
	 * Block styles
	 *
	 * @return 	string 	The block styles.
	 */
	public static function styles() {
		$breaks 	= wecodeart_json( [ 'settings', 'custom', 'breakpoints' ], [] );
		$filter		= explode( '-', Navigation::get_instance()->get_mobile_breakpoint() );
		$filter		= end( $filter );
		$breakpoint	= get_prop( $breaks, $filter, '992px' );

		return "
		:is(.site-header,.site-footer) .wp-block-navigation {
			padding-top: 0;
			padding-bottom: 0;
		}
		.wp-block-navigation.has-text-color .nav-link {
			color: inherit;
		}
		.wp-block-navigation .wp-block-spacer {
			width: 100%;
			height: var(--wp--spacer-width);
		}
		.wp-block-navigation.hide-toggle .dropdown-toggle::after {
			content: none;
		}
		.wp-block-navigation.with-hover .dropdown:where(:hover,:focus,:focus-within) > .dropdown-toggle ~ .dropdown-menu {
			display: block;
			visibility: visible;
			opacity: 1;
		}
		.wp-block-navigation[class*='navbar-expand-'] .offcanvas:not([aria-modal='true']) {
			width: initial;
		}
		.wp-block-navigation.navbar-dark .btn-close {
			background-color: var(--wp--white);
		}
		.wp-block-navigation .offcanvas-start .btn-close {
			margin-left: auto;
		}
		.wp-block-navigation :where(.offcanvas,.offcanvas-body) {
			justify-content: inherit;
		}
		.wp-block-navigation[class*='has-background'] :where(.offcanvas,.offcanvas-body) {
			background-color: inherit;
		}
		.wp-block-navigation-link__content {
			display: flex;
			align-items: center;
		}
		.wp-block-navigation-link__icon {
			margin-right: .5rem;
		}
		.wp-block-navigation-link__label {
			flex: 1 1 auto;
			word-break: normal;
			overflow-wrap: break-word;
		}
		.wp-block-navigation .dropdown-menu[data-bs-popper] {
			margin-top: 0;
		}
		.wp-block-navigation .dropdown-menu .dropdown-menu {
			top: 0;
			left: 100%;
		}
		.wp-block-navigation.navbar-expand-{$filter} .nav {
			gap: var(--wp--style--block-gap, .5rem) 0;
		}
		@media (min-width: $breakpoint) {
			.wp-block-navigation.navbar-expand-{$filter} .nav {
				gap: 0 var(--wp--style--block-gap, .5rem);
			}
			.wp-block-navigation.navbar-expand-{$filter} .wp-block-spacer {
				height: 100%;
				width: var(--wp--spacer-width);
			}
			.wp-block-navigation .dropdown-menu .dropdown-toggle::after {
				border-top: 0.3em solid transparent;
				border-right: 0;
				border-bottom: 0.3em solid transparent;
				border-left: 0.3em solid;
			}
		}
		";
	}
}
