<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg\Blocks
 * @copyright   Copyright (c) 2022, WeCodeArt Framework
 * @since		5.0.0
 * @version		5.5.8
 */

namespace WeCodeArt\Gutenberg\Blocks\Query\Pagination;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Gutenberg\Blocks\Dynamic;
use function WeCodeArt\Functions\get_prop;

/**
 * Gutenberg Query Pagination block.
 */
class Numbers extends Dynamic {

	use Singleton;

    /**
	 * Block namespace.
	 *
	 * @var string
	 */
	protected $namespace = 'core';

	/**
	 * Block name.
	 *
	 * @var string
	 */
	protected $block_name = 'query-pagination-numbers';

	/**
	 * Shortcircuit Register
	 */
	public function register() {
        \add_filter( 'block_type_metadata_settings', [ $this, 'filter_render' ], 10, 2 );
	}

	/**
	 * Filter block markup
	 *
	 * @param	array 	$settings
	 * @param	array 	$data
	 */
	public function filter_render( $settings, $data ) {
        if ( $this->get_block_type() === $data['name'] ) {
			$settings = wp_parse_args( [
				'render_callback' => [ $this, 'render' ]
			], $settings );
		}
		
		return $settings;
	}

	/**
	 * Dynamically renders the `core/query-pagination-numbers` block.
	 *
	 * @param 	array 	$attributes The block attributes.
	 *
	 * @return 	string 	The block markup.
	 */
	public function render( $attributes = [], $content = '', $block = null ) {
        global $wp_query;
		
        $page_key   = isset( $block->context['queryId'] ) ? 'query-' . $block->context['queryId'] . '-page' : 'query-page';
        $page       = empty( $_GET[ $page_key ] ) ? 1 : (int) $_GET[ $page_key ];
        $max_page   = isset( $block->context['query']['pages'] ) ? (int) $block->context['query']['pages'] : 0;
        $content    = [];

        $paginate_args = apply_filters( 'wecodeart/filter/query/pagination/args', [
            'mixed'     => 'array',
            'type' 	    => 'array',
            'prev_next' => true,
        ] );
        
        if ( isset( $block->context['query']['inherit'] ) && $block->context['query']['inherit'] ) {
            // Take into account if we have set a bigger `max page` than what the query has.
            $total      = ! $max_page || $max_page > $wp_query->max_num_pages ? $wp_query->max_num_pages : $max_page;
            $content    = paginate_links( wp_parse_args( [
                'total' => $total,
            ], $paginate_args ) );
        } else {
            $block_query = new \WP_Query( build_query_vars_from_query_block( $block, $page ) );

            // `paginate_links` works with the global $wp_query, so we have to temporarily switch it with our custom query.
            $prev_wp_query  = $wp_query;
            $wp_query       = $block_query;
            $total          = ! $max_page || $max_page > $wp_query->max_num_pages ? $wp_query->max_num_pages : $max_page;
            $paginate_args  = wp_parse_args( [
                'base'      => '%_%',
                'format'    => "?$page_key=%#%",
                'current'   => max( 1, $page ),
                'total'     => $total,
            ], $paginate_args );
            
            // https://github.com/WordPress/gutenberg/blob/trunk/packages/block-library/src/query-pagination-numbers/index.php
            if ( 1 !== $page ) {
                $paginate_args['add_args'] = [ 'cst' => '' ];
            }

            // We still need to preserve `paged` query param if exists.
            $paged = empty( $_GET['paged'] ) ? null : (int) $_GET['paged'];
            if ( $paged ) {
                $paginate_args['add_args'] = [ 'paged' => $paged ];
            }

            $content = paginate_links( $paginate_args );
            wp_reset_postdata(); // Restore original Post Data.
            $wp_query = $prev_wp_query;
        }

        if ( empty( $content ) ) {
            return '';
        }
		
		return wecodeart( 'markup' )::wrap( 'wp-block-' . $this->block_name, [
            [
                'tag'   => 'ul',
                'attrs' => $this->get_block_wrapper_attributes( [
                    'class' => 'pagination',
                ] )
            ]
        ], function( $content ) {
            
            foreach( $content as $key => $link ) :

                $class = [ 'pagination__item' ];

                if( strpos( $link, 'current' ) !== false ) {
                    $class[] = 'pagination__item--current';
                }

                ?>
                <li class="<?php echo esc_attr( implode( ' ', $class ) ); ?>">
                    <?php echo str_replace( 'page-numbers', 'pagination__link', $link ); ?>
                </li>
                <?php

            endforeach;

        }, [ $content ], false );
	}

    /**
	 * Block styles
	 *
	 * @return 	string 	The block styles.
	 */
	public function styles() {
        $button_css = wecodeart_json( [ 'styles', 'blocks', 'core/button' ] );

        $width      = get_prop( $button_css, [ 'border', 'width' ], '1px' );
        $style      = get_prop( $button_css, [ 'border', 'style' ], 'solid' );
        $color      = get_prop( $button_css, [ 'border', 'color' ], 'currentColor' );
        $color      = $color === 'transparent' ? 'currentColor' : $color;
        $radius     = get_prop( $button_css, [ 'border', 'radius' ], '.25rem' );
        
		return "
        .pagination {
            display: flex;
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 0;
        }
        .pagination__link {
            position: relative;
            display: block;
            color: var(--wp--preset--color--primary);
            text-decoration: none;
            background-color: white;
            padding: .35rem .75rem;
            border: $width $style $color;
        }
        .pagination__link:hover {
            z-index: 2;
            color: var(--wp--preset--color--primary);
            background-color: var(--wp--preset--color--light);
            border-color: $color;
        }
        .pagination__link:focus {
            z-index: 3;
            color: var(--wp--preset--color--primary);
            background-color: var(--wp--preset--color--light);
            outline: none;
            box-shadow: 0 0 0 1px var(--wp--preset--color--primary);
        }
        .pagination__item:first-child .pagination__link {
            border-top-left-radius: $radius;
            border-bottom-left-radius: $radius;
        }
        .pagination__item:not(:first-child) .pagination__link {
            margin-left: -1px;
        }
        .pagination__item:last-child .pagination__link {
            border-top-right-radius: $radius;
            border-bottom-right-radius: $radius;
        }
        .pagination__item--current .pagination__link {
            z-index: 3;
            color: white;
            background-color: var(--wp--preset--color--primary);
            border-color: var(--wp--preset--color--primary);
        } 
        .pagination__item--disabled .pagination__link {
            color: var(--wp--gray);
            pointer-events: none;
            background-color: var(--wp--gray-100);
            border-color: currentColor;
        }
		";
	}
}