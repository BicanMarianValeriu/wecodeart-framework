<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg\Blocks
 * @copyright   Copyright (c) 2021, WeCodeArt Framework
 * @since		5.0.0
 * @version		5.0.0
 */

namespace WeCodeArt\Gutenberg\Blocks\Query\Pagination;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Markup;
use WeCodeArt\Singleton;
use WeCodeArt\Gutenberg\Blocks\Dynamic;
use function WeCodeArt\Functions\get_prop;

/**
 * Gutenberg Query Pagination block.
 */
class Numbers extends Dynamic {

	use Singleton;

	/**
	 * Shortcircuit Register
	 */
	public function register_block_type() {
		add_filter( 'block_type_metadata_settings', [ $this, 'filter_render' ], 10, 2 );
	}

	/**
	 * Filter table markup
	 *
	 * @param	array 	$settings
	 * @param	array 	$data
	 */
	public function filter_render( $settings, $data ) {
		if ( 'core/query-pagination-numbers' !== $data['name'] ) {
			return $settings;
		}

		return wp_parse_args( [
			'render_callback' => [ $this, 'render' ]
		], $settings );
	}

	/**
	 * Dynamically renders the `core/query-pagination-numbers` block.
	 *
	 * @param 	array 	$attributes The block attributes.
	 *
	 * @return 	string 	The block markup.
	 */
	public function render( $attributes = [], $content = '', $block = null ) {
        global $wp_query;
		
        $page_key   = isset( $block->context['queryId'] ) ? 'query-' . $block->context['queryId'] . '-page' : 'query-page';
        $page       = empty( $_GET[ $page_key ] ) ? 1 : (int) $_GET[ $page_key ];
        $max_page   = isset( $block->context['query']['pages'] ) ? (int) $block->context['query']['pages'] : 0;
        $content    = [];
        
        if ( isset( $block->context['query']['inherit'] ) && $block->context['query']['inherit'] ) {
            // Take into account if we have set a bigger `max page` than what the query has.
            $total         = ! $max_page || $max_page > $wp_query->max_num_pages ? $wp_query->max_num_pages : $max_page;
            $content       = paginate_links( [
                'mixed'     => 'array',
                'type' 	    => 'array',
                'prev_next' => true,
                'total'     => $total,
            ] );
        } else {
            $block_query = new WP_Query( build_query_vars_from_query_block( $block, $page ) );
            // `paginate_links` works with the global $wp_query, so we have to temporarily switch it with our custom query.
            $prev_wp_query = $wp_query;
            $wp_query      = $block_query;
            $total         = ! $max_page || $max_page > $wp_query->max_num_pages ? $wp_query->max_num_pages : $max_page;
            $paginate_args = [
                'mixed'     => 'array',
                'type' 	    => 'array',
                'base'      => '%_%',
                'format'    => "?$page_key=%#%",
                'current'   => max( 1, $page ),
                'total'     => $total,
                'prev_next' => true,
            ];
            // We still need to preserve `paged` query param if exists.
            $paged = empty( $_GET['paged'] ) ? null : (int) $_GET['paged'];
            if ( $paged ) {
                $paginate_args['add_args'] = [ 'paged' => $paged ];
            }
            $content = paginate_links( $paginate_args );
            wp_reset_postdata(); // Restore original Post Data.
            $wp_query = $prev_wp_query;
        }

        if ( empty( $content ) ) {
            return '';
        }
		
		return Markup::wrap( 'pagination-numbers', [
            [
                'tag'   => 'nav',
                'attrs' => [
                    'class' => 'wp-block-query-pagination-numbers mb-5',
                ]
            ],
        ], 'wecodeart_template', [ [ 'query/pagination', 'numbers' ], [
            'links' => $content
        ] ], false ); 
	}
}
