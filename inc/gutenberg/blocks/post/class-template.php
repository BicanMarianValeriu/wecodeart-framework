<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg\Blocks
 * @copyright   Copyright (c) 2022, WeCodeArt Framework
 * @since		5.0.0
 * @version		5.6.1
 */

namespace WeCodeArt\Gutenberg\Blocks\Post;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Gutenberg\Blocks\Dynamic;
use function WeCodeArt\Functions\get_prop;

/**
 * Gutenberg Post Template block.
 */
class Template extends Dynamic {

	use Singleton;

	/**
	 * Block namespace.
	 *
	 * @var string
	 */
	protected $namespace = 'core';

	/**
	 * Block name.
	 *
	 * @var string
	 */
	protected $block_name = 'post-template';

	/**
	 * Shortcircuit Register
	 */
	public function register() {
		\add_action( 'wp_print_styles', function() {
			\wp_deregister_style( 'wp-block-' . $this->block_name );
		} );

		\add_filter( 'post_class',						[ $this, 'post_classes' 	] );
		\add_filter( 'block_type_metadata_settings', 	[ $this, 'filter_render' 	], 10, 2 );
	}

	/**
	 * Filter block markup
	 *
	 * @param	array 	$settings
	 * @param	array 	$data
	 */
	public function filter_render( $settings, $data ) {
		if ( $this->get_block_type() === $data['name'] ) {
			$settings = wp_parse_args( [
				'render_callback' => [ $this, 'render' ]
			], $settings );
		}
		
		return $settings;
	}

	/**
	 * Dynamically renders the `core/post-template` block.
	 *
	 * @param 	array 	$attributes The block attributes.
	 *
	 * @return 	string 	The block markup.
	 */
	public function render( $attributes = [], $content = '', $block = null ) {
		$page 	= isset( $block->context['queryId'] ) ? 'query-' . $block->context['queryId'] . '-page' : 'query-page';
		$page	= (int) get_prop( $_GET, $page, 1 );
		$args	= build_query_vars_from_query_block( $block, $page );

		// Override the custom query with the global query if needed.
		if ( get_prop( $block->context, [ 'query', 'inherit' ], false ) ) {
			global $wp_query;
			if ( $wp_query && isset( $wp_query->query_vars ) && is_array( $wp_query->query_vars ) ) {
				// Unset `offset` because if is set, $wp_query overrides/ignores the paged parameter and breaks pagination.
				unset( $args['offset'] );
				$args = wp_parse_args( $wp_query->query_vars, $args );

				if ( empty( $args['post_type'] ) && is_singular() ) {
					$args['post_type'] = get_post_type( get_the_ID() );
				}
			}
		}

		$query = new \WP_Query( $args );

		$classnames = [ 'wp-block-post-template' ];
		if ( isset( $block->context['displayLayout'] ) && isset( $block->context['query'] ) ) {
			if ( get_prop( $block->context, [ 'displayLayout', 'type' ], false ) === 'flex' ) {
				$classnames = array_merge( $classnames, [ 'wp-block-post-template--grid', 'grid' ] );
			}
		}

		if( $value = get_prop( $attributes, 'className' ) ) {
			$classnames[] = $value;
		}

		$classnames[] = 'list-unstyled';

		return wecodeart( 'markup' )::wrap( 'wp-block-query', [
			[
				'tag' 	=> 'ul',
				'attrs'	=> [
					'class' => implode( ' ', $classnames )
				]
			]
		], function( $query, $block ) {

			while ( $query->have_posts() ) {
				$query->the_post();

				$item_class = [ 'wp-block-post' ];
				if( get_prop( $block->context, [ 'displayLayout', 'columns' ], false ) ) {
					$columns 	= ( 12 / get_prop( $block->context, [ 'displayLayout', 'columns' ], 3 ) );
					$item_class = array_merge( $item_class, [ 'span-12', 'span-md-6', 'span-lg-' . $columns ] );
				}

				wecodeart( 'markup' )::wrap( 'wp-block-post', [
					[
						'tag' 	=> 'li',
						'attrs'	=> [
							'class' => implode( ' ', get_post_class( implode( ' ', $item_class ) ) )
						]
					]
				], function( $block ) {
					echo ( new \WP_Block( $block->parsed_block, [
						'postType' => get_post_type(),
						'postId'   => get_the_ID(),
					] ) )->render( [ 'dynamic' => false ] );
				}, [ $block ] );
			}
	
			wp_reset_postdata();

		}, [ $query, $block ], false );
	}

	/**
	 * Filter classes to the array of post classes.
	 *
	 * @param 	array $classes Classes for the post.
	 * 
	 * @return 	array
	 */
	public function post_classes( $classes ) {
		if ( is_admin() ) {
			return $classes;
		}
		
		// Add 'entry to the post class array.
		$classes[] = 'entry';

		// Remove 'hentry' from post class array.
		$classes = array_diff( $classes, [ 'hentry' ] );
		
		return $classes;
	}
}
