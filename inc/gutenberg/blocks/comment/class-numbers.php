<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg\Blocks
 * @copyright   Copyright (c) 2023, WeCodeArt Framework
 * @since		5.3.3
 * @version		5.7.2
 */

namespace WeCodeArt\Gutenberg\Blocks\Comment\Pagination;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Gutenberg\Blocks\Dynamic;
use WeCodeArt\Gutenberg\Blocks\Comment\Template;
use function WeCodeArt\Functions\get_prop;

/**
 * Gutenberg Pagination Numbers block.
 */
class Numbers extends Dynamic {

	use Singleton;

	/**
	 * Block namespace.
	 *
	 * @var string
	 */
	protected $namespace = 'core';

	/**
	 * Block name.
	 *
	 * @var string
	 */
	protected $block_name = 'comments-pagination-numbers';

	/**
	 * Block args.
	 *
	 * @return 	array
	 */
	public function block_type_args(): array {
		return [
			'render_callback' => [ $this, 'render' ]
		];
	}

	/**
	 * Dynamically renders the `core/comments-pagination-numbers` block.
	 *
	 * @param 	array 	$attributes	The attributes.
	 * @param 	string 	$content 	The block markup.
	 * @param 	string 	$block 		The block data.
	 *
	 * @return 	string 	The block markup.
	 */
	public function render( array $attributes = [], string $content = '', $block = null ): string {
		// Get the post ID from which comments should be retrieved.
		$post_id = get_prop( $block->context, [ 'postId' ], get_the_ID() );

		if ( ! $post_id ) {
			return '';
		}

		// Get the what we need.
		$args 		= build_comment_query_vars_from_block( $block );
		$total		= ( new \WP_Comment_Query( $args ) )->max_num_pages;
		$current	= get_prop( $args, [ 'paged' ] );
		$content	= paginate_comments_links( [
            'type' 	    => 'array',
			'total'     => $total,
			'current'   => $current,
			'prev_next' => false,
		] );

		if( empty( $content ) ) {
			return '';
		}

		$pagination_numbers = wecodeart( 'blocks' )->get( 'core/query-pagination-numbers' )::get_instance();

		// Enqueue Query Pagination CSS
		if( ! wp_style_is( 'wp-block-query-pagination-numbers' ) ) {
			$styles = $pagination_numbers->styles();
			wp_add_inline_style( 'wp-block-comments-pagination', wecodeart( 'styles' )::compress( $styles ) );
		}

		return $pagination_numbers->format_pagination( $content );
	}

	/**
	 * Block styles
	 *
	 * @return 	string 	The block styles.
	 */
	public function styles() {
		return "
			.wp-block-comments-pagination-numbers:only-child {
				margin-bottom: 0!important;
			}
		";
	}
}
