<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg\Blocks
 * @copyright   Copyright (c) 2021, WeCodeArt Framework
 * @since		5.0.0
 * @version		5.0.0
 */

namespace WeCodeArt\Gutenberg\Blocks;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Markup;
use WeCodeArt\Markup\SVG;
use WeCodeArt\Singleton;
use function WeCodeArt\Functions\get_prop;

/**
 * Gutenberg Search block.
 */
class Search extends Dynamic {

	use Singleton;

	/**
	 * Shortcircuit Register
	 */
	public function register_block_type() {
		add_filter( 'render_block', [ $this, 'filter_render' ], 10, 2 );
	}

	/**
	 * Filter Search Markup
	 *
	 * @param	string 	$block_content
	 * @param	array 	$block
	 */
	public function filter_render( $block_content, $block ) {		
		if ( 'core/search' !== $block['blockName'] ) {
			return $block_content;
		}

		return $this->render( get_prop( $block, 'attrs', [] ), '' );
	}

	/**
	 * Dynamically renders the `core/search` block.
	 *
	 * @param 	array 	$attributes The block attributes.
	 *
	 * @return 	string 	The search block markup.
	 */
	public function render( $attributes = [], $content = '' ) {
		static $instance_id = 0;

		$attributes = wp_parse_args( $attributes, [
			'label'      => __( 'Search' ),
			'buttonText' => __( 'Search' ),
		] );

		$input_id 	= 'wp-block-search__input-' . ++$instance_id;
		$form_class = [ 'wp-block-search__form', 'needs-validation' ];

		if( get_prop( $attributes, 'widthUnit', 'px' ) === '%' ) {
			if( in_array( get_prop( $attributes, 'width' ), [ 25, 50, 75, 100 ] ) ) {
			   $form_class[] = 'w-' . get_prop( $attributes, 'width' );
			}
		}

		return Markup::wrap( 'search-block', [
			[
				'tag' 	=> 'div',
				'attrs' => [
					'class' => $this->get_classname( $attributes )
				]
			],
			[
				'tag' 	=> 'form',
				'attrs' => [
					'class'		=> join( ' ', $form_class ),
					'role'		=> 'search',
					'method' 	=> 'get',
					'action' 	=> home_url( '/' ),
					'novalidate'=> 'novalidate',
				]
			],
		], function() use( $attributes, $input_id ) {
			$wrapper   = [ 'wp-block-search__fields' ];
			$wrapper[] = get_prop( $attributes, 'buttonPosition' ) === 'button-inside' ? 'input-group' : 'd-flex';
			// Add Label
			if ( get_prop( $attributes, 'showLabel' ) !== false && ! empty( $label = get_prop( $attributes, 'label' ) ) ) {
			?>
			<label class="form-label" for="<?php echo esc_attr( $input_id ); ?>"><?php echo esc_html( $label ); ?></label>
			<?php
			}
			?>
			<div class="<?php echo esc_attr( implode( ' ', $wrapper ) ); ?>">
			<?php
			// Add search input
			wecodeart_input( 'search', [
				'attrs' => [
					'id' 		=> $input_id,
					'name'		=> 's',
					'class' 	=> 'wp-block-search__input form-control',
					'value'		=> get_search_query(),
					'placeholder' => get_prop( $attributes, 'placeholder', false ),
					'required' 	=> true,
				]
			] );

			// Maybe add submit button
			if ( get_prop( $attributes, 'buttonPosition', 'button-outside' ) !== 'no-button' ) {
				$icon  = get_prop( $attributes, 'buttonUseIcon', false );
				$label = $icon ? SVG::compile( 'search' ) : get_prop( $attributes, 'buttonText' );

				wecodeart_input( 'button', [
					'label' => $label,
					'attrs' => [
						'type'	=> 'submit',
						'class' => 'wp-block-search__button btn btn-outline-dark',
					]
				] );
			}
			?>
			</div>
			<?php
		}, [], false );
	}

	/**
	 * Builds the correct top level classnames for the 'core/search' block.
	 *
	 * @param 	array 	$attributes The block attributes.
	 *
	 * @return 	string 	The classnames used in the block.
	 */
	public function get_classname( $attributes ) {
		$classnames = [ 'wp-block-search' ];

		$position = get_prop( $attributes, 'buttonPosition', 'button-outside' );

		$classnames[] = 'wp-block-search--' . $position;

		if ( get_prop( $attributes, 'buttonUseIcon', false ) ) {
			if ( 'no-button' !== $position ) {
				$classnames[] = 'wp-block-search--with-icon';
			}
		}

		return implode( ' ', $classnames );
	}
}
