<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Gutenberg\Blocks
 * @copyright   Copyright (c) 2024, WeCodeArt Framework
 * @since		6.2.0
 * @version		6.3.7
 */

namespace WeCodeArt\Gutenberg\Blocks\Text;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Gutenberg\Blocks\Dynamic;
use function WeCodeArt\Functions\get_prop;
use function WeCodeArt\Functions\dom_get_element;

/**
 * Gutenberg Heading block.
 */
class Details extends Dynamic {

	use Singleton;

	/**
	 * Block namespace.
	 *
	 * @var string
	 */
	protected $namespace = 'core';

	/**
	 * Block name.
	 *
	 * @var string
	 */
	protected $block_name = 'details';

	/**
	 * Init.
	 */
	public function init() {
		if( self::has_seo_support() === true ) {
			\add_filter( 'render_block', [ $this, 'collect_questions' ], 20, 2 );
		}
	}

	/**
	 * Check if has SEO support
	 *
	 * @return boolean
	 */
	public static function has_seo_support(): bool {
		if( wecodeart_if( 'is_rankmath_active' ) || wecodeart_if( 'is_yoast_active' ) ) {
			return \apply_filters( 'wecodeart/filter/gutenberg/block/details/seo', false );
		}

		return false;
	}

	/**
	 * Collection questions and generate schema.
	 *
	 * @param	string|null $content   The pre-rendered content. Default null.
	 * @param 	array       $parsed_block The block being rendered.
	 */
	public function collect_questions( $content, $parsed_block ) {
		if ( 'core/details' !== get_prop( $parsed_block, [ 'blockName' ] ) ) {
			return $content;
		}

		$dom = $this->dom( $content );

		$summary	= dom_get_element( 'summary', $dom, 0 );
		$summary	= is_object( $summary ) ? $summary->nodeValue : '';
		$text 		= self::get_question_content( get_prop( $parsed_block, [ 'innerBlocks' ], [] ) );

		// Only for pages.
		\add_filter( 'wpseo_schema_webpage', static function( $data ) use ( $summary, $text ) {
			$data['@type'] = [ 'WebPage', 'FAQPage' ];
			if( ! isset( $data['mainEntity'] ) ) {
				$data['mainEntity'] = [];
			}
			$data['mainEntity'][] = self::get_question_json( $summary, $text );

			return $data;
		} );
		
		\add_filter( 'rank_math/json_ld', static function( $data ) use ( $summary, $text ) {
			if ( ! isset( $data['WebPage'] ) ) {
				return $data;
			}

			$data['WebPage']['@type'] = [ 'WebPage', 'FAQPage' ];
			if( ! isset( $data['WebPage']['mainEntity'] ) ) {
				$data['WebPage']['mainEntity'] = [];
			}
			$data['WebPage']['mainEntity'][] = self::get_question_json( $summary, $text );

			return $data;
		} );

		return $content;
	}

	/**
	 * Get Question content
	 *
	 * @param	array	$blocks
	 *
	 * @return 	string
	 */
	public static function get_question_content( array $blocks = [] ): string {
		$content = '';

		foreach( $blocks as $block ) {
			if( ! in_array( $block['blockName'], [ 'core/heading', 'core/paragraph' ], true ) ) {
				continue;
			}

			if( ! empty( $inner = get_prop( $block, [ 'innerBlocks' ], [] ) ) ) {
				$content .= self::get_question_content( $inner );
			}

			$content .= ' ' . strip_tags( $block['innerHTML'], [
				'h1',
				'h2',
				'h3',
				'h4',
				'h5',
				'h6',
				'p',
				'strong',
				'b',
				'em',
				'br',
				'a',
				'i',
			] );
		}

		return trim( preg_replace( '/(<[^>]+) style=".*?"/i', '$1', $content ) );
	}

	/**
	 * Get Question JSON
	 *
	 * @param	string	$question
	 * @param	string	$answer
	 *
	 * @return 	array
	 */
	public static function get_question_json( string $question = '', string $answer = '' ): array {
		return [
			'@type'          => 'Question',
			'url'            => get_permalink() . '#' . 'faq-' . md5( $question ),
			'name'           => wp_strip_all_tags( $question ),
			'acceptedAnswer' => [
				'@type' => 'Answer',
				'text'  => $answer,
			],
		];
	}

	/**
	 * Block styles
	 *
	 * @return 	string 	The block styles.
	 */
	public function styles(): string {
		return <<<CSS
			.wp-block-details {
				--wp--details--padding-y: 1rem;
				--wp--details--padding-x: 2rem;
				--wp--details--padding: var(--wp--details--padding-y) var(--wp--details--padding-x);
				--wp--details--chevron-size: .4rem;
				--wp--details--chevron-color: currentColor;
				--wp--details--chevron-transition: .25s transform ease;
				--wp--details--border: 1px solid var(--wp--preset--color--accent);
				border: var(--wp--details--border);
			}
			.wp-block-details details + details {
				border-top: var(--wp--details--border);
			}
			.wp-block-details summary {
				position: relative;
				display: block;
				padding: var(--wp--details--padding);
				font-size: var(--wp--preset--font-size--normal);
				font-weight: 700;
				transition: background-color .5s ease-in-out;
				cursor: pointer;
			}
			.wp-block-details summary::before {
				content: "";
				position: absolute;
				top: calc(50% - var(--wp--details--chevron-size));
				left: 1rem;
				border-width: var(--wp--details--chevron-size);
				border-style: solid;
				border-color: transparent transparent transparent var(--wp--details--chevron-color);
				transform: rotate(0);
				transform-origin: .125em 50%;
				transition: var(--wp--details--chevron-transition);
			}
			.wp-block-details summary:hover,
			.wp-block-details summary:focus,
			details[open].wp-block-details summary,
			.wp-block-details details[open] summary {
				background-color: var(--wp--preset--color--accent);
			}
			details[open].wp-block-details summary,
			.wp-block-details details[open] summary {
				border-bottom: var(--wp--details--border);
			}
			details[open].wp-block-details,
			.wp-block-details details[open] {
				padding-bottom: var(--wp--details--padding-y);
			}
			details[open].wp-block-details > summary::before,
			.wp-block-details details[open] > summary::before {
				transform: rotate(90deg);
			}
			details.wp-block-details > *:not(summary),
			.wp-block-details details > *:not(summary) {
				margin: var(--wp--details--padding);
			}
			details summary::marker,
			details summary::-webkit-details-marker {
				display: none;
				content: none;
			}
		CSS;
	}
}
