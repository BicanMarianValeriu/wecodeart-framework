<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Customizer
 * @copyright   Copyright (c) 2020, WeCodeArt Framework
 * @since 		1.6
 * @version		4.2.0
 */

namespace WeCodeArt\Admin;

defined( 'ABSPATH' ) || exit;

use WeCodeArt\Utilities\Helpers;
use WeCodeArt\Admin\Customizer\Partials;
use WeCodeArt\Admin\Customizer\Controls;
use WeCodeArt\Admin\Customizer\Configs;
use function WeCodeArt\Functions\get_prop;

/**
 * Customizer Options
 */
class Customizer {

	use \WeCodeArt\Singleton;
	use \WeCodeArt\Core\Scripts\Base;

	/**
	 * Customizer Configurations.
	 *
	 * @access 	private
	 * @since 	3.5
	 * @var 	array
	 */
	public static $configurations;
	
	/**
	 * Send to Constructor
	 * @since 3.6.2
	 */
	public function init() {
		// Init Defaults.
		add_action( 'init', [ $this, 'set_defaults' ], 10 );

		// Register our custom settings + defaults.
		add_action( 'customize_register', [ $this, 'register_settings' 	] );
		add_action( 'customize_register', [ $this, 'apply_defaults' 	] );
		
		// Add Scripts.
		add_action( 'customize_register', 		[ $this, 'enqueue' 			] );
		add_action( 'customize_preview_init', 	[ $this, 'enqueue_preview' 	] );

		// Custom Controls.
		Controls::get_instance();
		
		// Selective Refresh Partials.
		Partials::get_instance();

		// Theme panels and configs.
		new Configs();
		new Configs\Header();
		new Configs\Content();
		new Configs\Footer();
		new Configs\Colors();
		new Configs\Typography();
	}

	/**
	 * Grab our Customizer Scripts.
	 *
	 * @since 	unknown
	 * @version	4.1.8
	 */
	public function enqueue_preview() {

		wp_enqueue_script(
			$this->make_handle( 'preview' ),
			$this->get_asset( 'js', 'customizer' ),
			[ 'jquery', 'customize-preview' ], 
			wecodeart( 'version' ),
			true
		);
		
	}
	
	/**
	 * Enqueue Scripts.
	 *
	 * @since 	unknown
	 * @version	4.2.0
	 */
	public function enqueue() {

		wp_enqueue_style(
			$this->make_handle(),
			$this->get_asset( 'css', 'customizer' ),
			[],
			wecodeart( 'version' )
		);
		
	}

	/**
	 * Return default values for the Customize Configuration.
	 *
	 * @since 	3.5
	 * @return 	array default values for the Customizer Configurations.
	 */
	private function get_config_defaults() {
		return apply_filters(
			'wecodeart/filter/customizer/config/defaults', [
				'priority'             => null,
				'title'                => null,
				'label'                => null,
				'name'                 => null,
				'type'                 => null,
				'description'          => null,
				'capability'           => null,
				'datastore_type'       => 'theme_mod', // theme_mod or option. Default theme_mod.
				'settings'             => null,
				'active_callback'      => null,
				'sanitize_callback'    => null,
				'sanitize_js_callback' => null,
				'theme_supports'       => null,
				'transport'            => null,
				'default'              => null,
				'selector'             => null,
			]
		);
	}

	/**
	 * Filter and return Customizer Configurations.
	 *
	 * @param 	WP_Customize_Manager $wp_customize Reference to WP_Customize_Manager.
	 * @since 	3.5
	 * @return 	Array Customizer Configurations for registering Sections/Panels/Controls.
	 */
	public function get_configurations( $wp_customize ) {
		if ( ! is_null( self::$configurations ) ) return self::$configurations;
		return apply_filters( 'wecodeart/filter/customizer/configurations', [], $wp_customize );
	}

	/**
	 * Grab our Customizer Defaults.
	 *
	 * @param 	string 		mod_name
	 * @version	3.9.9
	 *
	 * @return 	mixed/array
	 */
	public static function get_defaults( $mod_name = '' ) {
		$defaults = wecodeart_config( 'customizer' );

		/**
		 * Added post type defaults for Entry Meta and Container/Modules (singular/archive page types)
		 *
		 * @since 3.6.0
		 */
		// Customizer defaults for Post Types
		foreach( wecodeart( 'public_post_types' ) as $type ) {
			// Entry Meta
			if( post_type_supports( $type, 'wecodeart-post-info' ) ) {
				$defaults['content-entry-meta-' . $type . '-archive'] 	= [ 'author', 'date', 'comments' ];
				$defaults['content-entry-meta-' . $type . '-singular'] 	= [ 'author', 'date', 'comments' ];
			}

			// Custom Container and Modules
			$defaults['content-layout-container-' . $type . '-archive']		= 'container';
			$defaults['content-layout-modules-' . $type . '-archive'] 		= [ 'content', 'primary' ];
			$defaults['content-layout-container-' . $type . '-singular'] 	= 'container';
			$defaults['content-layout-modules-' . $type . '-singular'] 		= [ 'content', 'primary' ];
		}
		
		$args = apply_filters( 'wecodeart/filter/customizer/defaults', $defaults );
		
		// Allows to return a single mod_name default value
		if( $mod_name && array_key_exists( $mod_name, $args ) ) {
			return $args[$mod_name];
		}
		
		return $args;
	}

	/**
	 * Adds a value to each setting if one isn't already present.
	 *
	 * @version	4.2.0
	 * @uses 	get_defaults()
	 */
	public function set_defaults() {
		$options 	= array_filter( self::get_defaults(), function( $key ) {
			preg_match_all( "/\[([^\]]*)\]/", $key, $matches );
			return( $matches && $matches[1] );
		}, ARRAY_FILTER_USE_KEY );

		// Set Mods
		$theme_mods = array_diff_key( self::get_defaults(), $options );
		foreach( $theme_mods as $mod => $val ) add_filter( 'theme_mod_' . $mod, [ $this, 'get_theme_mod_value' ], 10 );

		// Set Options
		add_filter( 'option_wecodeart-settings', function( $settings ) use( $options ) {
			foreach( $options as $key => $val ) {
				preg_match_all( "/\[([^\]]*)\]/", $key, $matches );
				$options[$matches[1][0]] = $val;
				unset( $options[$key] );
			}

			return wp_parse_args( $options, $settings );
		} );
	}

	/**
	 * Apply Customizer setting defaults.
	 *
	 * @param  object $wp_customize the Customizer object.
	 * @version	4.2.0
	 *
	 * @uses   get_defaults()
	 */
	public function apply_defaults( $wp_customize ) {
		foreach( self::get_defaults() as $mod => $val ) $wp_customize->get_setting( $mod )->default = $val;
	}
	
	/**
	 * Get theme mod value.
	 *
	 * @param 	string $value
	 * @version	4.2.0
	 *
	 * @return 	string
	 */
	public function get_theme_mod_value( $value ) {
		// Remove theme_mod_ prefix to find setting name
		$key = substr( current_filter(), 10 );

		$theme_options = get_theme_mods();

		// If a value is set, return it early;
		if ( isset( $theme_options[ $key ] ) ) return $value;

		// If not return the default
		$values = $this->get_defaults();

		return isset( $values[ $key ] ) ? $values[ $key ] : $value;
	}

	/**
	 * Get theme Mods
	 *
	 * @since 	3.5
	 * @uses 	get_theme_mods()
	 * @uses 	self::get_defaults()
	 */
	public function get_theme_mods() {
		$options 	= array_filter( self::get_defaults(), function( $key ) {
			preg_match_all( "/\[([^\]]*)\]/", $key, $matches );
			return( $matches && $matches[1] );
		}, ARRAY_FILTER_USE_KEY );

		$theme_mods = array_diff_key( self::get_defaults(), $options );
		return wp_parse_args( get_theme_mods(), $theme_mods );
	}

	/**
	 * Process and Register Customizer Panels, Sections, Settings and Controls.
	 *
	 * @param 	WP_Customize_Manager $wp_customize Reference to WP_Customize_Manager.
	 * @since 	3.5
	 *
	 * @return 	void
	 */
	public function register_settings( $wp_customize ) {
		$configurations = $this->get_configurations( $wp_customize );

		foreach ( $configurations as $key => $config ) {
			$config = wp_parse_args( $config, $this->get_config_defaults() );

			switch ( $config['type'] ) {
				case 'panel': 
					unset( $config['type'] );
					$this->register_panel( $config, $wp_customize );
					break;
				case 'section': 
					unset( $config['type'] );
					$this->register_section( $config, $wp_customize );
					break;
				case 'control':
					unset( $config['type'] );
					$this->register_control( $config, $wp_customize );
					break;
			}
		}
	}
	
	/**
	 * Register Customizer Panel.
	 *
	 * @param 	Array                $config Panel Configuration settings.
	 * @param 	WP_Customize_Manager $wp_customize instance of WP_Customize_Manager.
	 *
	 * @since 	3.5
	 * @version	4.0.1
	 *
	 * @return 	void
	 */
	private function register_panel( $config, $wp_customize ) {
		$wp_customize->add_panel( 
			new Customizer\Extender\Panel( $wp_customize, get_prop( $config, 'name' ), $config ) 
		);
	}

	/**
	 * Register Customizer Section.
	 *
	 * @param 	Array                $config Panel Configuration settings.
	 * @param 	WP_Customize_Manager $wp_customize instance of WP_Customize_Manager.
	 *
	 * @since 	3.5
	 * @version	4.0.1
	 *
	 * @return 	void
	 */
	private function register_section( $config, $wp_customize ) {
		$callback = get_prop( $config, 'section_callback', 'WeCodeArt\Admin\Customizer\Extender\Section' );
		$wp_customize->add_section( new $callback( $wp_customize, get_prop( $config, 'name' ), $config ) );
	}
	
	/**
	 * Register Customizer Control and Setting.
	 *
	 * @param 	Array                $config Panel Configuration settings.
	 * @param 	WP_Customize_Manager $wp_customize instance of WP_Customize_Manager.
	 *
	 * @since 	3.5
	 * @version	4.2.0
	 *
	 * @return 	void
	 */
	private function register_control( $config, $wp_customize ) {
		$name = get_prop( $config, 'name' );

		if( get_prop( $config, 'datastore_type' ) === 'option' ) {
			$name = sprintf( 'wecodeart-settings[%s]', implode( '-', [ 
				get_prop( $config, 'section' ), 
				get_prop( $config, 'name' ) 
			] ) );
		}

		$wp_customize->add_setting( $name, [
			// Default of the 'default' is null if not exists since we apply it with wp filter after theme setup
			'default'			=> get_prop( $config, 'default' ),
			'type'              => get_prop( $config, 'datastore_type' ),
			'transport'         => get_prop( $config, 'transport', 'refresh' ),
			'sanitize_callback' => get_prop( $config, 'sanitize_callback', 
				// Set Sanitize Callback Automatically
				Customizer\Controls::get_sanitize_call( get_prop( $config, 'control' ) ) 
			),
		] );

		$instance = Customizer\Controls::get_control_instance( get_prop( $config, 'control' ) );

		$config['label'] = get_prop( $config, 'title' );
		$config['type']  = get_prop( $config, 'control' ); 

		/**
		 * Register a new custom control instance or wp default
		 */
		if ( false !== $instance ) {
			$wp_customize->add_control( new $instance( $wp_customize, $name, $config ) );
		} else {
			$wp_customize->add_control( $name, $config );
		}

		/**
		 * Add support to define partial inside our custom config
		 */
		if ( get_prop( $config, 'partial', false ) ) {
			if ( isset( $wp_customize->selective_refresh ) ) {
				$wp_customize->selective_refresh->add_partial( $name, [
					'selector'            => get_prop( $config['partial'], 'selector' ),
					'container_inclusive' => get_prop( $config['partial'], 'container_inclusive' ),
					'render_callback'     => get_prop( $config['partial'], 'render_callback' ),
				] );
			}
		}
	}
}