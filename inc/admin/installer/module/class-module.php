<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Admin\Installer\Module
 * @copyright   Copyright (c) 2023, WeCodeArt Framework
 * @since 		6.2.9
 * @version		6.2.9
 */

namespace WeCodeArt\Admin\Installer;

defined( 'ABSPATH' ) || exit;

use WeCodeArt\Installable;
use WeCodeArt\Admin\Request;
use WeCodeArt\Admin\Installer;
use function WeCodeArt\Functions\get_prop;

/**
 * Module Installer
 */
class Module extends Installer implements Installable {
	/**
	 * Container of valid json properties.
	 *
	 * @var array
	 */
	const VALID_PROPERTIES = [
		'slug',
		'source',
		'destination'
	];

	/**
	 * Destination.
	 *
	 * @var string
	 */
	protected	$source = 'github';

	/**
	 * Destination.
	 *
	 * @var string
	 */
	protected	$destination = '';

	/**
	 * Constructor.
	 */
	public function __construct( $args ) {
        $valid = wp_array_slice_assoc( $args, self::VALID_PROPERTIES );
		$valid = array_map( 'sanitize_text_field', $valid );

		foreach( $valid as $key => $value ) $this->{ $key } = $value;

		$this->set_api_url();
		$this->set_zip_url();
    }

	/**
	 * Install the module.
	 *
	 * @since 	6.2.9
	 *
	 * @return 	mixed
	 */
	public function install() {
		if( ! $this->package ) {
			return $this->status = null;
		}

		// Include the necessary files
		include_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';
        require_once ABSPATH . 'wp-admin/includes/file.php';

		// Create an instance of the module upgrader
		$skin 		= new Skin();
		$upgrader 	= new \WP_Upgrader( $skin );

		$result 	= $upgrader->run( [
			'package'						=> $this->package,
			'destination'					=> $this->get_dir(),
			'clear_destination'				=> true,
			'abort_if_destination_exists' 	=> false
		] );

		// Update options
		$installed_modules  = wecodeart_option( 'installed_modules', [] );
		$current_module		= array_search( $this->slug, array_column( $installed_modules, 'slug' ) );

		$module = [
			'slug'			=> $this->slug,
			'source'		=> $this->source,
			'version'       => $this->get_ver(),
			'hasUpdate'		=> false,
			'destination'   => $this->destination ?: basename( $this->get_dir() ),
		];
		
		if ( $current_module !== false ) {
			$installed_modules[$current_module] = $module;
		} else {
			$installed_modules[] = $module;
		}

		wecodeart_option( [
			'installed_modules' => $installed_modules
		] );
		
		return $this->status = $this->get_ver();
	}

	/**
	 * Uninstall the module.
	 *
	 * @since 	6.2.9
	 *
	 * @return 	mixed
	 */
	public function uninstall() {
		if( ! $this->package ) {
			return $this->status = null;
		}

		$folder = wp_normalize_path( $this->get_dir() );

		if ( is_dir( $folder ) ) {
            $objects = new \RecursiveIteratorIterator(
                new \RecursiveDirectoryIterator( $folder, \RecursiveDirectoryIterator::SKIP_DOTS ),
                \RecursiveIteratorIterator::CHILD_FIRST
            );

            foreach ( $objects as $object ) {
                if ( $object->isDir() ) rmdir( $object->getPathname() );
         		else unlink( $object->getPathname() );
            }

            return rmdir( $folder );
        }

        $installed_modules = wecodeart_option( 'installed_modules', [] );
		$installed_modules = wp_list_filter( $installed_modules, [ 'slug' => $this->slug ], 'NOT' );
		
        wecodeart_option( [
            'installed_modules' => array_values( $installed_modules )
        ] );
		
		return $this->status = true;
	}

	/**
	 * Get installer dir.
	 *
	 * @since 	6.2.9
	 *
	 * @return 	string	the installer directory
	 */
	public function get_dir(): string {
		$path = wecodeart_config( 'paths' )['directory'] . '/inc/support/modules/';

		if( ! empty( $this->destination ) ) {
			$path .= $this->destination;

			return (string) $path;
		}

		$path .= preg_replace( '/^.*\//', '', $this->slug );

		return (string) wp_normalize_path( $path );
	}

	/**
	 * Fix GitHub path.
	 *
	 * @since 	6.2.9
	 *
	 * @param 	boolean $true       always true
	 * @param 	mixed   $hook_extra not used
	 * @param 	array   $result     the result of the move
	 *
	 * @return 	array 	$result		the result of the move
	 */
	public function upgrader_post_install( $true, $hook_extra, $result ): array {}
}