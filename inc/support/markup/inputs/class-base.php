<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework 
 * @subpackage 	Markup\Inputs
 * @copyright   Copyright (c) 2021, WeCodeArt Framework
 * @since		5.0.0
 * @version		5.3.1
 */

namespace WeCodeArt\Support\Markup\Inputs;

defined( 'ABSPATH' ) || exit();

use function WeCodeArt\Functions\get_prop;

/**
 * Standard Inputs Markup
 */
abstract class Base {

    /**
     * Input's Type.
     *
     * @since   5.0.0
     * @var     string
     */
    public $type = '';

    /**
	 * Unique ID for this search field.
	 *
	 * @var string
	 */
	public $unique_id;

    /**
     * Input's Label Position.
     *
     * @since   5.0.0
     * @var     string
     */
    public $label_position = 'before';

    /**
     * Input's Label.
     *
     * @since   5.0.0
     * @var     string
     */
    public $label = '';

    /**
     * All Attrs tied to the control.
     *
     * @since   5.0.0
     * @var     array
     */
    public $attrs = [];
    
    /**
     * All Messages tied to the control.
     *
     * @since   5.0.0
     * @var     array
     */
    public $messages = [];

    /**
     * Input's Messages.
     *
     * @since   5.0.0
     * @var     string
     */
    public $with_messages = true;

	/**
	 * Constructor 
	 */
	public function __construct( $type = '', array $args = [] ) {
        $this->unique_id        = wp_unique_id( 'input-' );
        $this->label            = get_prop( $args, 'label', '' );
        $this->label_position   = get_prop( $args, '_label', 'before' );
        $this->attrs            = wp_parse_args( get_prop( $args, 'attrs', [] ), [
            'type'  => $this->type,
            'name'  => $this->unique_id,
            'id'    => $this->unique_id,
            'class' => $this->input_class()
        ] );
        $this->messages     = get_prop( $args, 'messages', [] );
    }
	
	/**
	 * Create HTML Inputs
	 *
	 * @since	unknown
	 * @version	5.0.0
	 */
	abstract function content();
    
    /**
     * Get the control's content.
     *
     * @since   5.0.0
     *
     * @return  string Contents of the control.
     */
    final public function get_content() {
        ob_start();
        $this->render();
        return trim( ob_get_clean() );
    }

    /**
     * Renders the control wrapper and calls $this->content() for the internals.
     *
     * @since   5.0.0
     */
    protected function render() {
        if( $this->label_position === 'before' ) $this->label();
        $this->content();
        if( $this->label_position === 'after' ) $this->label();
        if( $this->with_messages ) $this->messages();
    }

    /**
     * Render the custom attributes for the control's input element.
     *
     * @since   5.0.0
     * @param 	array   $ommit Attributes to exclude
     */
    public function input_attrs( $ommit = [] ) {
        $attributes = ! empty( $ommit ) ? array_diff_key( $this->attrs, array_flip( $ommit ) ) : $this->attrs;
        echo wecodeart( 'markup' )::generate_attr( $this->type, $attributes );
    }

    /**
	 * Render the label HTML of the input
     *
     * @since   5.0.0
     *
	 * @return	mixed|string
	 */
	public function label() {
        if( empty( $this->label ) ) return;

        wecodeart( 'markup' )::wrap( $this->type . '-label', [
            [
                'tag'   => 'label',
                'attrs' => [
                    'class' => in_array( $this->type, [ 'radio', 'checkbox' ] ) ? 'form-check-label' : 'form-label',
                    'for'   => get_prop( $this->attrs, 'id', $this->unique_id )
                ]
            ]
        ], $this->label );
    }

    /**
	 * Render the messages HTML of the input
     *
     * @since   5.0.0
	 * @param 	bool    $echo
     *
	 * @return	string
	 */
	public function messages( $echo = true ) {
		if( empty( $this->messages ) ) return;
        
		$html       = '';
        $messages   = wp_array_slice_assoc( $this->messages, [ 'valid', 'invalid' ] );
		$help       = isset( $this->messages['help'] ) ? (string) $this->messages['help'] : false;

		if( is_string( $help ) ) {
			$html .= sprintf( '<small class="help-text">%s</small>', $help );
		}

		if( $messages ) {
			foreach( $messages as $key => $msg ) {
                if( empty( $msg ) ) continue;
				$data 		= is_string( $msg ) ? [ 'text' => $msg ] : $msg;
				$message 	= isset( $data['text'] ) ? $data['text'] : '';
				$class		= isset( $data['class'] ) ? $data['class'] : $key . '-tooltip';
				$html .= sprintf( '<span class="%s">%s</span>', esc_attr( $class ), $message );
			}
		}

		if( $echo ) {
			echo wp_kses_post( $html );
			return;
		}

		return wp_kses_post( $html );
    }
}