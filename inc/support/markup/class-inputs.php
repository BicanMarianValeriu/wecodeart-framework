<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework 
 * @subpackage 	Markup\Inputs
 * @copyright   Copyright (c) 2023, WeCodeArt Framework
 * @since		3.1.2
 * @version		5.7.2
 */

namespace WeCodeArt\Support\Markup;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Config\Traits\Asset;
use WeCodeArt\Config\Interfaces\Configuration;

/**
 * Standard Inputs Markup
 */
class Inputs implements Configuration {

	use Singleton;
    use Asset;

	/**
     * All of the configuration items.
     *
     * @var array
     */
    protected $items = [];
	protected static $loaded = [];

    /**
	 * Send to Constructor
	 */
	public function init() {
		// Register Default Inputs
		$this->register( 'basic',		Inputs\Basic::class     );
		$this->register( 'file',		Inputs\File::class     	);
		$this->register( 'color',		Inputs\Color::class		);
		$this->register( 'range',		Inputs\Range::class     );
		$this->register( 'button',		Inputs\Button::class 	);
		$this->register( 'select',		Inputs\Select::class 	);
		$this->register( 'textarea',	Inputs\TextArea::class 	);
		$this->register( 'toggle',		Inputs\Toggle::class 	);
		$this->register( 'radio',		Inputs\Toggle::class 	);
		$this->register( 'checkbox',	Inputs\Toggle::class 	);
        $this->register( 'fieldset',	Inputs\Fieldset::class 	);
        $this->register( 'floating',	Inputs\Floating::class 	);

        add_action( 'wp_enqueue_scripts',                           [ $this, 'assets'   ] );
        add_filter( 'wecodeart/filter/gutenberg/settings/classes', 	[ $this, 'classes'  ] );
	}

	/**
	 * Render the HTML of the input
	 *
	 * @param 	string 		$type		text/number/etc
	 * @param 	array 		$args		Input Args
	 *
	 * @return	void
	 */
	public static function render( string $type = 'hidden', ...$input_args ) {
		echo self::compile( $type, ...$input_args ); // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped
	}

	/**
	 * Get the HTML of the input
	 *
	 * @since	unknown
	 * @version	5.7.2
	 *
	 * @param 	string 		$type		text/number/etc
	 * @param 	array 		$args		Input Args
	 *
	 * @return	string
	 */
	public static function compile( string $type = 'hidden', ...$input_args ) {
		$class_type = in_array( $type, Inputs\Basic::get_types() ) ? 'basic' : $type;
		$storage    = Inputs::get_instance();
		$class      = $storage->get( $class_type );

		if( $class ) {
			if( ! in_array( $class_type, self::$loaded ) ) {
				self::$loaded[] = $class_type;
			}

			$input = new $class( $type, ...$input_args );
			
            return $input->get_content(); // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped
		}
	}

    /**
	 * Enqueue Front-End Assets
	 *
	 * @since	5.3.3
	 * @version	5.7.2
	 */
	public function assets() {
		if( empty( self::$loaded ) ) {
			return;
		}

		$inline = '
			.wecodeart-forms {
				--wp--input--padding-y: .375rem;
				--wp--input--padding-x: .75rem;
				--wp--input--padding: var(--wp--input--padding-y) var(--wp--input--padding-x);
				--wp--input--border-color: var(--wp--gray-400);
				--wp--input--border-radius: .375rem;
				--wp--input--border: 1px solid var(--wp--input--border-color);
			}

			/* Reset */
			label {
				display: inline-block;
			}
			input,
			button,
			select,
			optgroup,
			textarea {
				margin: 0;
				font-family: inherit;
				font-size: inherit;
				line-height: inherit;
			}
			::-moz-focus-inner {
				padding: 0;
				border-style: none;
			}
			::-webkit-inner-spin-button {
				height: auto;
			}
			::-webkit-datetime-edit-fields-wrapper,
			::-webkit-datetime-edit-text,
			::-webkit-datetime-edit-minute,
			::-webkit-datetime-edit-hour-field,
			::-webkit-datetime-edit-day-field,
			::-webkit-datetime-edit-month-field,
			::-webkit-datetime-edit-year-field {
				padding: 0;
			}
			[list]::-webkit-calendar-picker-indicator {
				display: none;
			}
			::-webkit-search-decoration {
				-webkit-appearance: none;
			}
			[type="search"] {
				outline-offset: -2px;
				-webkit-appearance: textfield;
			}
			/* rtl:raw:
			[type="tel"],
			[type="url"],
			[type="email"],
			[type="number"] {
				direction: ltr;
			}
			*/
			[hidden] {
				display: none !important;
			}
			
			/* Misc */
			.form-label {
				margin-bottom: 0.5rem;
			}
			.form-text {
                margin-top: 0.25rem;
                font-size: var(--wp--preset--font-size--small);
                color: var(--wp--preset--color--dark);
            }
			.input-group {
				position: relative;
				display: flex;
				flex-wrap: wrap;
				align-items: stretch;
				width: 100%;
			}
			.input-group > .form-control,
			.input-group > .form-select,
			.input-group > .form-floating {
				position: relative;
				flex: 1 1 auto;
				width: 1%;
				min-width: 0;
			}
			.input-group > .form-control:focus,
			.input-group > .form-select:focus,
			.input-group > .form-floating:focus-within {
				z-index: 3;
			}
			.input-group .wp-element-button {
				position: relative;
				z-index: 2;
			}
			.input-group .wp-element-button:focus {
				z-index: 3;
			}
			.input-group-text {
				display: flex;
				align-items: center;
				padding: 0.375rem 0.75rem;
				font-size: 1rem;
				font-weight: 400;
				line-height: 1.5;
				color: var(--wp--preset--color--dark);
				text-align: center;
				white-space: nowrap;
				background-color: var(--wp--gray-200);
				border: 1px solid var(--wp--gray-400);
				border-radius: var(--wp--input--border-radius);
			}
			.input-group-lg > .form-control,
			.input-group-lg > .form-select,
			.input-group-lg > .input-group-text,
			.input-group-lg > .wp-element-button {
				padding: 0.5rem 1rem;
				font-size: var(--wp--preset--font-size--medium);
				border-radius: 0.5rem;
			}
			.input-group-sm > .form-control,
			.input-group-sm > .form-select,
			.input-group-sm > .input-group-text,
			.input-group-sm > .wp-element-button {
				padding: 0.25rem 0.5rem;
				font-size: var(--wp--preset--font-size--small);
				border-radius: 0.25rem;
			}
			.input-group-lg > .form-select,
			.input-group-sm > .form-select {
				padding-right: 3rem;
			}
			.input-group:not(.has-validation) > :not(:last-child):not(.dropdown-toggle):not(.dropdown-menu):not(.form-floating),
			.input-group:not(.has-validation) > .dropdown-toggle:nth-last-child(n+3),
			.input-group:not(.has-validation) > .form-floating:not(:last-child) > .form-control,
			.input-group:not(.has-validation) > .form-floating:not(:last-child) > .form-select {
				border-top-right-radius: 0;
				border-bottom-right-radius: 0;
			}
			.input-group.has-validation > :nth-last-child(n+3):not(.dropdown-toggle):not(.dropdown-menu):not(.form-floating),
			.input-group.has-validation > .dropdown-toggle:nth-last-child(n+4),
			.input-group.has-validation > .form-floating:nth-last-child(n+3) > .form-control,
			.input-group.has-validation > .form-floating:nth-last-child(n+3) > .form-select {
				border-top-right-radius: 0;
				border-bottom-right-radius: 0;
			}
			.input-group > :not(:first-child):not(.dropdown-menu):not(.form-floating):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback),
			.input-group > .form-floating:not(:first-child) > .form-control,
			.input-group > .form-floating:not(:first-child) > .form-select {
				margin-left: -1px;
				border-top-left-radius: 0;
				border-bottom-left-radius: 0;
			}

			/* Validation */
			.valid-feedback,
			.invalid-feedback {
				display: none;
				width: 100%;
				margin-top: 0.25rem;
				font-size: var(--wp--preset--font-size--small);
			}  
			.valid-feedback {
				color: var(--wp--preset--color--success);
			}
			.invalid-feedback {
				color: var(--wp--preset--color--danger);
			}
			.valid-tooltip,
			.invalid-tooltip {
				position: absolute;
				top: 100%;
				z-index: 5;
				display: none;
				max-width: 100%;
				padding: 0.25rem 0.5rem;
				margin-top: 0.1rem;
				font-size: var(--wp--preset--font-size--small);
				border-radius: var(--wp--input--border-radius);
			}
			.valid-tooltip {
				color: #000;
				background-color: var(--wp--preset--color--success);
			}
			.invalid-tooltip {
				color: #fff;
				background-color: var(--wp--preset--color--danger);
			}
			.was-validated :valid ~ .valid-feedback,
			.was-validated :valid ~ .valid-tooltip,
			.is-valid ~ .valid-feedback,
			.is-valid ~ .valid-tooltip,
			.was-validated :invalid ~ .invalid-feedback,
			.was-validated :invalid ~ .invalid-tooltip,
			.is-invalid ~ .invalid-feedback,
			.is-invalid ~ .invalid-tooltip {
				display: block;
			}
			.was-validated .input-group .form-control:valid,
			.input-group .form-control.is-valid,
			.was-validated .input-group .form-select:valid,
			.input-group .form-select.is-valid {
				z-index: 1;
			}
			.was-validated .input-group .form-control:valid:focus,
			.input-group .form-control.is-valid:focus,
			.was-validated .input-group .form-select:valid:focus,
			.input-group .form-select.is-valid:focus {
				z-index: 3;
			}
			.was-validated .input-group .form-control:invalid,
			.input-group .form-control.is-invalid,
			.was-validated .input-group .form-select:invalid,
			.input-group .form-select.is-invalid {
				z-index: 2;
			}
			.was-validated .input-group .form-control:invalid:focus,
			.input-group .form-control.is-invalid:focus,
			.was-validated .input-group .form-select:invalid:focus,
			.input-group .form-select.is-invalid:focus {
				z-index: 3;
			}
		';

		foreach( self::$loaded as $class ) {
			if( ! empty( $deps = $this->get( $class )::$style_deps ) ) {
				foreach( $deps as $dep ) {
					$inline .= $this->get( $dep )::styles();
				}
			}

			$inline .= $this->get( $class )::styles();
		}

		add_action( 'body_class', function( $classes ) {
			$classes[] = 'wecodeart-forms';

			return $classes;
		} );

		wecodeart( 'assets' )->add_style( $this->make_handle(), [
			'inline'	=> $inline,
		] );
		
		wecodeart( 'assets' )->add_script( $this->make_handle(), [
			'path'	=> $this->get_asset( 'js', 'modules/forms' ),
			'deps'	=> [ 'wp-hooks' ],
		] );
	}

    /**
	 * Add new classes.
	 *
	 * @param 	array  	$classes
	 *
	 * @return 	array 	Returns updated editors settings.
	 */
	public function classes( $classes ) {
		return wp_parse_args( [
			'form-label',
			'form-text',
			'form-control',
			'form-control-sm',
			'form-control-lg',
			'form-select',
			'form-select-sm',
			'form-select-lg',
			'form-range',
			'form-floating',
			'input-group',
			'input-group-sm',
			'input-group-lg',
			'input-group-text',
			'valid-feedback',
			'valid-tooltip',
			'invalid-feedback',
			'invalid-tooltip',
		], $classes );
	}
	
	/**
     * Set a given integration value.
     *
     * @param  array|string  $key
     * @param  mixed   $value
     *
     * @return void
     */
    public function register( $key, $value = null ) {
        $this->set( $key, $value );
	}

    /**
     * Set a given configuration value.
     *
     * @param  array|string  $key
     * @param  mixed   $value
     *
     * @return void
     */
    public function set( $key, $value = null ) {
        $keys = is_array( $key ) ? $key : [ $key => $value ];

        foreach ( $keys as $key => $value ) {
            $this->items[$key] = apply_filters( "wecodeart/inputs/set/{$key}", $value );
        }
    }

	/**
     * Determine if the given configuration value exists.
     *
     * @param  string  $key
     *
     * @return bool
     */
    public function has( $key ) {
        return isset( $this->items[$key] );
    }

    /**
     * Get the specified configuration value.
     *
     * @param  string  $key
     * @param  mixed   $default
     *
     * @return mixed
     */
    public function get( $key, $default = null ) {
        if ( ! isset( $this->items[$key] ) ) {
            return $default;
        }

        return apply_filters( "wecodeart/inputs/get/{$key}", $this->items[$key] );
	}

    /**
     * Forget a given configuration value.
     *
     * @param string  $key
     *
     * @return void
     */
    public function forget( $key ) {
        unset( $this->items[$key] );
    }

    /**
     * Get all of the configuration items for the application.
     *
     * @return array
     */
    public function all() {
        return $this->items;
    }
}