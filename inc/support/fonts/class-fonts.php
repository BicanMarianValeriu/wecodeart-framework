<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Support\Fonts
 * @copyright   Copyright (c) 2022, WeCodeArt Framework
 * @since 		5.5.8
 * @version		5.5.8
 */

namespace WeCodeArt\Support;

defined( 'ABSPATH' ) || exit;

use WeCodeArt\Singleton;
use WeCodeArt\Integration;
use WeCodeArt\Conditional\Traits\No_Conditionals;

/**
 * The Fonts object.
 */
final class Fonts implements Integration {

    use Singleton;
	use No_Conditionals;

	/**
	 * The CSS ID + Folder for registered style.
	 *
	 * @var string
	 */
	const CSS_ID = 'wecodeart-fonts';
	const OPTION = 'wecodeart-fonts';
	const FOLDER = 'fonts';

	/**
	 * Google Fonts.
	 *
	 * @var	null|object
	 */
	public $Google = null;

	/**
	 * Init
	 */
	public function init() {
		$this->Google = Fonts\Google::get_instance();
	}

	/**
	 * Send to Constructor
	 */
	public function register_hooks() {
		// self::clear_cache();
	}

	/**
	 * Compile font options from different sources.
	 *
	 * @return array    All available fonts.
	 */
	public static function get_fonts( string $type = 'all' ) {
		$data = [];

		switch ($type):
			case 'all':
				$data = array_merge( self::get_standard_fonts(), self::get_google_fonts() );
			break;
			case 'system':
				$data = self::get_standard_fonts();
			break;
			case 'google':
				$data = self::get_google_fonts();
			break;
		endswitch;

		return $data;
	}

	/**
	 * Return an array of standard websafe fonts.
	 *
	 * @return array    Standard websafe fonts.
	 */
	public static function get_standard_fonts() {
		return apply_filters( 'wecodeart/filter/fonts/standard', [
			[
				'family' => 'Arial, Helvetica, sans-serif'
			],
			[
				'family' => 'Arial Black, Gadget, sans-serif'
			],
			[
				'family' => 'Bookman Old Style, serif'
			],
			[
				'family' => 'Comic Sans MS, cursive'
			],
			[
				'family' => 'Courier, monospace'
			],
			[
				'family' => 'Georgia, serif'
			],
			[
				'family' => 'Garamond, serif'
			],
			[
				'family' => 'Impact, Charcoal, sans-serif'
			],
			[
				'family' => 'Lucida Console, Monaco, monospace'
			],  
			[
				'family' => 'Lucida Sans Unicode, Lucida Grande, sans-serif'
			],  
			[
				'family' => 'MS Sans Serif, Geneva, sans-serif'
			],  
			[
				'family' => 'Palatino Linotype, Book Antiqua, Palatino, serif'
			],  
			[
				'family' => 'Tahoma, Geneva, sans-serif'
			],  
			[
				'family' => 'Times New Roman, Times, serif'
			],
			[
				'family' => 'Trebuchet MS, Helvetica, sans-serif'
			],
			[
				'family' => 'Verdana, Geneva, sans-serif'
			],
			[
				'family' => 'Paratina Linotype'
			],
			[
				'family' => 'Trebuchet MS'
			],
		] );
	}
	
	/**
	 * Return an array of standard websafe fonts.
	 *
	 * @return array    Standard websafe fonts.
	 */
	public static function get_google_fonts() {
		return apply_filters( 'wecodeart/filter/fonts/google', Fonts::get_instance()->Google::get_fonts() );
	}

	/**
	 * Returns an array of all available subsets.
	 *
	 * @return array
	 */
	public static function get_subsets() {
		return [
            'cyrillic'     => 'Cyrillic',
			'cyrillic-ext' => 'Cyrillic Extended',
			'devanagari'   => 'Devanagari',
			'greek'        => 'Greek',
			'greek-ext'    => 'Greek Extended',
			'khmer'        => 'Khmer',
			'latin'        => 'Latin',
			'latin-ext'    => 'Latin Extended',
			'vietnamese'   => 'Vietnamese',
			'hebrew'       => 'Hebrew',
			'arabic'       => 'Arabic',
			'bengali'      => 'Bengali',
			'gujarati'     => 'Gujarati',
			'tamil'        => 'Tamil',
			'telugu'       => 'Telugu',
			'thai'         => 'Thai',
        ];
	}

	/**
	 * Returns an array of all available variants.
	 *
	 * @return array
	 */
	public static function get_variants() {
		return [
            '100'       => esc_html__( 'Ultra-Light 100', 'wecodeart' ),
			'100light'  => esc_html__( 'Ultra-Light 100', 'wecodeart' ),
			'100italic' => esc_html__( 'Ultra-Light 100 Italic', 'wecodeart' ),
			'200'       => esc_html__( 'Light 200', 'wecodeart' ),
			'200italic' => esc_html__( 'Light 200 Italic', 'wecodeart' ),
			'300'       => esc_html__( 'Book 300', 'wecodeart' ),
			'300italic' => esc_html__( 'Book 300 Italic', 'wecodeart' ),
			'400'       => esc_html__( 'Normal 400', 'wecodeart' ),
			'regular'   => esc_html__( 'Normal 400', 'wecodeart' ),
			'italic'    => esc_html__( 'Normal 400 Italic', 'wecodeart' ),
			'500'       => esc_html__( 'Medium 500', 'wecodeart' ),
			'500italic' => esc_html__( 'Medium 500 Italic', 'wecodeart' ),
			'600'       => esc_html__( 'Semi-Bold 600', 'wecodeart' ),
			'600bold'   => esc_html__( 'Semi-Bold 600', 'wecodeart' ),
			'600italic' => esc_html__( 'Semi-Bold 600 Italic', 'wecodeart' ),
			'700'       => esc_html__( 'Bold 700', 'wecodeart' ),
			'700italic' => esc_html__( 'Bold 700 Italic', 'wecodeart' ),
			'800'       => esc_html__( 'Extra-Bold 800', 'wecodeart' ),
			'800bold'   => esc_html__( 'Extra-Bold 800', 'wecodeart' ),
			'800italic' => esc_html__( 'Extra-Bold 800 Italic', 'wecodeart' ),
			'900'       => esc_html__( 'Ultra-Bold 900', 'wecodeart' ),
			'900bold'   => esc_html__( 'Ultra-Bold 900', 'wecodeart' ),
			'900italic' => esc_html__( 'Ultra-Bold 900 Italic', 'wecodeart' ),
        ];
	}

	/**
	 * Clear All Caches.
	 *
	 * @return boolean.
	 */
	public static function clear_cache() {
		// Clear Saved Option
		delete_option( self::OPTION );

		// Clear Google Cache
		Fonts::get_instance()->Google::clear_cache();

		// Clear Folder
		wecodeart( 'files' )->set_folder( 'fonts' );

		$objects = new \RecursiveDirectoryIterator( wecodeart( 'files' )->folder );
		foreach( $objects as $name => $object ) {
			$parts 	= explode( DIRECTORY_SEPARATOR, $name );
			$name 	= end( $parts );

			if( in_array( $name, [ '.', '..' ] ) ) continue;

			wecodeart( 'files' )->clean_folder( $name );
		}

		wecodeart( 'files' )->set_folder( '' );

		return true;
	}
}