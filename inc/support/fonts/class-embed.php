<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Support\Embed
 * @copyright   Copyright (c) 2020, WeCodeArt Framework
 * @since 		4.2.0
 * @version		4.2.0
 */

namespace WeCodeArt\Support\Fonts;

defined( 'ABSPATH' ) || exit;

use WeCodeArt\Customizer;
use function WeCodeArt\Functions\compress_css;

/**
 * Manages the way Google Fonts are enqueued.
 */
class Embed {
	
	use \WeCodeArt\Singleton;
	use \WeCodeArt\Core\Scripts\Base;

	/**
	 * Fonts to load.
	 *
	 * @access 	protected
	 * @since 	4.2.0
	 * @var 	array
	 */
	protected $fonts_to_load 	= [];
	protected $handler 			= null;

	/**
	 * Init.
	 *
	 * @access 	public
	 * @since 	4.2.0
	 * @return 	void
	 */
	public function init() {
		$this->handler = Handler::get_instance();
		$this->populate_fonts();
		
		add_action( 'customize_save',		[ $this, 'collect_css'		], 10, 1 );
		add_filter( 'wp_resource_hints', 	[ $this, 'resource_hints' 	], 10, 2 );
		add_action( 'wp_enqueue_scripts',	[ $this, 'enqueue_scripts'	], 10 );
	}

	/**
	 * Enqueue Google Fonts.
	 *
	 * @access 	public
	 * @return 	void
	 */
	public function enqueue_scripts() {
		if( $this->handler->has_css_file() === false ) return;

		wp_enqueue_style(
			$this->make_handle( null, 'wecodeart-fonts' ),
			$this->handler->get_css_url(),
			[],
			wecodeart( 'version' )
		);
	}

	/**
	 * Add preconnect for Google Fonts.
	 *
	 * @access 	public
	 * @param 	array  	$urls           URLs to print for resource hints.
	 * @param 	string 	$relation_type  The relation type the URLs are printed.
	 * @return 	array 	$urls           URLs to print for resource hints.
	 */
	public function resource_hints( $urls, $relation_type ) {
		$fonts_to_load = Google::get_instance()->fonts;

		if ( ! empty( $fonts_to_load ) && 'preconnect' === $relation_type ) {
			if ( version_compare( $GLOBALS['wp_version'], '4.7-alpha', '>=' ) ) {
				$urls[] = [
					'href' 	=> 'https://fonts.gstatic.com',
					'crossorigin',
				];
			} else {
				$urls[] = 'https://fonts.gstatic.com';
			}
		}

		return $urls;
	}

	/**
	 * Populate Google Fonts.
	 *
	 * @access 	public
	 * @since 	4.2.0
	 */
	public function populate_fonts() {
		// Process Google Fonts
		$google_fonts = Google::get_instance()->loop_fields()->process_fonts();

		foreach ( $google_fonts->fonts as $font ) {
			$this->fonts_to_load[] = wp_parse_args( [
				'variants' 	=> array_map( function( $val ) {
					if ( 'italic' === $val ) return '400i';
					return str_replace( [ 'regular', 'bold', 'italic' ], [ '400', '', 'i'  ], $val );
				}, $font['variants'] ),
				'subsets'	=> [ 'latin', 'latin-ext' ]
			], $font );
		}
	}

	/**
	 * Collect Google Fonts CSS.
	 *
	 * @access 	public
	 * @since 	4.2.0
	 */
	public function collect_css() {
		$css = '';

		// Get Fonts
		foreach( $this->fonts_to_load as $font ) $css .= $this->handler->get_styles( $font );

		// Customizer Typography
		$fonts_control = get_theme_mod( 'general-typography-primary', false );
		if( $fonts_control ) {
			$css .= compress_css( "
				:root {
					--bs-font-sans-serif: '{$fonts_control['family']}', sans-serif;
				}
				body {
					font-family: '{$fonts_control['family']}', sans-serif;
				}
			" );
		}

		$this->handler->create_css_file( $css );
	}
}