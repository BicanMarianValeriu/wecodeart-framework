<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Support\Fonts\Handler
 * @copyright   Copyright (c) 2021, WeCodeArt Framework
 * @since 		4.2.0
 * @version		4.2.0
 */

namespace WeCodeArt\Support\Fonts;

defined( 'ABSPATH' ) || exit;

use WeCodeArt\Singleton;
use WeCodeArt\Admin\Request;
use WeCodeArt\Support\FileSystem;

/**
 * Fonts-downloading manager.
 *
 * @since 4.2.0
 */
class Handler {

	use Singleton;

	/**
	 * WCA FileSystem
	 *
	 * @access 	protected
	 * @since 	4.2.0
	 * @var 	mixed
	 */
	protected 	$FS		= null;
	const 		FILE	= 'google-fonts.css';

	/**
	 * Init.
	 *
	 * @access 	public
	 * @since 	4.2.0
	 * @return 	void
	 */
	public function init() {
		$this->FS = FileSystem::get_instance()->set_folder( 'css' );
	}

	/**
	 * Get CSS url for post.
	 *
	 * @return  string File url.
	 */
	public function get_css_url() {
		return $this->FS->get_file_url( self::FILE, true );
	}

	/**
	 * Check if we have a CSS file for this post.
	 * @access  public
	 * @since   4.2.0
	 * @return  bool
	 */
	public function has_css_file() {
		return $this->FS->has_file( self::FILE );
	}

	/**
	 * Function to save CSS into WeCodeArt Folder.
	 *
	 * @access  public
	 * @since   4.2.0
	 * @param   string $css CSS string.
	 * @return  bool
	 */
	public function create_css_file( $css ) {
		return $this->FS->create_file( self::FILE, $css );
	}

	/**
	 * Get styles from URL.
	 *
	 * @access 	public
	 * @since 	4.2.0
	 * @param 	string 		$font The URL.
	 * @return 	string
	 */
	public function get_styles( $font ) {
		$url = $this->get_font_url( $font );
		$css = $this->get_cached_url_contents( $url );
		return $this->get_local_font_styles( $css );
	}

	/**
	 * Get styles with fonts downloaded locally.
	 *
	 * @access 	protected
	 * @since 	4.2.0
	 * @param 	string 		$css The styles.
	 * @return 	string
	 */
	protected function get_local_font_styles( $css ) {
		$files = $this->get_local_files_from_css( $css );

		// Convert paths to URLs.
		foreach ( $files as $remote => $local ) {
			$files[ $remote ] = str_replace( WP_CONTENT_DIR, content_url(), $local );
		}

		return str_replace( array_keys( $files ), array_values( $files ), $css );
	}

	/**
	 * Download files mentioned in our CSS locally.
	 *
	 * @access 	protected
	 * @since 	4.2.0
	 * @param 	string 		$css The CSS we want to parse.
	 * @return 	array      	Returns an array of remote URLs and their local counterparts.
	 */
	protected function get_local_files_from_css( $css ) {
		$this->FS->set_folder( 'fonts' );

		$font_files = $this->get_files_from_css( $css );
		$stored     = get_option( 'wecodeart-fonts', [] );
		$change     = false; // If in the end this is true, we need to update the cache option.

		foreach( $font_files as $font_family => $files ) {
			// The folder path for this font-family.
			$this->FS->set_folder( 'fonts/' . $font_family );

			foreach ( $files as $url ) {
				// Get the filename.
				$filename  = basename( wp_parse_url( $url, PHP_URL_PATH ) );
				$font_path = $this->FS->folder . '/' . $filename;

				if ( file_exists( $font_path ) ) {
					// Skip if already cached.
					if ( isset( $stored[ $url ] ) ) continue;
					$stored[ $url ] = $font_path;
					$change         = true;
				}

				// Download file to temporary location.
				$tmp_path = download_url( $url );

				// Make sure there were no errors.
				if ( is_wp_error( $tmp_path ) ) continue;

				// Move temp file to final destination.
				$success = $this->FS->get_filesystem()->move( $tmp_path, $font_path, true );
				if ( $success ) {
					$stored[ $url ] = $font_path;
					$change         = true;
				}
			}
		}

		if ( $change ) {
			update_option( 'wecodeart-fonts', $stored );
		}

		// Revert back the Path
		$this->FS->set_folder( 'css' );

		return $stored;
	}

	/**
	 * Get font files from the CSS.
	 *
	 * @access 	public
	 * @since 	4.2.0
	 * @param 	string 	$css 	The CSS we want to parse.
	 * @return 	array      		Returns an array of font-families and the font-files used.
	 */
	public function get_files_from_css( $css ) {
		$font_faces = explode( '@font-face', $css );
		$result = [];

		// Loop all our font-face declarations.
		foreach( $font_faces as $font_face ) {
			// Make sure we only process styles inside this declaration.
			$style = explode( '}', $font_face )[0];

			// Sanity check.
			if ( false === strpos( $style, 'font-family' ) ) continue;

			// Get an array of our font-families.
			preg_match_all( '/font-family.*?\;/', $style, $font_families );

			// Get an array of our font-files.
			preg_match_all( '/url\(.*?\)/i', $style, $font_files );

			// Get the font-family name.
			$font_family = 'unknown';
			if ( isset( $font_families[0] ) && isset( $font_families[0][0] ) ) {
				$font_family = rtrim( ltrim( $font_families[0][0], 'font-family:' ), ';' );
				$font_family = trim( str_replace( array( "'", ';' ), '', $font_family ) );
				$font_family = sanitize_key( strtolower( str_replace( ' ', '-', $font_family ) ) );
			}

			// Make sure the font-family is set in our array.
			if ( ! isset( $result[ $font_family ] ) ) {
				$result[ $font_family ] = [];
			}

			// Get files for this font-family and add them to the array.
			foreach( $font_files as $match ) {
				// Sanity check.
				if ( ! isset( $match[0] ) ) continue;

				// Add the file URL.
				$result[ $font_family ][] = rtrim( ltrim( $match[0], 'url(' ), ')' );
			}

			// Make sure we have unique items.
			// We're using array_flip here instead of array_unique for improved performance.
			$result[ $font_family ] = array_flip( array_flip( $result[ $font_family ] ) );
		}

		return $result;
	}

	/**
	 * Get cached url contents.
	 * If a cache doesn't already exist, get the URL contents from remote and cache the result.
	 *
	 * @access 	public
	 * @since 	4.2.0
	 * @param 	string 	$url        The URL we want to get the contents from.
	 * @param 	string 	$user_agent	The user-agent to use for our request.
	 * @return 	string            	Returns the remote URL contents.
	 */
	public function get_cached_url_contents( $url = '', $user_agent = null ) {
		// Try to retrieved cached response from the gfonts API.
		$contents         = false;
		$cached_responses = get_transient( 'wecodeart/fonts/google/remote' );
		$cached_responses = ( $cached_responses && is_array( $cached_responses ) ) ? $cached_responses : [];

		if ( isset( $cached_responses[ md5( $url . $user_agent ) ] ) ) {
			return $cached_responses[ md5( $url . $user_agent ) ];
		}

		// Get the contents from remote.
		$contents = $this->get_url_contents( $url, $user_agent );

		// If we got the contents successfully, store them in a transient.
		if ( $contents ) {
			$cached_responses[ md5( $url . $user_agent ) ] = $contents;
			set_transient( 'wecodeart/fonts/google/remote', $cached_responses, WEEK_IN_SECONDS );
		}

		return $contents;
	}

	/**
	 * Get remote file contents.
	 *
	 * @access 	public
	 * @since 	4.2.0
	 * @param 	string 	$url		The URL we want to get the contents from.
	 * @param 	string 	$user_agent	The user-agent to use for our request.
	 * @return 	string            	Returns the remote URL contents.
	 */
	public function get_url_contents( $url = '', $user_agent = null ) {
		if ( ! $user_agent ) {
			/**
			 * The user-agent we want to use.
			 *
			 * For woff2 format, use'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:73.0) Gecko/20100101 Firefox/73.0'.
			 * The default user-agent is the only one compatible with woff (not woff2)
			 * which also supports unicode ranges.
			 */
			// $user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/603.3.8 (KHTML, like Gecko) Version/10.1.2 Safari/603.3.8';
			$user_agent = 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:73.0) Gecko/20100101 Firefox/73.0';
		}

		// Get the response.
		$request = new Request( $url, [ 'user-agent' => $user_agent ] );
		$request->send( $request::METHOD_GET );

		return $request->get_response_body();
	}

	/**
	 * Get remote file URL.
	 *
	 * @access 	public
	 * @since 	4.2.0
	 * @param 	array 	$font
	 * @return 	string	Returns the remote URL.
	 */
	public function get_font_url( $font ) {
		$_italics = array_map( function( $item ) {
			return $item . 'i';
		}, range( 100, 900, 100 ) );

		// Font Family
		$family	= str_replace( ' ', '+', trim( $font['family'] ) );

		// Font Styles
		$normal = array_diff( $font['variants'], $_italics );
		$italic = array_intersect( $font['variants'], $_italics );

		// Setup Variants
		$sets 	= implode( ',', array_filter( [ count( $italic ) ? 'ital' : '', 'wght' ] ) );
		$wght 	= count( $italic ) ? implode( ';', [
			implode( ';', array_map( function( $i ) {
				return '0,' . filter_var( $i, FILTER_SANITIZE_NUMBER_INT );
			}, $normal ) ),
			implode( ';', array_map( function( $i ) {
				return '1,' . filter_var( $i, FILTER_SANITIZE_NUMBER_INT );
			}, $italic ) )
		] ) : implode( ';', $normal );

		// Create CSS2 Url
		return add_query_arg( [
			'family' => implode( ':', [ $family, implode( '@', [ $sets, $wght ] ) ] ),
			'display'=> 'swap'
		], 'https://fonts.googleapis.com/css2' );
	}
}