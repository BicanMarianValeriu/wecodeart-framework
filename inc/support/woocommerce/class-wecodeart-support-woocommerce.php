<?php namespace WeCodeArt\Support;
// Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) ) exit;
use WeCodeArt\Core\Content;
use WeCodeArt\Core\Pagination;
use WeCodeArt\Utilities\Markup;
use WeCodeArt\Customizer;

/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Support\WooCommerce
 * @copyright   Copyright (c) 2019, WeCodeArt Framework
 * @since 		v1.9
 * @version		v3.5
 */

/**
 * The Class: Handles all necesary functions and requirements 
 * to ensure proper support for WooCommerce
 */
class WooCommerce {
	/**
	 * Instance
	 *
	 * @access 	private
	 * @var 	object
	 */
	private static $instance;

	/**
	 * Initiator
	 */
	public static function get_instance() {
		if ( ! isset( self::$instance ) ) self::$instance = new self;
		return self::$instance;
	}

	public function __construct() {
		// Customizer Options
		WooCommerce\Customizer::get_instance();

		// Add support for WooCommerce
		add_action( 'after_setup_theme', array( $this, 'after_setup_theme' ) );

		// Widgets and Hook into Sidebar
		remove_action( 'woocommerce_sidebar', 'woocommerce_get_sidebar'	);
		add_action( 'widgets_init', array( $this, 'register_shop_sidebars' ) );

		// Pagination - we use our own hooks and we have numeric pagination
		remove_action( 'woocommerce_after_shop_loop', 'woocommerce_pagination', 10 ); 

		// Content Wrappers
		remove_action( 'woocommerce_before_main_content', 	'woocommerce_output_content_wrapper',	   	10 );
		add_action( 'woocommerce_before_main_content',    	array( $this, 'before_content_wrapp' ), 	10 );
		remove_action( 'woocommerce_after_main_content',  	'woocommerce_output_content_wrapper_end',  	10 );
		add_action( 'woocommerce_after_main_content',    	array( $this, 'after_content_wrapp' ),  	10 );

		// Filters
		add_filter( 'wecodeart/filter/header-bar/modules', 	[ $this, 'add_cart_to_header_modules' ] );
		add_filter( 'woocommerce_add_to_cart_fragments',	[ $this, 'cart_count_fragments' ], 10, 1 );
	}
	
	/**
	 * Sets up theme defaults and registers support for various WordPress features.
	 * @since	unknown
	 */
	function after_setup_theme() {
		add_theme_support( 'woocommerce' );
		add_theme_support( 'wc-product-gallery-zoom' );
		add_theme_support( 'wc-product-gallery-lightbox' );
		add_theme_support( 'wc-product-gallery-slider' );
	}  
	
	/**
	 * Before Content
	 * Wraps all WooCommerce content in wrappers which match the theme markup
	 * @since   3.5
	 * @return  void
	 */
	public function before_content_wrapp() {
		$default = Customizer::get_defaults( 'content-layout-container' );
		if( WooCommerce\Callbacks::_is_woocommerce_archive() === true ) {
			$wrapper = get_theme_mod( 'content-layout-container-product-archive', $default );
		}

		if( is_product() ) {
			$wrapper = get_theme_mod( 'content-layout-container-product-singular', $default  );
		} ?>
		<div class="content-area content-area--woocommerce">
			<div class="<?php echo sanitize_html_class( $wrapper ); ?>">
				<div class="grid-x grid-padding-x grid-padding-y">
		<?php
				self::sort_modules( 'before' );
				Content::get_instance()->content_markup_open();
	}

	/**
	 * After Content
	 * Wraps all WooCommerce content in wrappers which match the theme markup
	 * @since   3.5
	 * @return  void
	 */
	public function after_content_wrapp() { 
				Content::get_instance()->content_markup_close();
				self::sort_modules( 'after' ); ?>
				</div>
			</div>
		</div>
		<?php
	}
	
	/**
	 * Sort Content Modules based on position
	 * @param string $position Accepts before/after - render sorted modules before/after woocommerce content.
	 */
	public static function sort_modules( string $position ) {
		$default = Customizer::get_defaults( 'content-layout-modules' );

		if( WooCommerce\Callbacks::_is_woocommerce_archive() === true ) {
			$modules = get_theme_mod( 'content-layout-modules-product-archive', $default ); 
		}

		if( is_product() ) {
			$modules = get_theme_mod( 'content-layout-modules-product-singular', $default ); 
		} 

		$index = array_search( 'content', $modules ); 
		if( $position == 'after' ) $elements = array_slice( $modules, $index + 1 );
		if( $position == 'before') $elements = array_slice( $modules, 0, $index, false ); 

		$sortable = wp_parse_args( [
			'primary' => [
				'callback' => [ __CLASS__, 'display_shop_sidebar' ]
			]
		], \WeCodeArt\Core\Content::content_modules() );

		// Sort the modules based on context
		Markup::sortable( $sortable, $elements );
	}

	/**
	 * Register WooCommerce Shop Sidebar
	 * @since	v3.3
	 * @version v3.5
	 */
	public function register_shop_sidebars() {
		$shop = array(
			'class'         => 'shop',
			'id'            => 'shop-1',
			'name'          => __( 'Shop Sidebar', 'wecodeart' ),
			'description'   => __( 'This is the Shop Sidebar - it will replace Primary Sidebar.', 'wecodeart' ),
			'before_widget' => '<div id="%1$s" class="widget %2$s">',
			'after_widget'  => '</div>',
		);

		register_sidebar( $shop );
	}

	/**
	 * Get Shop Sidebar HTML
	 * @since	v3.5
	 */
	public static function display_shop_sidebar() {
		// Adds ability to filter the attributes of secondary sidebar
		$attributes = Markup::generate_attr(
			'sidebar-shop',
			[
				'id' => 'secondary-shop',
				'class' => 'content__sidebar content__sidebar--shop cell small-12 large-4'
			]
		);
		?>
		<div <?php echo $attributes; ?>>
			<?php
				get_template_part( 'views/sidebars/sidebar', 'shop' );
			?>
		</div>
		<?php
	}

	/**
	 * Filter - WooCommerce Header Bar Cart Module
	 * @since	v3.5
	 */
	public function add_cart_to_header_modules( $modules ) {
		$modules['cart'] = array(
			'label'    => __( 'WooCommerce Cart', 'wecodeart' ),
			'callback' => [ __CLASS__, 'display_cart_module' ],
		);

		return $modules;
	} 

	/**
	 * Render Header Bar Cart Module
	 * @since   3.5
	 * @version 3.5.0.2
	 * @return  void
	 */
	public static function display_cart_module() {
		// Defaults
		$defaults = array (
			'class'		=> 'header-bar__cart cell shrink',
			'button'	=> [
				'sr_text' => __( 'Show Cart', 'wecodeart' ),
				'class' => 'button dropdown arrow-only',
				'label' => '' // Not used yet - uses WooCommerce Cart Data
			] 
		);

		$args = apply_filters( 'wecodeart/filter/woocommerce/header_cart/defaults', $defaults );
		?>
		<div id="bar-cart" class="<?php echo esc_attr( $args['class'] ) ?>">
			<button id="mini-cart" type="button" 
				class="<?php echo esc_attr( $args['button']['class'] ) ?>"
				title="<?php esc_attr_e( 'View your shopping cart', 'wecodeart' ); ?>"
				data-toggle="woocommerce-cart">
				<span class="show-for-sr"><?php esc_html_e( $args['button']['sr_text'] ); ?></span>
				<span class="header-bar__cart-subtotal">
					<?php echo wp_kses_post( WC()->cart->get_cart_subtotal() ); ?>
				</span>
				<span class="header-bar__cart-count">
					<?php 
						echo wp_kses_data( 
							sprintf( 
								_n( '%d item', '%d items', WC()->cart->get_cart_contents_count(), 'wecodeart' ), 
								WC()->cart->get_cart_contents_count() 
							) 
						); 
					?>
				</span>
			</button>
			<div class="dropdown-pane" id="woocommerce-cart" data-dropdown data-hover="true" data-hover-pane="true">
				<div class="widget_shopping_cart_content"></div>
			</div>
		</div>
		<!-- /bar-cart -->
		<?php
	}

	/**
	 * Filter - Cart Fragments
	 * @since v3.5
	 */
	public function cart_count_fragments( $fragments ) {
		$totalFragment = '<span class="header-bar__cart-subtotal">' . wp_kses_post( 
			WC()->cart->get_cart_subtotal() 
		) . '</span>';
		$countFragment = '<span class="header-bar__cart-count">' . wp_kses_data( 
			sprintf( 
				_n( '%d item', '%d items', WC()->cart->get_cart_contents_count(), 'wecodeart' ), 
				WC()->cart->get_cart_contents_count() 
			) 
		) . '</span>';

		$fragments['span.header-bar__cart-subtotal'] = $totalFragment;
		$fragments['span.header-bar__cart-count'] = $countFragment;
		return $fragments;
	} 
}