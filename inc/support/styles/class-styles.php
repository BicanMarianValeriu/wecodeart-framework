<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Support\Styles
 * @copyright   Copyright (c) 2021, WeCodeArt Framework
 * @since 		4.2.0
 * @version		4.2.0
 */

namespace WeCodeArt\Support;

defined( 'ABSPATH' ) || exit;

use WeCodeArt\Singleton;
use WeCodeArt\Customizer;
use WeCodeArt\Integration;
use WeCodeArt\Admin\Request;

/**
 * The Fonts object.
 */
final class Styles implements Integration {

    use Singleton;

	/**
	 * Get Conditionals
	 *
	 * @return void
	 */
	public static function get_conditionals() {
		return [];
	}

	/**
	 * Send to Constructor
	 *
	 * @since 	3.6.2
	 * @version	4.1.5
	 */
	public function register_hooks() {}

    /**
     * Trim CSS
     *
     * @since 	3.7.7
     * @version 4.2.0
     * @param 	string $css CSS content to trim.
     *
     * @return 	string
     */
    public static function compress( $css = '' ) {
        // Return if no CSS
        if ( ! $css ) {
            return '';
        }

        // remove comments
        $css = preg_replace( '!/\*[^*]*\*+([^/][^*]*\*+)*/!', '', $css );

        // Normalize whitespace
        $css = preg_replace( '/\s+/', ' ', $css );

        // Remove ; before }
        $css = preg_replace( '/;(?=\s*})/', '', $css );

        // Remove space after , : ; { } */ >
        $css = preg_replace( '/(,|:|;|\{|}|\*\/|>) /', '$1', $css );

        // Remove space before , ; { }
        $css = preg_replace( '/ (,|;|\{|})/', '$1', $css );

        // Strips leading 0 on decimal values (converts 0.5px into .5px)
        $css = preg_replace( '/(:| )0\.([0-9]+)(%|em|rem|ex|px|in|cm|mm|pt|pc)/i', '${1}.${2}${3}', $css );

        // Strips units if value is 0 (converts 0px to 0)
        $css = preg_replace( '/(:| )(\.?)0(%|em|rem|ex|px|in|cm|mm|pt|pc)/i', '${1}0', $css );

        // Trim
        $css = trim( $css );
        
        // Double call for media queries
        $css = self::clean_empty( $css );
		$css = self::clean_empty( $css );
		
        // Return minified CSS
        return $css;
    }

    /**
     * Get CSS without empty selector
     * Call after minification of CSS
     *
     * @since   4.2.0
     * @access  public
     *
     * @param   string $css
     * @return  string
     */
    public static function clean_empty( $css ) {
        $css_explode        = explode( '}', $css );
        $result             = '';
        $double_braces_open = false;
        foreach ( $css_explode as $index => $item ) {
            $is_double_braces = substr_count( $item, '{' ) > 1;
            if ( $is_double_braces || ( $item != '' && substr( $item, -1 ) != '{' ) ) {
                if ( $is_double_braces ) {
                    $inner_explode = explode( '{', $item );
                    $inner_item    = $inner_explode[0] . '{';
                    if ( isset( $inner_explode[2] ) && $inner_explode[2] != '' ) {
                        $inner_item .= $inner_explode[1] . '{' . $inner_explode[2] . '}';
                    }
                    $result .= $inner_item;
                } else {
                    $result .= $item . '}';
                }

                if ( $is_double_braces ) {
                    $double_braces_open = true;
                }
            }
            if ( $double_braces_open && $item == '' ) {
                $result            .= '}';
                $double_braces_open = false;
            }
        }

        return $result;
    }

    /**
	 * Gets the array of generated styles and creates the minimized, inline CSS.
	 *
	 * @static
	 * @access 	public
	 * @param 	array   $css    The CSS definitions array.
	 * @return 	string          The generated CSS.
	 */
	public static function parse( $css = [] ) {
		// Pass our styles from the kirki_styles_array filter.
		$css = apply_filters( 'wecodeart/filter/styles/array', $css );

		// Process the array of CSS properties and produce the final CSS.
		$final_css = '';

		if ( ! is_array( $css ) || empty( $css ) ) {
			return $final_css;
		}

		foreach( $css as $media_query => $selectors ) {
			$final_css .= ( 'global' !== $media_query ) ? $media_query . '{' : '';
			foreach( $selectors as $selector => $properties ) {
				$css_for_style = '';
				foreach ( $properties as $property => $value ) {
					if ( is_string( $value ) && '' !== $value ) {
						$css_for_style .= $property . ':' . $value . ';';
					} elseif ( is_array( $value ) ) {
						foreach ( $value as $subvalue ) {
							if ( is_string( $subvalue ) && '' !== $subvalue ) {
								$css_for_style .= $property . ':' . $subvalue . ';';
							}
						}
					}
					$value = ( is_string( $value ) ) ? $value : '';
				}
				if ( '' !== $css_for_style ) {
					$final_css .= $selector . '{' . $css_for_style . '}';
				}
			}
			$final_css .= ( 'global' !== $media_query ) ? '}' : '';
		}

		return $final_css;
	}

	/**
	 * Add prefixes if necessary.
	 *
	 * @param  array $css The CSS definitions array.
	 * @return array
	 */
	public static function add_prefixes( $css ) {
		if( is_array( $css ) ) {
			foreach( $css as $media_query => $elements ) {
				foreach( $elements as $element => $style_array ) {
					foreach( $style_array as $property => $value ) {
						// Add -webkit-* and -moz-*.
						if ( is_string( $property ) && in_array( $property, [
							'border-radius',
							'box-shadow',
							'box-sizing',
							'text-shadow',
							'transform',
							'background-size',
							'transition',
							'transition-property',
						], true ) ) {
							unset( $css[ $media_query ][ $element ][ $property ] );
							$css[ $media_query ][ $element ][ '-webkit-' . $property ] = $value;
							$css[ $media_query ][ $element ][ '-moz-' . $property ]    = $value;
							$css[ $media_query ][ $element ][ $property ]              = $value;
						}

						// Add -ms-* and -o-*.
						if ( is_string( $property ) && in_array( $property, [
							'transform',
							'background-size',
							'transition',
							'transition-property',
						], true ) ) {
							unset( $css[ $media_query ][ $element ][ $property ] );
							$css[ $media_query ][ $element ][ '-ms-' . $property ] = $value;
							$css[ $media_query ][ $element ][ '-o-' . $property ]  = $value;
							$css[ $media_query ][ $element ][ $property ]          = $value;
						}
					}
				}
			}
		}

		return $css;
    }
}