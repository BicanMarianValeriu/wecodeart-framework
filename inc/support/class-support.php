<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage  Support
 * @copyright   Copyright (c) 2023, WeCodeArt Framework
 * @since		3.5
 * @version		6.1.2
 */

namespace WeCodeArt;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Config\Interfaces\Configuration;

/**
 * Support for various plugins and features.
 */
class Support implements Configuration {

	use Singleton;

    /**
	 * The protected integrations.
     * 
     * @todo    When "modular" functionality is developed, this wont be allowed to be deleted.
	 *
	 * @var     array[]
	 */
    const PROTECTED = [
        'assets',
        'files',
        'fonts',
        'locale',
        'markup',
        'plugins',
        'starter',
        'styles'
    ];

	/**
	 * The registered integrations.
	 *
	 * @var     Integration[]
	 */
	protected $items = [];

	/**
	 * Send to Constructor
	 */
	public function init() {
		// Theme Support
		\add_action( 'after_setup_theme', [ $this, 'after_setup_theme'	] );

		// Register Default/Core Integrations
		foreach ( glob( dirname( __FILE__ ) . '/*', GLOB_ONLYDIR ) as $directory ) {
			$directory = basename( $directory );
			$this->register( $directory, 'WeCodeArt\\Support\\' . ucfirst( $directory ) );
		}

        // Register Plugin Integrations
        foreach ( glob( dirname( __FILE__ ) . '/plugins/*', GLOB_ONLYDIR ) as $directory ) {
			$directory = basename( $directory );
			$this->register( $directory, 'WeCodeArt\\Support\\Plugins\\' . ucfirst( $directory ) );
		}
	}

	/**
	 * Sets up theme defaults and registers support for various WordPress features.
	 *
	 * @since 	1.0
	 * @version	5.3.8
	 */
	public function after_setup_theme() {
		// Theme Support
		foreach( array_filter( wecodeart_config( 'support', [] ) ) as $feature => $value ) {
			if( $value === 'remove' ) {
                remove_theme_support( $feature );
                continue;
            }
			add_theme_support( $feature, $value );
		}
	}

	/**
	 * Loads all registered integrations if their conditionals are met.
	 *
	 * @return void
	 */
	public function load() {
		foreach ( $this->items as $class ) {
			if ( ! $this->conditionals_are_met( $class ) ) {
				continue;
			}
			$class::get_instance()->register_hooks();
		}
	}

	/**
	 * Checks if all conditionals of a given integration are met.
	 *
	 * @param 	Integration $class The class name of the integration.
	 *
	 * @return 	bool Whether or not all conditionals of the integration are met.
	 */
	protected function conditionals_are_met( $class ) {
		$conditionals = $class::get_conditionals();
		return wecodeart_if( $conditionals );
	}

	/**
     * Set a given integration value.
     *
     * @param  array|string  $key
     * @param  mixed   $value
     *
     * @return void
     */
    public function register( $key, $value = null ) {
        $this->set( $key, $value );
	}
	
    /**
     * Set a given integration value.
     *
     * @param  array|string  $key
     * @param  mixed   $value
     *
     * @return void
     */
    public function set( $key, $value = null ) {
        $keys = is_array( $key ) ? $key : [ $key => $value ];

        foreach ( $keys as $key => $value ) {
            $this->items[$key] = apply_filters( "wecodeart/integration/set/{$key}", $value );
        }
	}

	/**
     * Determine if the given integration value exists.
     *
     * @param  string  $key
     *
     * @return bool
     */
    public function has( $key ) {
        return isset( $this->items[$key] );
    }

    /**
     * Get the specified integration value.
     *
     * @param  string  $key
     * @param  mixed   $default
     *
     * @return mixed
     */
    public function get( $key, $default = null ) {
        if ( ! isset( $this->items[$key] ) ) {
            return $default;
        }

        return apply_filters( "wecodeart/integration/get/{$key}", $this->items[$key] );
    }
	
	/**
     * Removes integration from the container.
     *
     * @param  string  $key
     *
     * @return bool
     */
    public function forget( $key ) {
		unset( $this->items[$key] );
    }

    /**
     * Get all of the integration items for the application.
     *
     * @return array
     */
    public function all() {
        return $this->items;
    }
}