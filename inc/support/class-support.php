<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage  Support
 * @copyright   Copyright (c) 2019, WeCodeArt Framework
 * @since		3.5
 * @version		4.0.2
 */

namespace WeCodeArt;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Support\ANR;
use WeCodeArt\Support\WPSeo;
use WeCodeArt\Support\WooCommerce;

/**
 * Support for various plugins and features.
 */
class Support {

	use Singleton; 

	/**
	 * The registered integrations.
	 *
	 * @var Integration[]
	 */
	protected $integrations = [];

	/**
	 * Send to Constructor
	 */
	public function init() {
		// Theme Support
		\add_action( 'after_setup_theme', [ $this, 'register_menus'		] );
		\add_action( 'after_setup_theme', [ $this, 'after_setup_theme'	] );
		\add_action( 'after_setup_theme', [ $this, 'load_translations'	] );

		// Register Integrations
		$this->register_integration( ANR::class );
		$this->register_integration( WPSeo::class );
		$this->register_integration( WooCommerce::class );

		// Load Integrations
		$this->load_integrations();
	}

	/**
	 * Sets up theme defaults and registers support for various WordPress features.
	 *
	 * @since 	1.0
	 * @version	4.0.2
	 */
	function after_setup_theme() {
		// Add support for Meta info for posts other than Page Type 
		foreach( wecodeart( 'public_post_types' ) as $type ) { 
			add_post_type_support( $type, 'wecodeart-post-info' );
		}

		// Content width
		$GLOBALS['content_width'] = apply_filters( 'wecodeart/filter/content_width', 1280 );

		// Starter Content
		add_theme_support( 'starter-content', self::get_starter_content() );

		// Meta Modules
		add_theme_support( 'meta-modules', [ 'author', 'date', 'categories', 'tags', 'comments', 'edit' ] );

		// Automatic Feed Links
		add_theme_support( 'automatic-feed-links' );

		// Title Tag
		add_theme_support( 'title-tag' );

		// Selective refresh for widgets.
		add_theme_support( 'customize-selective-refresh-widgets' );

		// Thumbnails
		add_theme_support( 'post-thumbnails' );

		// Add support for Block Styles.
		add_theme_support( 'wp-block-styles' );

		// Add support for full and wide align images.
		add_theme_support( 'align-wide' );

		// Editor Style
		add_theme_support( 'editor-style' );

		// Custom Logo
		add_theme_support( 'custom-logo', [
			'height'      => 50,
			'width'       => 100,
		] );

		// HTML5
		add_theme_support( 'html5', [ 'gallery', 'caption' ] );

		// Responsive Embeds
		add_theme_support( 'responsive-embeds' );

		// AMP Support
		add_theme_support( 'amp', apply_filters( 'wecodeart/filter/support/amp', [ 
			'paired' => true 
		] ) );

		// Add custom editor font sizes.
		add_theme_support( 'editor-font-sizes', apply_filters( 'wecodeart/filter/support/editor-font-sizes', [
			array(
				'name'      => esc_html__( 'Small', wecodeart_config( 'textdomain' ) ),
				'shortName' => esc_html__( 'S', wecodeart_config( 'textdomain' ) ),
				'size'      => 14,
				'slug'      => 'small',
			),
			array(
				'name'      => esc_html__( 'Normal', wecodeart_config( 'textdomain' ) ),
				'shortName' => esc_html__( 'M', wecodeart_config( 'textdomain' ) ),
				'size'      => 16,
				'slug'      => 'normal',
			),

			array(
				'name'      => esc_html__( 'Large', wecodeart_config( 'textdomain' ) ),
				'shortName' => esc_html__( 'L', wecodeart_config( 'textdomain' ) ),
				'size'      => 26,
				'slug'      => 'large',
			),
			array(
				'name'      => esc_html__( 'Huge', wecodeart_config( 'textdomain' ) ),
				'shortName' => esc_html__( 'XL', wecodeart_config( 'textdomain' ) ),
				'size'      => 49.5,
				'slug'      => 'huge',
			),
		] ) );

		// Editor color palette.
		$wecodeart_colors = apply_filters( 'wecodeart/filter/support/editor-color-palette', [
			'primary' 	=> [ 'color' => '#2388ed', 'label' => esc_html__( 'Primary', 	wecodeart_config( 'textdomain' ) ) 	],
			'secondary' => [ 'color' => '#6c757d', 'label' => esc_html__( 'Secondary', 	wecodeart_config( 'textdomain' ) ) 	],
			'danger' 	=> [ 'color' => '#dc3545', 'label' => esc_html__( 'Danger', 	wecodeart_config( 'textdomain' ) )	],
			'success' 	=> [ 'color' => '#7dc855', 'label' => esc_html__( 'Success', 	wecodeart_config( 'textdomain' ) ) 	],
			'info' 		=> [ 'color' => '#17a2b8', 'label' => esc_html__( 'Info', 		wecodeart_config( 'textdomain' ) )	],
			'warning' 	=> [ 'color' => '#ffc107', 'label' => esc_html__( 'Warning', 	wecodeart_config( 'textdomain' ) )	],
			'dark' 		=> [ 'color' => '#343a40', 'label' => esc_html__( 'Dark', 		wecodeart_config( 'textdomain' ) )	],
			'light' 	=> [ 'color' => '#f1f3f7', 'label' => esc_html__( 'Light', 		wecodeart_config( 'textdomain' ) )	],
			'white' 	=> [ 'color' => '#ffffff', 'label' => esc_html__( 'White', 		wecodeart_config( 'textdomain' ) )	],
		] );

		$colors = [];
		foreach( $wecodeart_colors as $slug => $color ) {
			$colors[] = [
				'name' 	=> $color['label'],
				'slug'	=> esc_attr( strtolower( $slug ) ),
				'color'	=> sanitize_hex_color( $color['color'] ),
			];
		}

		add_theme_support( 'editor-color-palette', $colors );
	}

	/**
	 * Sets up theme starter content.
	 *
	 * @since 	4.0.2
	 * @version	4.0.2
	 */
	public static function get_starter_content() {
		// Define and register starter content to showcase the theme on new sites.
		$starter_content = array(
			'widgets'     => array(
				// Place one core-defined widgets in the first sidebar widget area.
				'primary' => array(
					'text_about',
				),
				// Place one core-defined widgets in the second footer widget areas.
				'footer-1' => array(
					'text_business_info',
				),
				'footer-2' => array(
					'text_business_info',
				),
				'footer-3' => array(
					'text_business_info',
				),
			),

			// Default to a static front page and assign the front and posts pages.
			'options'     => array(
				'show_on_front'  => 'page',
				'page_on_front'  => '{{front}}',
				'page_for_posts' => '{{blog}}',
			),

			// Set up nav menus for each of the two areas registered in the theme.
			'nav_menus'   => array(
				// Assign a menu to the "primary" location.
				'primary'  => array(
					'name'  => __( 'Primary', wecodeart_config( 'textdomain' ) ),
					'items' => array(
						'page_contact',
					),
				),
			),
		);

		/**
		 * Filters WeCodeArt array of starter content.
		 *
		 * @param array $starter_content Array of starter content.
		 */
		return apply_filters( 'wecodeart/support/starter_content', $starter_content );
	}

	/**
	 * Load Translations
	 *
	 * @since	4.0.2
	 * @version 4.0.2
	 *
	 * @return 	void
	 */
	public function load_translations() {
		// Loads wp-content/languages/themes/wecodeart-it_IT.mo.
		load_theme_textdomain(
			wecodeart_config( 'textdomain' ),
			trailingslashit( WP_LANG_DIR ) . 'themes' 
		);

		// Loads wp-content/themes/child-theme-name/languages/it_IT.mo.
		load_theme_textdomain(
			wecodeart_config( 'textdomain' ),
			trailingslashit( wecodeart_config( 'paths' )['child'] ) . wecodeart_config( 'directories' )['languages']
		);

		// Loads wp-content/themes/wecodeart/languages/it_IT.mo.
		load_theme_textdomain(
			wecodeart_config( 'textdomain' ),
			trailingslashit( wecodeart_config( 'paths' )['directory'] ) . wecodeart_config( 'directories' )['languages']
		);
	}

	/**
	 * Register Menus
	 *
	 * @since	3.9.5
	 * @version	3.9.9
	 *
	 * @return 	void
	 */
	public function register_menus() {
		$header_modules = get_theme_mod( 'header-bar-modules', [] );

		if( in_array( 'menu', $header_modules ) ) {
			// Register New Menu
			register_nav_menus( [ 
				'primary' => esc_html__( 'Primary Menu', wecodeart_config( 'textdomain' ) ) 
			] );
		}
	}

	/**
	 * Registers an integration.
	 *
	 * @param string $class The class name of the integration to be loaded.
	 *
	 * @return void
	 */
	public function register_integration( $class ) {
		$this->integrations[] = $class;
	}

	/**
	 * Loads all registered integrations if their conditionals are met.
	 *
	 * @return void
	 */
	protected function load_integrations() {
		foreach ( $this->integrations as $class ) {
			if ( ! $this->conditionals_are_met( $class ) ) {
				continue;
			}
			$class::get_instance()->register_hooks();
		}
	}

	/**
	 * Checks if all conditionals of a given integration are met.
	 *
	 * @param 	Integration $class The class name of the integration.
	 *
	 * @return 	bool Whether or not all conditionals of the integration are met.
	 */
	protected function conditionals_are_met( $class ) {
		$conditionals = $class::get_conditionals();
		return wecodeart_if( $conditionals );
	}
}