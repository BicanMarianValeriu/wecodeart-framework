<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Support\Yoast SEO
 * @copyright   Copyright (c) 2022, WeCodeArt Framework
 * @since 		3.5
 * @version		5.3.3
 */

namespace WeCodeArt\Support\Plugins;

defined( 'ABSPATH' ) || exit;

use WeCodeArt\Singleton;
use WeCodeArt\Integration;
use WeCodeArt\Admin\Notifications;
use WeCodeArt\Admin\Notifications\Notification;
use function WeCodeArt\Functions\get_prop;

/**
 * WPSEO Integration
 */
class WPSeo implements Integration {

	use Singleton; 

	const NOTICE_ID = 'wecodeart-yoast-notice';

	/**
	 * Get Conditionals
	 *
	 * @return void
	 */
	public static function get_conditionals() {
		wecodeart( 'conditionals' )->set( [
			'is_yoast_active' => WPSeo\Condition::class,
		] );
		
		return [ 'is_yoast_active' ];
	}

	/**
	 * Send to Constructor
	 */
	public function register_hooks() {
		// Notices
		add_action( 'admin_notices',	[ $this, 'manage_notice' ] );

		// Restricted Blocks
		add_filter( 'wecodeart/filter/gutenberg/restricted',	[ $this, 'restricted_gutenberg_blocks' ] );

		// Terms Template Context
		add_filter( 'wecodeart/filter/template/context', 		[ $this, 'filter_category_context' 	], 10, 2 );

		// Author Template Context
		add_filter( 'wecodeart/filter/template/context', 		[ $this, 'filter_author_context' 	], 10, 2 );
	}

	/**
	 * Manage Notice
	 *
	 * @since 	5.0.0
	 * @version	5.0.0
	 */
	public function manage_notice() {
		$notification = new Notification(
			esc_html__( 'YoastSEO support is enabled! Our theme works seamlessly with the best SEO plugin.', 'wecodeart' ),
			[
				'id'			=> self::NOTICE_ID,
				'type'     		=> Notification::INFO,
				'priority' 		=> 1,
				'class'			=> 'notice is-dismissible',
				'capabilities' 	=> 'activate_plugins',
			]
		);

		if( get_user_option( self::NOTICE_ID ) === 'seen' ) {
			Notifications::get_instance()->remove_notification( $notification );
			set_transient( self::NOTICE_ID, true, WEEK_IN_SECONDS );
			return;
		}

		if( get_transient( self::NOTICE_ID ) === false ) {
			Notifications::get_instance()->add_notification( $notification );
		}
	}

	/**
	 * Extend Author Box with Yoast's Social
	 *
	 * @since	3.9.3
	 * @version 5.3.3
	 *
	 * @return 	array
	 */
	public function filter_author_context( $args, $name ) {
		if( $name !== 'meta/author-box.php' ) {
			return $args;
		}

		$args['attributes'] = wp_parse_args( [
			'avatarSize' =>  90
		], $args['attributes'] );

		$author	= get_prop( $args, [ 'author' ] );

		$socials = [];
		foreach( [
			'url', 'facebook', 'twitter', 'instagram', 'linkedin', 'youtube', 'myspace', 'pinterest', 'thumblr', 'soundcloud', 'wikipedia'
		] as $key ) {
			$value 	= trim( get_the_author_meta( $key, $author->id ) );

			if( empty( $value ) ) continue;

			$value 	= $key === 'twitter' ? $value = "https://twitter.com/${value}" : $value;
			$value 	= esc_url( set_url_scheme( $value, 'https' ) );

			$key 	= $key === 'url' ? 'link' : $key;

			$socials[$key] = $value;
		}

		if( ! empty( $socials ) ) {
			$social_html = '<!-- wp:social-links {"iconColor":"primary","iconColorValue":"#2388ed","openInNewTab":true,"className":"is-style-logos-only"} -->';
			$social_html .= '<ul class="wp-block-social-links has-icon-color is-style-logos-only">';
	
			foreach( $socials as $key => $value ) {
				$social_html .= '<!-- wp:social-link {"url":"' . $value . '","service":"' . $key . '"} /-->';
			}
			
			$social_html .= '</ul>';
			$social_html .= '<!-- /wp:social-links -->';

			// Allow the user to filter the template array of social blocks.
			$social_html = apply_filters( 'wecodeart/filter/wpseo/author/social', parse_blocks( $social_html ), $author, $socials );

			// Convert to string and render those social blocks.
			$args['social'] = do_blocks( serialize_blocks( $social_html ) );
		}

		return $args;
	}

	/**
	 * Extend Category with Yoast's Primary Term
	 *
	 * @since	4.1.52
	 * @version	5.0.0
	 *
	 * @return 	array
	 */
	public function filter_category_context( $args, $name ) {
		if( $name !== 'entry/meta/terms.php' ) {
			return $args;
		}
		
		if( $meta = get_post_meta( get_prop( $args, 'post_id' ), '_yoast_wpseo_primary_category', true ) ) {
			$args['primary'] = (int) $meta;
		}

		return $args;
	}

	/**
	 * Filter - Restricted Yoast Blocks from theme code
	 *
	 * @since	5.0.0
	 * @version	5.0.0
	 *
	 * @return 	array
	 */
	public function restricted_gutenberg_blocks( $blocks ) {
		return wp_parse_args( [
			'yoast-seo/breadcrumbs',
		], $blocks );
	}
}