<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  RankMath\Blocks
 * @copyright   Copyright (c) 2023, WeCodeArt Framework
 * @since		6.1.2
 * @version		6.2.0
 */

namespace WeCodeArt\Support\Plugins\RankMath\Blocks;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Gutenberg\Blocks\Dynamic;

use function WeCodeArt\Functions\get_prop;
use function WeCodeArt\Functions\get_dom_element;
use function WeCodeArt\Functions\change_tag_name;
use function WeCodeArt\Functions\get_elements_by_class_name;

/**
 * Gutenberg RankMath FAQ block.
 */
class Faq extends Dynamic {

	use Singleton;

	/**
	 * Block namespace.
	 *
	 * @var string
	 */
	protected $namespace = 'rank-math';

	/**
	 * Block name.
	 *
	 * @var string
	 */
	protected $block_name = 'faq-block';

	/**
	 * Block args.
	 *
	 * @return 	array
	 */
	public function block_type_args(): array {
		return [
			'render_callback' => [ $this, 'render' ]
		];
	}

    /**
	 * Filter FAQ
	 * 
	 * @param 	string 	$attributes
	 * @param 	array 	$content
	 * 
	 * @return 	string
	 */
	public function render( array $attributes = [], string $content = '' ): string {
		$condition = ( get_prop( $attributes, [ 'listStyle' ] ) === '' && get_prop( $attributes, [ 'titleWrapper' ] ) === 'div' );
		
		if( $condition ) { // Apply only for default styleing with div titles (so we respect block settings).
			$dom		= $this->dom( $content );
			$sections	= get_elements_by_class_name( $dom, 'rank-math-faq-item' );
	
			if( count( $sections ) ) {
				foreach( $sections as $section ) {
					$section = change_tag_name( $section, 'details' );
					$summary = change_tag_name( get_elements_by_class_name( $section, 'rank-math-question', 'div', 0 ), 'summary' );
				}
			}

			$content	= new \WP_HTML_Tag_Processor( $dom->saveHtml() );
			$content->next_tag();
			$content->add_class( 'wp-block-details' );
		}

		return (string) $content;
	}

	/**
	 * Block styles.
	 *
	 * @return 	string Block CSS.
	 */
	public function enqueue_styles() {
		parent::enqueue_styles();

		wecodeart( 'assets' )->add_style( 'wp-block-details', [
			'load'		=> function( $blocks ) {
				if( wp_style_is( 'wp-block-details' ) ) {
					return false;
				}

				if( in_array( $this->get_block_type(), $blocks, true ) ) {
					return true;
				}
			},
			'inline'	=> wecodeart( 'blocks' )->get( 'core/details' )::get_instance()->styles()
		] );
	}
}
