<?php
/**
 * WeCodeArt Framework.
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package 	WeCodeArt Framework
 * @subpackage 	Support\WooCommerce
 * @copyright   Copyright (c) 2021, WeCodeArt Framework
 * @since 		1.9
 * @version		5.0.0
 */

namespace WeCodeArt\Support\Plugins;

defined( 'ABSPATH' ) || exit;

use WeCodeArt\Core\Content;
use WeCodeArt\Core\Pagination;
use WeCodeArt\Singleton;
use WeCodeArt\Markup;
use WeCodeArt\Markup\SVG;
use WeCodeArt\Customizer;
use WeCodeArt\Integration;
use function WeCodeArt\Functions\get_prop;

/**
 * The Class: Handles all necesary functions and requirements 
 * to ensure proper support for WooCommerce
 */
class WooCommerce implements Integration {

	use Singleton; 

	/**
	 * Send to Constructor
	 */
	public function init() {}
	
	/**
	 * Get Conditionals
	 *
	 * @return void
	 */
	public static function get_conditionals() {
		wecodeart( 'conditionals' )->set( [
			'is_woocommerce_active'		=> WooCommerce\Conditional\Plugin::class,
			'is_woocommerce_page'		=> WooCommerce\Conditional\Page::class,
			'is_woocommerce_archive'	=> WooCommerce\Conditional\Archive::class,
		] );

		return [ 'is_woocommerce_active' ];
	}

	/**
	 * Register Hooks
	 *
	 * @return void
	 */
	public function register_hooks() {
		// Customizer Options
		WooCommerce\Customizer::get_instance();

		// Add support for WooCommerce / Widgets
		add_action( 'after_setup_theme', 	[ $this, 'after_setup_theme' ] );
		add_action( 'widgets_init',  		[ $this, 'register_sidebars' ] );

		// Widgets and Hook into Sidebar
		remove_action( 'woocommerce_sidebar', 'woocommerce_get_sidebar'	);
		// Pagination - we use our own hooks and we have numeric pagination
		remove_action( 'woocommerce_after_shop_loop', 'woocommerce_pagination', 10 ); 

		// Content Wrappers
		remove_action( 'woocommerce_before_main_content', 	'woocommerce_output_content_wrapper',		10 );
		add_action( 'woocommerce_before_main_content',    	[ $this, 'before_content_wrapp' ], 	10 );
		remove_action( 'woocommerce_after_main_content',  	'woocommerce_output_content_wrapper_end',	10 );
		add_action( 'woocommerce_after_main_content',    	[ $this, 'after_content_wrapp' ],  	10 );

		// Filters
		add_filter( 'wecodeart/filter/header/bar/modules', 	[ $this, 'add_cart_to_header_modules' ] );
		add_filter( 'wecodeart/filter/gutenberg/restricted',[ $this, 'restricted_gutenberg_blocks' ] );
		add_filter( 'woocommerce_add_to_cart_fragments',	[ $this, 'cart_count_fragments' ], 10, 1 );
	}

	/**
	 * Sets up theme defaults and registers support for various WordPress features.
	 * @since	unknown
	 */
	public function after_setup_theme() {
		add_theme_support( 'woocommerce' );
		add_theme_support( 'wc-product-gallery-zoom' );
		add_theme_support( 'wc-product-gallery-lightbox' );
		add_theme_support( 'wc-product-gallery-slider' );
	}
	
	/**
	 * Before Content - Wraps all WooCommerce content in wrappers which match the theme markup
	 *
	 * @since   3.5
	 * @version 4.1.4
	 *
	 * @return  void
	 */
	public function before_content_wrapp() {
		if( wecodeart_if( 'is_woocommerce_archive' ) ) {
			$wrapper = get_theme_mod( 'content-layout-container-product-archive' );
		} elseif( is_product() ) {
			$wrapper = get_theme_mod( 'content-layout-container-product-singular' );
		} else {
			$wrapper = get_theme_mod( 'content-layout-container' );
		} 

		/**
		 * Added Attributes / can be filtered
		 * @since 3.7.0
		 */		
		?>
		<div <?php echo Markup::generate_attr( 'woocommerce-wrapper', [
			'class' => 'content-area content-area--woocommerce'
		] ); // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped ?>>
			<div class="<?php echo sanitize_html_class( $wrapper ); ?>">
				<div class="row">
		<?php
				self::sort_modules( 'before' );

				Content::get_instance()->content_markup_open();
	}

	/**
	 * After Content - Wraps all WooCommerce content in wrappers which match the theme markup
	 *
	 * @since   3.5
	 *
	 * @return  void
	 */
	public function after_content_wrapp() {
				Content::get_instance()->content_markup_close();

				self::sort_modules( 'after' ); ?>
				</div>
			</div>
		</div>
		<?php
	}
	
	/**
	 * Sort Content Modules based on position
	 *
	 * @since 	unknown
	 * @version	4.1.4
	 *
	 * @param 	string 	$position Accepts before/after - render sorted modules before/after woocommerce content.
	 *
	 * @return 	void
	 */
	public static function sort_modules( string $position ) {
		if( wecodeart_if( 'is_woocommerce_archive' ) ) {
			$modules = get_theme_mod( 'content-layout-modules-product-archive' ); 
		} elseif( is_product() ) {
			$modules = get_theme_mod( 'content-layout-modules-product-singular' ); 
		} else {
			$modules = get_theme_mod( 'content-layout-modules' );
		}

		$index = array_search( 'content', $modules );
		if( $position === 'after' ) $elements = array_slice( $modules, $index + 1 );
		if( $position === 'before') $elements = array_slice( $modules, 0, $index, false );

		$sortable = wp_parse_args( [
			'primary' => [
				'callback' => function() {
					Content::render_sidebar( 'shop' );
				}
			]
		], Content::content_modules() );

		// Sort the modules based on context.
		Markup::sortable( $sortable, $elements );
	}

	/**
	 * Register WooCommerce Shop Sidebar
	 *
	 * @since	3.3
	 * @version	3.9.5
	 *
	 * @return 	void
	 */
	public function register_sidebars() {
		wecodeart( 'register_sidebars', [ [
			'id'            => 'shop',
			'class'         => 'shop',
			'name'          => esc_html__( 'Shop Sidebar', 'wecodeart' ),
			'description'   => esc_html__( 
				'This is the Shop Sidebar - it will replace Primary Sidebar on WooCommerce Pages.', 
				'wecodeart' 
			),
		] ] );
	}

	/**
	 * Filter - WooCommerce Header Bar Cart Module
	 *
	 * @since	3.5
	 * @version	4.0.7
	 *
	 * @return 	array
	 */
	public function add_cart_to_header_modules( $modules ) {
		$modules['cart'] = [
			'label'    => esc_html__( 'WooCommerce Cart', 'wecodeart' ),
			'callback' => [ $this, 'display_cart_module' ],
		];

		return $modules;
	} 

	/**
	 * Filter - Restricted WooCommerce Blocks from theme code
	 *
	 * @since	5.0.0
	 * @version	5.0.0
	 *
	 * @return 	array
	 */
	public function restricted_gutenberg_blocks( $blocks ) {
		return wp_parse_args( [
			'woocommerce/handpicked-products',
			'woocommerce/products-by-attribute',
			'woocommerce/products-by-tag',
			'woocommerce/product-best-sellers',
			'woocommerce/product-top-rated',
			'woocommerce/product-on-sale',
			'woocommerce/product-new',
		], $blocks );
	} 

	/**
	 * Render Header Bar Cart Module
	 *
	 * @since   3.5
	 * @version 4.0.7
	 *
	 * @return  void
	 */
	public function display_cart_module() {
		Markup::wrap( 'header-cart', [ [
			'tag' 	=> 'div',
			'attrs' => [
				'id' 	=> 'bar-cart',
				'class' => 'header-bar__cart dropdown'
			] 
		] ], [ 'WeCodeArt\Markup', 'template' ], [ [ 'header/woo-cart', 'index' ], [
			'subtotal' 	=> wp_kses_post( WC()->cart->get_cart_subtotal() ),
			'count'		=> wp_kses_data( WC()->cart->get_cart_contents_count() )
		] ] );
	}

	/**
	 * Filter - Cart Fragments
	 *
	 * @since 	3.5
	 * @version	4.0.7
	 *
	 * @param 	array	fragments
	 *
	 * @return	array
	 */
	public function cart_count_fragments( $fragments ) {
		$subtotal = Markup::template( [ 'header/woo-cart', 'subtotal' ], [
            'subtotal' => WC()->cart->get_cart_subtotal(),
		], false );

		$doc = new \DOMDocument();
		$doc->loadHTML( $subtotal );
		$body = $doc->getElementsByTagName('body');
		
		if( $body && 0 < $body->length ) {
			$body = $body->item(0);
			$body_els = $body->getElementsByTagName('*');

			if( $body_els && 0 < $body_els->length ) {
				$first_child = $body_els->item(0);
				$fragments["{$first_child->tagName}.{$first_child->getAttribute('class')}"] = $subtotal;
			}
		}

		$count = Markup::template( [ 'header/woo-cart', 'count' ], [
            'count'  => WC()->cart->get_cart_contents_count(),
		], false );

		$doc->loadHTML( $count );
		$body = $doc->getElementsByTagName('body');
		
		if( $body && 0 < $body->length ) {
			$body = $body->item(0);
			$body_els = $body->getElementsByTagName('*');

			if( $body_els && 0 < $body_els->length ) {
				$first_child = $body_els->item(0);
				$fragments["{$first_child->tagName}.{$first_child->getAttribute('class')}"] = $count;
			}
		}

		return $fragments;
	} 
}