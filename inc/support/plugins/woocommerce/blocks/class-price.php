<?php
/**
 * WeCodeArt Framework
 *
 * WARNING: This file is part of the core WeCodeArt Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package		WeCodeArt Framework
 * @subpackage  Yoast\Blocks
 * @copyright   Copyright (c) 2023, WeCodeArt Framework
 * @since		6.1.2
 * @version		6.1.2
 */

namespace WeCodeArt\Support\Plugins\WooCommerce\Blocks;

defined( 'ABSPATH' ) || exit();

use WeCodeArt\Singleton;
use WeCodeArt\Gutenberg\Blocks\Dynamic;

use function add_action;
use function add_filter;
use function WeCodeArt\Functions\get_prop;

/**
 * Gutenberg Product Price block.
 */
class Price extends Dynamic {

	use Singleton;

	/**
	 * Block namespace.
	 *
	 * @var string
	 */
	protected $namespace = 'woocommerce';

	/**
	 * Block name.
	 *
	 * @var string
	 */
	protected $block_name = 'product-price';

	/**
	 * Block args.
	 *
	 * @return 	array
	 */
	public function init() {
		// PRP
		add_action( 'woocommerce_product_options_general_product_data', [ $this, 'manufacturer_product_data' 	], 20 );
		add_action( 'woocommerce_variation_options_pricing', 			[ $this, 'manufacturer_variation_data' 	], 20, 3 );
		add_action( 'woocommerce_process_product_meta', 				[ $this, 'process_product_meta' 		], 20);
		add_action( 'woocommerce_save_product_variation', 				[ $this, 'process_variation_meta' 		], 20, 2 );
		add_filter( 'woocommerce_available_variation',					[ $this, 'render_variation'	], 20 );
		add_filter( 'render_block_' . $this->get_block_type(),			[ $this, 'render_filter'	], 20 );
	}

    /**
	 * Filter Render
	 * 
	 * @param 	string 	$content
	 * 
	 * @return 	string
	 */
	public function render_filter( string $content = '' ): string {
		// $is_not_query = get_prop( $block, [ 'attrs', 'isDescendentOfQueryLoop' ] ) === false;

		$content = str_replace( '<del', $this->markup() . '<del', $content );

		return $content;
	}

	/**
	 * Variation Data 
	 *
	 * @since	1.0
	 * @version	1.0
	 *
	 * @return 	array
	 */
	public function render_variation( array $variations = [] ): array {
		$variations['price_manufacturer'] = $this->markup( wc_get_product( $variations[ 'variation_id' ] ) );
		
		return $variations;
	}

	/**
	 * Markup
	 * 
	 * @param 	string 	$content
	 * 
	 * @return 	string
	 */
	public function markup( object $product = null ): string {
		if( is_null( $product ) ) {
			global $product;
		}

		if( ! is_object( $product ) ) {
			return '';
		}
		
		$prp = $product->get_meta( 'price_manufacturer' );
		
		if( empty( $prp ) ) {
			return '';
		}
		
		$message = esc_html__( 'Acesta este prețul recomandat de producător. Prețul de vânzare al produsului este afișat mai jos.', 'wecodeart-honey' );
		
		wecodeart( 'styles' )->Utilities->load( [
			'ms-1',
			'm-0',
		] );
		
		wecodeart( 'markup' )->SVG::add( 'info', [
			'viewBox'	=> '0 0 16 16',
			'paths' 	=> [
				'M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z',
				'm8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z'
			]
		] );
		
		ob_start();

		?>
		<p class="woocommerce-product-prp has-small-font-size has-cyan-bluish-gray-color m-0">
			<span><?php
			
				printf( 'PRP: %s', wc_price( $prp ) );
		
			?></span>
			<a class="has-cyan-bluish-gray-color ms-1"
				href="javascript:void(0);"
				data-bs-toggle="tooltip"
				data-bs-custom-class="prp-tooltip"
				title="<?php echo esc_attr( $message ); ?>">
				<?php
				
				wecodeart( 'markup' )->SVG::render( 'info', [
					'class' => 'fa-fw'
				] );
		
				?>
			</a>
		</p>
		<?php

		return ob_get_clean();
	}

	/**
	 * Process Variation Meta
	 *
	 * @since	1.0
	 * @version	1.0
	 *
	 * @return 	void
	 */
	public function process_variation_meta( $variation_id, $i ) {
		$product = wc_get_product( $variation_id );
		$product_prp = isset( $_POST['price_manufacturer'][$i] ) ? $_POST['price_manufacturer'][$i] : '';
		$product->update_meta_data( 'price_manufacturer', sanitize_text_field( $product_prp ) );
		$product->save();
	}
	
	/**
	 * Process Product Meta
	 *
	 * @since	1.0
	 * @version	1.0
	 *
	 * @return 	string
	 */
	public function process_product_meta( $post_id ) {
		$product = wc_get_product( $post_id );
		$product_prp = isset( $_POST['price_manufacturer']) ? $_POST['price_manufacturer'] : '';
		$product->update_meta_data( 'price_manufacturer', sanitize_text_field( $product_prp ) );
		$product->save();
	}

	/**
	 * General Product Data 
	 *
	 * @since	1.0
	 * @version	1.0
	 *
	 * @return 	string
	 */
	public function manufacturer_product_data() {
		// Number Field
		woocommerce_wp_text_input( [
			'data_type'		=> 'price',
			'id' 			=> 'price_manufacturer', 
			'label' 		=> sprintf( __( 'Recommended price (%s)', 'woocommerce' ), get_woocommerce_currency_symbol() ), 
			'placeholder' 	=> '', 
			'description'	=> __( 'Enter the price recommended by manufacturer.', 'woocommerce' ),
			'desc_tip' 		=> true,
		] );
	}

	/**
	 * Variation Data 
	 *
	 * @since	1.0
	 * @version	1.0
	 *
	 * @return 	void
	 */
	public function manufacturer_variation_data( $loop, $variation_data, $variation ) { 
		// Number Field
		woocommerce_wp_text_input( [
			'data_type'		=> 'price',
			'wrapper_class'	=> 'form-row',
			'id' 			=> 'price_manufacturer[' . $loop . ']', 
			'label' 		=> sprintf( __( 'Recommended price (%s)', 'woocommerce' ), get_woocommerce_currency_symbol() ), 
			'value' 		=> get_post_meta( $variation->ID, 'price_manufacturer', true ),
			'placeholder' 	=> '', 
			'description'	=> __( 'Enter the price recomended by manufacturer.', 'woocommerce' ),
			'desc_tip' 		=> true,
		] );
	}

	/**
	 * Block styles
	 *
	 * @return 	string 	The block styles.
	 */
	public function styles(): string {
		return '';
	}
}
